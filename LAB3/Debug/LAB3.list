
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000068  08006970  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08006970  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110ea  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e4  00000000  00000000  000311c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ade  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ff  00000000  00000000  00034f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121d2  00000000  00000000  0005b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee37c  00000000  00000000  0006d567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e4  00000000  00000000  0015b8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067c0 	.word	0x080067c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080067c0 	.word	0x080067c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fd63 	bl	800108a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f811 	bl	80005ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f916 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f8e2 	bl	8000794 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f896 	bl	8000700 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80005d4:	f000 f854 	bl	8000680 <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Transmmit();
 80005d8:	f000 fa68 	bl	8000aac <Transmmit>
	  Recieve();
 80005dc:	f000 fa42 	bl	8000a64 <Recieve>

	  Start();
 80005e0:	f000 f9c2 	bl	8000968 <Start>
	  Play();
 80005e4:	f000 f9f8 	bl	80009d8 <Play>
	  Transmmit();
 80005e8:	e7f6      	b.n	80005d8 <main+0x1c>

080005ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b094      	sub	sp, #80	; 0x50
 80005ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	2238      	movs	r2, #56	; 0x38
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fa3e 	bl	8005a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800060c:	2000      	movs	r0, #0
 800060e:	f003 f8fd 	bl	800380c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800062c:	2355      	movs	r3, #85	; 0x55
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f997 	bl	8003974 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800064c:	f000 fa5e 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fc95 	bl	8003f98 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000674:	f000 fa4a 	bl	8000b0c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C2_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C2_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_I2C2_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006bc:	f001 fa73 	bl	8001ba6 <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 fa21 	bl	8000b0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006ce:	f003 f805 	bl	80036dc <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 fa18 	bl	8000b0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006e0:	f003 f847 	bl	8003772 <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 fa0f 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000084 	.word	0x20000084
 80006f8:	40005800 	.word	0x40005800
 80006fc:	30a0a7fb 	.word	0x30a0a7fb

08000700 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_LPUART1_UART_Init+0x90>)
 8000708:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 800070c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000710:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000744:	f004 f892 	bl	800486c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f9dd 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000756:	f004 ff83 	bl	8005660 <HAL_UARTEx_SetTxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000760:	f000 f9d4 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f004 ffb8 	bl	80056dc <HAL_UARTEx_SetRxFifoThreshold>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000772:	f000 f9cb 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_LPUART1_UART_Init+0x8c>)
 8000778:	f004 ff39 	bl	80055ee <HAL_UARTEx_DisableFifoMode>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000782:	f000 f9c3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000198 	.word	0x20000198
 8000790:	40008000 	.word	0x40008000

08000794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_DMA_Init+0x60>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_DMA_Init+0x60>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6493      	str	r3, [r2, #72]	; 0x48
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_DMA_Init+0x60>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_DMA_Init+0x60>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DMA_Init+0x60>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6493      	str	r3, [r2, #72]	; 0x48
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DMA_Init+0x60>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200b      	movs	r0, #11
 80007d0:	f000 fdc9 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d4:	200b      	movs	r0, #11
 80007d6:	f000 fde0 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 fdc1 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007e4:	200c      	movs	r0, #12
 80007e6:	f000 fdd8 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_GPIO_Init+0xd4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_GPIO_Init+0xd4>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0320 	and.w	r3, r3, #32
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xd4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0xd4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 f95b 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000880:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0xd8>)
 8000892:	f000 ffcb 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	2320      	movs	r3, #32
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 ffbc 	bl	800182c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2028      	movs	r0, #40	; 0x28
 80008ba:	f000 fd54 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f000 fd6b 	bl	800139a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800

080008d4 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c2.State == HAL_I2C_STATE_READY) {
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <EEPROMWriteExample+0x3c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d012      	beq.n	8000908 <EEPROMWriteExample+0x34>
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <EEPROMWriteExample+0x40>)
 80008e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b20      	cmp	r3, #32
 80008ec:	d10c      	bne.n	8000908 <EEPROMWriteExample+0x34>
		HAL_I2C_Mem_Write_IT(&hi2c2, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, result, 1);
 80008ee:	2301      	movs	r3, #1
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <EEPROMWriteExample+0x44>)
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2302      	movs	r3, #2
 80008f8:	222c      	movs	r2, #44	; 0x2c
 80008fa:	21a0      	movs	r1, #160	; 0xa0
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <EEPROMWriteExample+0x40>)
 80008fe:	f001 f9ed 	bl	8001cdc <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 8000902:	4b03      	ldr	r3, [pc, #12]	; (8000910 <EEPROMWriteExample+0x3c>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
	}
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000022c 	.word	0x2000022c
 8000914:	20000084 	.word	0x20000084
 8000918:	20000238 	.word	0x20000238

0800091c <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c2.State == HAL_I2C_STATE_READY) {
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <EEPROMReadExample+0x44>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <EEPROMReadExample+0x3a>
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <EEPROMReadExample+0x48>)
 8000932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b20      	cmp	r3, #32
 800093a:	d10c      	bne.n	8000956 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c2, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2302      	movs	r3, #2
 8000946:	222c      	movs	r2, #44	; 0x2c
 8000948:	21a0      	movs	r1, #160	; 0xa0
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <EEPROMReadExample+0x48>)
 800094c:	f001 fa50 	bl	8001df0 <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <EEPROMReadExample+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	}
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000022d 	.word	0x2000022d
 8000964:	20000084 	.word	0x20000084

08000968 <Start>:

void Start()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	 if(start)
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <Start+0x5c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d025      	beq.n	80009c0 <Start+0x58>
	 {
		 time = rand() % (8000 - 3000 + 1) + 3000;
 8000974:	f004 ff3e 	bl	80057f4 <rand>
 8000978:	4603      	mov	r3, r0
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <Start+0x60>)
 800097c:	fb82 1203 	smull	r1, r2, r2, r3
 8000980:	441a      	add	r2, r3
 8000982:	1311      	asrs	r1, r2, #12
 8000984:	17da      	asrs	r2, r3, #31
 8000986:	1a8a      	subs	r2, r1, r2
 8000988:	f241 3189 	movw	r1, #5001	; 0x1389
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	1a9a      	subs	r2, r3, r2
 8000992:	b293      	uxth	r3, r2
 8000994:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <Start+0x64>)
 800099c:	801a      	strh	r2, [r3, #0]
		 start = 0;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <Start+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
		 HAL_Delay(time);
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <Start+0x64>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fbdf 	bl	800116c <HAL_Delay>
		 led = 1;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <Start+0x68>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
		 stimer = HAL_GetTick();
 80009b4:	f000 fbce 	bl	8001154 <HAL_GetTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <Start+0x6c>)
 80009be:	801a      	strh	r2, [r3, #0]
	 }
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000231 	.word	0x20000231
 80009c8:	d1ac5b1f 	.word	0xd1ac5b1f
 80009cc:	20000234 	.word	0x20000234
 80009d0:	20000233 	.word	0x20000233
 80009d4:	20000236 	.word	0x20000236

080009d8 <Play>:


void Play()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	if(led == 1)
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <Play+0x70>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d12e      	bne.n	8000a42 <Play+0x6a>
	{
		if(play){
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <Play+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02a      	beq.n	8000a42 <Play+0x6a>
			rawresult = HAL_GetTick() - stimer ;
 80009ec:	f000 fbb2 	bl	8001154 <HAL_GetTick>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <Play+0x78>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <Play+0x7c>)
 80009fe:	801a      	strh	r2, [r3, #0]
			if(rawresult > 1000)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <Play+0x7c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a08:	d903      	bls.n	8000a12 <Play+0x3a>
			{
				result[0] = 100;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <Play+0x80>)
 8000a0c:	2264      	movs	r2, #100	; 0x64
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e009      	b.n	8000a26 <Play+0x4e>
			}
			else
			{
				result[0] = rawresult / 10;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <Play+0x7c>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <Play+0x84>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <Play+0x80>)
 8000a24:	701a      	strb	r2, [r3, #0]
			}
			eepromExampleWriteFlag = 1;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <Play+0x88>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
			EEPROMWriteExample();
 8000a2c:	f7ff ff52 	bl	80008d4 <EEPROMWriteExample>
			play = 0;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <Play+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
			stimer = 0;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <Play+0x78>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
			led = 0;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <Play+0x70>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000233 	.word	0x20000233
 8000a4c:	20000232 	.word	0x20000232
 8000a50:	20000236 	.word	0x20000236
 8000a54:	2000023a 	.word	0x2000023a
 8000a58:	20000238 	.word	0x20000238
 8000a5c:	cccccccd 	.word	0xcccccccd
 8000a60:	2000022c 	.word	0x2000022c

08000a64 <Recieve>:

void Recieve()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&hlpuart1, RxBuffer, 6, 10000);
 8000a68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a6c:	2206      	movs	r2, #6
 8000a6e:	490b      	ldr	r1, [pc, #44]	; (8000a9c <Recieve+0x38>)
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <Recieve+0x3c>)
 8000a72:	f003 ffd9 	bl	8004a28 <HAL_UART_Receive>
	if(RxBuffer[0] == 'a')
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <Recieve+0x38>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b61      	cmp	r3, #97	; 0x61
 8000a7c:	d103      	bne.n	8000a86 <Recieve+0x22>
	{
		start = RxBuffer[1];
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <Recieve+0x38>)
 8000a80:	785a      	ldrb	r2, [r3, #1]
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <Recieve+0x40>)
 8000a84:	701a      	strb	r2, [r3, #0]
	}
	if(RxBuffer[3] == 'b')
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <Recieve+0x38>)
 8000a88:	78db      	ldrb	r3, [r3, #3]
 8000a8a:	2b62      	cmp	r3, #98	; 0x62
 8000a8c:	d103      	bne.n	8000a96 <Recieve+0x32>
	{
		play = RxBuffer[4];
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <Recieve+0x38>)
 8000a90:	791a      	ldrb	r2, [r3, #4]
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <Recieve+0x44>)
 8000a94:	701a      	strb	r2, [r3, #0]
	}

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000023c 	.word	0x2000023c
 8000aa0:	20000198 	.word	0x20000198
 8000aa4:	20000231 	.word	0x20000231
 8000aa8:	20000232 	.word	0x20000232

08000aac <Transmmit>:

void Transmmit()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	eepromExampleReadFlag = 1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Transmmit+0x4c>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
	EEPROMReadExample(Times, 1);
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <Transmmit+0x50>)
 8000aba:	f7ff ff2f 	bl	800091c <EEPROMReadExample>
	TxBuffer[0] = 'a';
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <Transmmit+0x54>)
 8000ac0:	2261      	movs	r2, #97	; 0x61
 8000ac2:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] = led;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <Transmmit+0x58>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <Transmmit+0x54>)
 8000aca:	705a      	strb	r2, [r3, #1]
	TxBuffer[2] = '\n';
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <Transmmit+0x54>)
 8000ace:	220a      	movs	r2, #10
 8000ad0:	709a      	strb	r2, [r3, #2]
	TxBuffer[3] = 'b';
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <Transmmit+0x54>)
 8000ad4:	2262      	movs	r2, #98	; 0x62
 8000ad6:	70da      	strb	r2, [r3, #3]
	TxBuffer[4] = Times[0];
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <Transmmit+0x50>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <Transmmit+0x54>)
 8000ade:	711a      	strb	r2, [r3, #4]
	TxBuffer[5] = '\n';
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <Transmmit+0x54>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	715a      	strb	r2, [r3, #5]
 	HAL_UART_Transmit(&hlpuart1, TxBuffer, 6, 5000);
 8000ae6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aea:	2206      	movs	r2, #6
 8000aec:	4904      	ldr	r1, [pc, #16]	; (8000b00 <Transmmit+0x54>)
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <Transmmit+0x5c>)
 8000af0:	f003 ff0c 	bl	800490c <HAL_UART_Transmit>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000022d 	.word	0x2000022d
 8000afc:	20000230 	.word	0x20000230
 8000b00:	20000244 	.word	0x20000244
 8000b04:	20000233 	.word	0x20000233
 8000b08:	20000198 	.word	0x20000198

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_MspInit+0x44>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6593      	str	r3, [r2, #88]	; 0x58
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x44>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b4e:	f002 ff01 	bl	8003954 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0a0      	sub	sp, #128	; 0x80
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	2254      	movs	r2, #84	; 0x54
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 ff7a 	bl	8005a7a <memset>
  if(hi2c->Instance==I2C2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a5f      	ldr	r2, [pc, #380]	; (8000d08 <HAL_I2C_MspInit+0x1a8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	f040 80b6 	bne.w	8000cfe <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 fc16 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff ffaf 	bl	8000b0c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a56      	ldr	r2, [pc, #344]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bde:	2310      	movs	r3, #16
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4845      	ldr	r0, [pc, #276]	; (8000d10 <HAL_I2C_MspInit+0x1b0>)
 8000bfa:	f000 fe17 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	2312      	movs	r3, #18
 8000c06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c10:	2304      	movs	r3, #4
 8000c12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fe05 	bl	800182c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a39      	ldr	r2, [pc, #228]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <HAL_I2C_MspInit+0x1ac>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c3c:	4a36      	ldr	r2, [pc, #216]	; (8000d18 <HAL_I2C_MspInit+0x1b8>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c42:	2212      	movs	r2, #18
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000c70:	4828      	ldr	r0, [pc, #160]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c72:	f000 fbad 	bl	80013d0 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000c7c:	f7ff ff46 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_I2C_MspInit+0x1b4>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000c8e:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <HAL_I2C_MspInit+0x1c0>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000c94:	2213      	movs	r2, #19
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000cc2:	4816      	ldr	r0, [pc, #88]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cc4:	f000 fb84 	bl	80013d0 <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000cce:	f7ff ff1d 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_I2C_MspInit+0x1bc>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2021      	movs	r0, #33	; 0x21
 8000ce4:	f000 fb3f 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ce8:	2021      	movs	r0, #33	; 0x21
 8000cea:	f000 fb56 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2022      	movs	r0, #34	; 0x22
 8000cf4:	f000 fb37 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000cf8:	2022      	movs	r0, #34	; 0x22
 8000cfa:	f000 fb4e 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3780      	adds	r7, #128	; 0x80
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005800 	.word	0x40005800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000800 	.word	0x48000800
 8000d14:	200000d8 	.word	0x200000d8
 8000d18:	40020008 	.word	0x40020008
 8000d1c:	20000138 	.word	0x20000138
 8000d20:	4002001c 	.word	0x4002001c

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09e      	sub	sp, #120	; 0x78
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2254      	movs	r2, #84	; 0x54
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 fe98 	bl	8005a7a <memset>
  if(huart->Instance==LPUART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_UART_MspInit+0xa8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d136      	bne.n	8000dc2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d54:	2320      	movs	r3, #32
 8000d56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fb35 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d6c:	f7ff fece 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_UART_MspInit+0xac>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000da0:	230c      	movs	r3, #12
 8000da2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000db0:	230c      	movs	r3, #12
 8000db2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f000 fd35 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3778      	adds	r7, #120	; 0x78
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40008000 	.word	0x40008000
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f986 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <DMA1_Channel1_IRQHandler+0x10>)
 8000e2e:	f000 fbde 	bl	80015ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000d8 	.word	0x200000d8

08000e3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Channel2_IRQHandler+0x10>)
 8000e42:	f000 fbd4 	bl	80015ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000138 	.word	0x20000138

08000e50 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <I2C2_EV_IRQHandler+0x10>)
 8000e56:	f001 f851 	bl	8001efc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000084 	.word	0x20000084

08000e64 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <I2C2_ER_IRQHandler+0x10>)
 8000e6a:	f001 f861 	bl	8001f30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000084 	.word	0x20000084

08000e78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e80:	f000 fe6e 	bl	8001b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_kill>:

int _kill(int pid, int sig)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ea2:	f004 fe39 	bl	8005b18 <__errno>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2216      	movs	r2, #22
 8000eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_exit>:

void _exit (int status)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffe7 	bl	8000e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eca:	e7fe      	b.n	8000eca <_exit+0x12>

08000ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
  }
  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f004 fd9e 	bl	8005b18 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20020000 	.word	0x20020000
 8001008:	00000400 	.word	0x00000400
 800100c:	2000024c 	.word	0x2000024c
 8001010:	200003a0 	.word	0x200003a0

08001014 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800103c:	f7ff ffea 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f004 fd5d 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106a:	f7ff faa7 	bl	80005bc <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800107c:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8001080:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001084:	200003a0 	.word	0x200003a0

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>

0800108a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f95b 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f80e 	bl	80010bc <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	e001      	b.n	80010b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ac:	f7ff fd34 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b0:	79fb      	ldrb	r3, [r7, #7]

}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_InitTick+0x68>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d022      	beq.n	8001116 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_InitTick+0x6c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_InitTick+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f966 	bl	80013b6 <HAL_SYSTICK_Config>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d809      	bhi.n	800110a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	2200      	movs	r2, #0
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295
 80010fe:	f000 f932 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_InitTick+0x70>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e007      	b.n	800111a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e004      	b.n	800111a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000008 	.word	0x20000008
 8001128:	20000000 	.word	0x20000000
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x1c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x20>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x1c>)
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000250 	.word	0x20000250
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000250 	.word	0x20000250

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d004      	beq.n	8001190 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001190:	bf00      	nop
 8001192:	f7ff ffdf 	bl	8001154 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d8f7      	bhi.n	8001192 <HAL_Delay+0x26>
  {
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff40 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa4 	bl	800130c <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e08d      	b.n	80014fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_DMA_Init+0x138>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d80f      	bhi.n	800140e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <HAL_DMA_Init+0x13c>)
 80013f6:	4413      	add	r3, r2
 80013f8:	4a45      	ldr	r2, [pc, #276]	; (8001510 <HAL_DMA_Init+0x140>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	009a      	lsls	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_DMA_Init+0x144>)
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
 800140c:	e00e      	b.n	800142c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_DMA_Init+0x148>)
 8001416:	4413      	add	r3, r2
 8001418:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_DMA_Init+0x140>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	009a      	lsls	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a3c      	ldr	r2, [pc, #240]	; (800151c <HAL_DMA_Init+0x14c>)
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f972 	bl	8001768 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800148c:	d102      	bne.n	8001494 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d010      	beq.n	80014d4 <HAL_DMA_Init+0x104>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d80c      	bhi.n	80014d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f992 	bl	80017e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	e008      	b.n	80014e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020407 	.word	0x40020407
 800150c:	bffdfff8 	.word	0xbffdfff8
 8001510:	cccccccd 	.word	0xcccccccd
 8001514:	40020000 	.word	0x40020000
 8001518:	bffdfbf8 	.word	0xbffdfbf8
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d00d      	beq.n	8001554 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2204      	movs	r2, #4
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e047      	b.n	80015e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
    }
  }
  return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d026      	beq.n	8001668 <HAL_DMA_IRQHandler+0x7a>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d021      	beq.n	8001668 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	2b00      	cmp	r3, #0
 8001630:	d107      	bne.n	8001642 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0204 	bic.w	r2, r2, #4
 8001640:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 021f 	and.w	r2, r3, #31
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2104      	movs	r1, #4
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	2b00      	cmp	r3, #0
 800165c:	d071      	beq.n	8001742 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001666:	e06c      	b.n	8001742 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2202      	movs	r2, #2
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02e      	beq.n	80016da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d029      	beq.n	80016da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10b      	bne.n	80016ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 020a 	bic.w	r2, r2, #10
 80016a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2102      	movs	r1, #2
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d038      	beq.n	8001742 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016d8:	e033      	b.n	8001742 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2208      	movs	r2, #8
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02a      	beq.n	8001744 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d025      	beq.n	8001744 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 020e 	bic.w	r2, r2, #14
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001742:	bf00      	nop
 8001744:	bf00      	nop
}
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175a:	b2db      	uxtb	r3, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001778:	429a      	cmp	r2, r3
 800177a:	d802      	bhi.n	8001782 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e001      	b.n	8001786 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001784:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3b08      	subs	r3, #8
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2201      	movs	r2, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40020407 	.word	0x40020407
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020820 	.word	0x40020820
 80017dc:	cccccccd 	.word	0xcccccccd
 80017e0:	40020880 	.word	0x40020880

080017e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	461a      	mov	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a08      	ldr	r2, [pc, #32]	; (8001828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001806:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3b01      	subs	r3, #1
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	1000823f 	.word	0x1000823f
 8001828:	40020940 	.word	0x40020940

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800183a:	e15a      	b.n	8001af2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 814c 	beq.w	8001aec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d005      	beq.n	800186c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001868:	2b02      	cmp	r3, #2
 800186a:	d130      	bne.n	80018ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 0201 	and.w	r2, r3, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d017      	beq.n	800190a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d123      	bne.n	800195e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0203 	and.w	r2, r3, #3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a6 	beq.w	8001aec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_GPIO_Init+0x2e4>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	4a5a      	ldr	r2, [pc, #360]	; (8001b10 <HAL_GPIO_Init+0x2e4>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6613      	str	r3, [r2, #96]	; 0x60
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_GPIO_Init+0x2e4>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b8:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x2e8>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e2:	d01f      	beq.n	8001a24 <HAL_GPIO_Init+0x1f8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_GPIO_Init+0x2ec>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d019      	beq.n	8001a20 <HAL_GPIO_Init+0x1f4>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_GPIO_Init+0x2f0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_GPIO_Init+0x1f0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_GPIO_Init+0x2f4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <HAL_GPIO_Init+0x1ec>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2f8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x1e8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_GPIO_Init+0x1e4>
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e00a      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a10:	2306      	movs	r3, #6
 8001a12:	e008      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1fa>
 8001a24:	2300      	movs	r3, #0
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_GPIO_Init+0x2e8>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a92:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f ae9d 	bne.w	800183c <HAL_GPIO_Init+0x10>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	48000800 	.word	0x48000800
 8001b20:	48000c00 	.word	0x48000c00
 8001b24:	48001000 	.word	0x48001000
 8001b28:	48001400 	.word	0x48001400
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f806 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e08d      	b.n	8001cd4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe ffc7 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2224      	movs	r2, #36	; 0x24
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	e006      	b.n	8001c2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d108      	bne.n	8001c48 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e007      	b.n	8001c58 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69d9      	ldr	r1, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d16a      	bne.n	8001dd8 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_I2C_Mem_Write_IT+0x32>
 8001d08:	8bbb      	ldrh	r3, [r7, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e05f      	b.n	8001dda <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e055      	b.n	8001dda <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_I2C_Mem_Write_IT+0x60>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e04e      	b.n	8001dda <HAL_I2C_Mem_Write_IT+0xfe>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2221      	movs	r2, #33	; 0x21
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8bba      	ldrh	r2, [r7, #28]
 8001d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_I2C_Mem_Write_IT+0x108>)
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001d78:	897a      	ldrh	r2, [r7, #10]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d109      	bne.n	8001d98 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50
 8001d96:	e00b      	b.n	8001db0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001da6:	893b      	ldrh	r3, [r7, #8]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	8979      	ldrh	r1, [r7, #10]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_I2C_Mem_Write_IT+0x110>)
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f001 fb78 	bl	80034b4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f001 fba2 	bl	8003518 <I2C_Enable_IRQ>

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	ffff0000 	.word	0xffff0000
 8001de8:	080020b9 	.word	0x080020b9
 8001dec:	80002000 	.word	0x80002000

08001df0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	460b      	mov	r3, r1
 8001e04:	813b      	strh	r3, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d166      	bne.n	8001ee4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_I2C_Mem_Read_IT+0x32>
 8001e1c:	8bbb      	ldrh	r3, [r7, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e05b      	b.n	8001ee6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e051      	b.n	8001ee6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2C_Mem_Read_IT+0x60>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e04a      	b.n	8001ee6 <HAL_I2C_Mem_Read_IT+0xf6>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2222      	movs	r2, #34	; 0x22
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8bba      	ldrh	r2, [r7, #28]
 8001e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_I2C_Mem_Read_IT+0x100>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_I2C_Mem_Read_IT+0x104>)
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001e86:	897a      	ldrh	r2, [r7, #10]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d109      	bne.n	8001ea6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ea4:	e00b      	b.n	8001ebe <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_I2C_Mem_Read_IT+0x108>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f001 faf2 	bl	80034b4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f001 fb1c 	bl	8003518 <I2C_Enable_IRQ>

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	ffff0000 	.word	0xffff0000
 8001ef4:	080020b9 	.word	0x080020b9
 8001ef8:	80002000 	.word	0x80002000

08001efc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00f      	beq.n	8001f72 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00f      	beq.n	8001f9c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f043 0208 	orr.w	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00f      	beq.n	8001fc6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f043 0202 	orr.w	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 030b 	and.w	r3, r3, #11
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f001 f911 	bl	8003200 <I2C_ITError>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	4613      	mov	r3, r2
 8002044:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80020c4:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <I2C_Mem_ISR_IT+0x244>)
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <I2C_Mem_ISR_IT+0x22>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e10c      	b.n	80022f4 <I2C_Mem_ISR_IT+0x23c>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2210      	movs	r2, #16
 80020fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f001 f98f 	bl	800342e <I2C_Flush_TXDR>
 8002110:	e0dd      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d022      	beq.n	8002162 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01d      	beq.n	8002162 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002160:	e0b5      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02c      	beq.n	80021c6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002172:	2b00      	cmp	r3, #0
 8002174:	d027      	beq.n	80021c6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d118      	bne.n	80021b2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80021b0:	e08d      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80021c4:	e083      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d03c      	beq.n	800224a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d037      	beq.n	800224a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02c      	beq.n	800223e <I2C_Mem_ISR_IT+0x186>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d128      	bne.n	800223e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2bff      	cmp	r3, #255	; 0xff
 80021f4:	d910      	bls.n	8002218 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22ff      	movs	r2, #255	; 0xff
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	b299      	uxth	r1, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f001 f94f 	bl	80034b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002216:	e017      	b.n	8002248 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	b299      	uxth	r1, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	b2da      	uxtb	r2, r3
 800222e:	2300      	movs	r3, #0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f001 f93c 	bl	80034b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223c:	e004      	b.n	8002248 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 ffdd 	bl	8003200 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002246:	e042      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
 8002248:	e041      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800225a:	2b00      	cmp	r3, #0
 800225c:	d037      	beq.n	80022ce <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800225e:	2101      	movs	r1, #1
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f001 f9dd 	bl	8003620 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002266:	2102      	movs	r1, #2
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f001 f955 	bl	8003518 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b22      	cmp	r3, #34	; 0x22
 8002278:	d101      	bne.n	800227e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <I2C_Mem_ISR_IT+0x248>)
 800227c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	2bff      	cmp	r3, #255	; 0xff
 8002286:	d910      	bls.n	80022aa <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	22ff      	movs	r2, #255	; 0xff
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	b299      	uxth	r1, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f001 f906 	bl	80034b4 <I2C_TransferConfig>
 80022a8:	e011      	b.n	80022ce <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	b299      	uxth	r1, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f001 f8f3 	bl	80034b4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80022e2:	6939      	ldr	r1, [r7, #16]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fd0b 	bl	8002d00 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	80002000 	.word	0x80002000
 8002300:	80002400 	.word	0x80002400

08002304 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <I2C_Slave_ISR_IT+0x24>
 8002324:	2302      	movs	r3, #2
 8002326:	e0e2      	b.n	80024ee <I2C_Slave_ISR_IT+0x1ea>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fda2 	bl	8002e90 <I2C_ITSlaveCplt>
 800234c:	e0ca      	b.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d04b      	beq.n	80023f0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800235e:	2b00      	cmp	r3, #0
 8002360:	d046      	beq.n	80023f0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d128      	bne.n	80023be <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b28      	cmp	r3, #40	; 0x28
 8002376:	d108      	bne.n	800238a <I2C_Slave_ISR_IT+0x86>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800237e:	d104      	bne.n	800238a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fee8 	bl	8003158 <I2C_ITListenCplt>
 8002388:	e031      	b.n	80023ee <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b29      	cmp	r3, #41	; 0x29
 8002394:	d10e      	bne.n	80023b4 <I2C_Slave_ISR_IT+0xb0>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800239c:	d00a      	beq.n	80023b4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2210      	movs	r2, #16
 80023a4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f001 f841 	bl	800342e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fc4b 	bl	8002c48 <I2C_ITSlaveSeqCplt>
 80023b2:	e01c      	b.n	80023ee <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2210      	movs	r2, #16
 80023ba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80023bc:	e08f      	b.n	80024de <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2210      	movs	r2, #16
 80023c4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f043 0204 	orr.w	r2, r3, #4
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <I2C_Slave_ISR_IT+0xdc>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023de:	d17e      	bne.n	80024de <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	4619      	mov	r1, r3
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 ff0a 	bl	8003200 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023ec:	e077      	b.n	80024de <I2C_Slave_ISR_IT+0x1da>
 80023ee:	e076      	b.n	80024de <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02f      	beq.n	800245a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02a      	beq.n	800245a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d018      	beq.n	8002440 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d14b      	bne.n	80024e2 <I2C_Slave_ISR_IT+0x1de>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002450:	d047      	beq.n	80024e2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fbf8 	bl	8002c48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002458:	e043      	b.n	80024e2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fb28 	bl	8002ac6 <I2C_ITAddrCplt>
 8002476:	e035      	b.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d030      	beq.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02b      	beq.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d018      	beq.n	80024c8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80024c6:	e00d      	b.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ce:	d002      	beq.n	80024d6 <I2C_Slave_ISR_IT+0x1d2>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fbb6 	bl	8002c48 <I2C_ITSlaveSeqCplt>
 80024dc:	e002      	b.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80024e2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b088      	sub	sp, #32
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <I2C_Master_ISR_DMA+0x1a>
 800250c:	2302      	movs	r3, #2
 800250e:	e0d9      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1ce>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002528:	2b00      	cmp	r3, #0
 800252a:	d011      	beq.n	8002550 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2210      	movs	r2, #16
 8002532:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002540:	2120      	movs	r1, #32
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 ffe8 	bl	8003518 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 ff70 	bl	800342e <I2C_Flush_TXDR>
 800254e:	e0b4      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d071      	beq.n	800263e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002560:	2b00      	cmp	r3, #0
 8002562:	d06c      	beq.n	800263e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04e      	beq.n	800261c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d906      	bls.n	80025a4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	; 0xff
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800259c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e010      	b.n	80025c6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b6:	d003      	beq.n	80025c0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e002      	b.n	80025c6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80025c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	8a79      	ldrh	r1, [r7, #18]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 ff6d 	bl	80034b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b22      	cmp	r3, #34	; 0x22
 80025f6:	d108      	bne.n	800260a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002608:	e057      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002618:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800261a:	e04e      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262a:	d003      	beq.n	8002634 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 face 	bl	8002bce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002632:	e042      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fde2 	bl	8003200 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800263c:	e03d      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d028      	beq.n	800269a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800266a:	d025      	beq.n	80026b8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002674:	d108      	bne.n	8002688 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002684:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002686:	e017      	b.n	80026b8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 faa0 	bl	8002bce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800268e:	e013      	b.n	80026b8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002690:	2140      	movs	r1, #64	; 0x40
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fdb4 	bl	8003200 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002698:	e00e      	b.n	80026b8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fb25 	bl	8002d00 <I2C_ITMasterCplt>
 80026b6:	e000      	b.n	80026ba <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80026b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80026d8:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <I2C_Mem_ISR_DMA+0x244>)
 80026da:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <I2C_Mem_ISR_DMA+0x1e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e10e      	b.n	8002908 <I2C_Mem_ISR_DMA+0x23c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2210      	movs	r2, #16
 800270c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f043 0204 	orr.w	r2, r3, #4
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800271a:	2120      	movs	r1, #32
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fefb 	bl	8003518 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fe83 	bl	800342e <I2C_Flush_TXDR>
 8002728:	e0e9      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002746:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f04f 32ff 	mov.w	r2, #4294967295
 800274e:	651a      	str	r2, [r3, #80]	; 0x50
 8002750:	e0d5      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05f      	beq.n	800281c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002762:	2b00      	cmp	r3, #0
 8002764:	d05a      	beq.n	800281c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002766:	2101      	movs	r1, #1
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 ff59 	bl	8003620 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800276e:	2110      	movs	r1, #16
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fed1 	bl	8003518 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d048      	beq.n	8002812 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d910      	bls.n	80027ac <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	b299      	uxth	r1, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fe85 	bl	80034b4 <I2C_TransferConfig>
 80027aa:	e011      	b.n	80027d0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ba:	b299      	uxth	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fe72 	bl	80034b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b22      	cmp	r3, #34	; 0x22
 80027ec:	d108      	bne.n	8002800 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027fe:	e07e      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002810:	e075      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fcf3 	bl	8003200 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800281a:	e070      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05d      	beq.n	80028e2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800282c:	2b00      	cmp	r3, #0
 800282e:	d058      	beq.n	80028e2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002830:	2101      	movs	r1, #1
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fef4 	bl	8003620 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002838:	2110      	movs	r1, #16
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fe6c 	bl	8003518 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b22      	cmp	r3, #34	; 0x22
 800284a:	d101      	bne.n	8002850 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <I2C_Mem_ISR_DMA+0x248>)
 800284e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2bff      	cmp	r3, #255	; 0xff
 8002858:	d910      	bls.n	800287c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	22ff      	movs	r2, #255	; 0xff
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	b299      	uxth	r1, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	b2da      	uxtb	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fe1d 	bl	80034b4 <I2C_TransferConfig>
 800287a:	e011      	b.n	80028a0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	b299      	uxth	r1, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fe0a 	bl	80034b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b22      	cmp	r3, #34	; 0x22
 80028bc:	d108      	bne.n	80028d0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028cc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028ce:	e016      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028de:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028e0:	e00d      	b.n	80028fe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa01 	bl	8002d00 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80002000 	.word	0x80002000
 8002914:	80002400 	.word	0x80002400

08002918 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <I2C_Slave_ISR_DMA+0x24>
 8002938:	2302      	movs	r3, #2
 800293a:	e0c0      	b.n	8002abe <I2C_Slave_ISR_DMA+0x1a6>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fa98 	bl	8002e90 <I2C_ITSlaveCplt>
 8002960:	e0a8      	b.n	8002ab4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8095 	beq.w	8002a98 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 808f 	beq.w	8002a98 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800298a:	2b00      	cmp	r3, #0
 800298c:	d07d      	beq.n	8002a8a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d128      	bne.n	8002a2a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b28      	cmp	r3, #40	; 0x28
 80029e2:	d108      	bne.n	80029f6 <I2C_Slave_ISR_DMA+0xde>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ea:	d104      	bne.n	80029f6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fbb2 	bl	8003158 <I2C_ITListenCplt>
 80029f4:	e048      	b.n	8002a88 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b29      	cmp	r3, #41	; 0x29
 8002a00:	d10e      	bne.n	8002a20 <I2C_Slave_ISR_DMA+0x108>
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a08:	d00a      	beq.n	8002a20 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2210      	movs	r2, #16
 8002a10:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fd0b 	bl	800342e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f915 	bl	8002c48 <I2C_ITSlaveSeqCplt>
 8002a1e:	e033      	b.n	8002a88 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2210      	movs	r2, #16
 8002a26:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002a28:	e034      	b.n	8002a94 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <I2C_Slave_ISR_DMA+0x13c>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a52:	d11f      	bne.n	8002a94 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b21      	cmp	r3, #33	; 0x21
 8002a58:	d002      	beq.n	8002a60 <I2C_Slave_ISR_DMA+0x148>
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b29      	cmp	r3, #41	; 0x29
 8002a5e:	d103      	bne.n	8002a68 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2221      	movs	r2, #33	; 0x21
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e008      	b.n	8002a7a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b22      	cmp	r3, #34	; 0x22
 8002a6c:	d002      	beq.n	8002a74 <I2C_Slave_ISR_DMA+0x15c>
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	2b2a      	cmp	r3, #42	; 0x2a
 8002a72:	d102      	bne.n	8002a7a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2222      	movs	r2, #34	; 0x22
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fbbd 	bl	8003200 <I2C_ITError>
      if (treatdmanack == 1U)
 8002a86:	e005      	b.n	8002a94 <I2C_Slave_ISR_DMA+0x17c>
 8002a88:	e004      	b.n	8002a94 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2210      	movs	r2, #16
 8002a90:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a92:	e00f      	b.n	8002ab4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002a94:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a96:	e00d      	b.n	8002ab4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f809 	bl	8002ac6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002adc:	2b28      	cmp	r3, #40	; 0x28
 8002ade:	d16a      	bne.n	8002bb6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002afe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b1a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d138      	bne.n	8002b96 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	09db      	lsrs	r3, r3, #7
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	89bb      	ldrh	r3, [r7, #12]
 8002b2c:	4053      	eors	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f003 0306 	and.w	r3, r3, #6
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11c      	bne.n	8002b72 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d13b      	bne.n	8002bc6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b64:	89ba      	ldrh	r2, [r7, #12]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fa63 	bl	8002036 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b70:	e029      	b.n	8002bc6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fd50 	bl	8003620 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b88:	89ba      	ldrh	r2, [r7, #12]
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fa51 	bl	8002036 <HAL_I2C_AddrCallback>
}
 8002b94:	e017      	b.n	8002bc6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fd40 	bl	8003620 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ba8:	89ba      	ldrh	r2, [r7, #12]
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fa41 	bl	8002036 <HAL_I2C_AddrCallback>
}
 8002bb4:	e007      	b.n	8002bc6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b21      	cmp	r3, #33	; 0x21
 8002be8:	d115      	bne.n	8002c16 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2211      	movs	r2, #17
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fd0d 	bl	8003620 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff f9e9 	bl	8001fe6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c14:	e014      	b.n	8002c40 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2212      	movs	r2, #18
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fcf7 	bl	8003620 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff f9dd 	bl	8001ffa <HAL_I2C_MasterRxCpltCallback>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00c      	b.n	8002c96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d112      	bne.n	8002cc8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2228      	movs	r2, #40	; 0x28
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2221      	movs	r2, #33	; 0x21
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fcb4 	bl	8003620 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff f9a4 	bl	800200e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cc6:	e017      	b.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd2:	d111      	bne.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2228      	movs	r2, #40	; 0x28
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fc9b 	bl	8003620 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff f995 	bl	8002022 <HAL_I2C_SlaveRxCpltCallback>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b21      	cmp	r3, #33	; 0x21
 8002d20:	d107      	bne.n	8002d32 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d22:	2101      	movs	r1, #1
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fc7b 	bl	8003620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2211      	movs	r2, #17
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d30:	e00c      	b.n	8002d4c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b22      	cmp	r3, #34	; 0x22
 8002d3c:	d106      	bne.n	8002d4c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d3e:	2102      	movs	r1, #2
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fc6d 	bl	8003620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2212      	movs	r2, #18
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <I2C_ITMasterCplt+0x188>)
 8002d58:	400b      	ands	r3, r1
 8002d5a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a49      	ldr	r2, [pc, #292]	; (8002e8c <I2C_ITMasterCplt+0x18c>)
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b60      	cmp	r3, #96	; 0x60
 8002d90:	d10a      	bne.n	8002da8 <I2C_ITMasterCplt+0xa8>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002da6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fb40 	bl	800342e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b60      	cmp	r3, #96	; 0x60
 8002dbe:	d002      	beq.n	8002dc6 <I2C_ITMasterCplt+0xc6>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fa17 	bl	8003200 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dd2:	e054      	b.n	8002e7e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b21      	cmp	r3, #33	; 0x21
 8002dde:	d124      	bne.n	8002e2a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10b      	bne.n	8002e12 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff f92b 	bl	8002066 <HAL_I2C_MemTxCpltCallback>
}
 8002e10:	e035      	b.n	8002e7e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f8df 	bl	8001fe6 <HAL_I2C_MasterTxCpltCallback>
}
 8002e28:	e029      	b.n	8002e7e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b22      	cmp	r3, #34	; 0x22
 8002e34:	d123      	bne.n	8002e7e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d10b      	bne.n	8002e68 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff f90a 	bl	800207a <HAL_I2C_MemRxCpltCallback>
}
 8002e66:	e00a      	b.n	8002e7e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff f8be 	bl	8001ffa <HAL_I2C_MasterRxCpltCallback>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	fe00e800 	.word	0xfe00e800
 8002e8c:	ffff0000 	.word	0xffff0000

08002e90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	2b21      	cmp	r3, #33	; 0x21
 8002ec0:	d002      	beq.n	8002ec8 <I2C_ITSlaveCplt+0x38>
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	2b29      	cmp	r3, #41	; 0x29
 8002ec6:	d108      	bne.n	8002eda <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ec8:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fba7 	bl	8003620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2221      	movs	r2, #33	; 0x21
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed8:	e019      	b.n	8002f0e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eda:	7afb      	ldrb	r3, [r7, #11]
 8002edc:	2b22      	cmp	r3, #34	; 0x22
 8002ede:	d002      	beq.n	8002ee6 <I2C_ITSlaveCplt+0x56>
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee4:	d108      	bne.n	8002ef8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ee6:	f248 0102 	movw	r1, #32770	; 0x8002
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb98 	bl	8003620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2222      	movs	r2, #34	; 0x22
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef6:	e00a      	b.n	8002f0e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	2b28      	cmp	r3, #40	; 0x28
 8002efc:	d107      	bne.n	8002f0e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002efe:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fb8c 	bl	8003620 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b89      	ldr	r3, [pc, #548]	; (8003150 <I2C_ITSlaveCplt+0x2c0>)
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa7d 	bl	800342e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01f      	beq.n	8002f96 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f64:	e017      	b.n	8002f96 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d049      	beq.n	8003096 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003008:	2b00      	cmp	r3, #0
 800300a:	d044      	beq.n	8003096 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d128      	bne.n	8003068 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b28      	cmp	r3, #40	; 0x28
 8003020:	d108      	bne.n	8003034 <I2C_ITSlaveCplt+0x1a4>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003028:	d104      	bne.n	8003034 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800302a:	6979      	ldr	r1, [r7, #20]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f893 	bl	8003158 <I2C_ITListenCplt>
 8003032:	e030      	b.n	8003096 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b29      	cmp	r3, #41	; 0x29
 800303e:	d10e      	bne.n	800305e <I2C_ITSlaveCplt+0x1ce>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003046:	d00a      	beq.n	800305e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2210      	movs	r2, #16
 800304e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9ec 	bl	800342e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fdf6 	bl	8002c48 <I2C_ITSlaveSeqCplt>
 800305c:	e01b      	b.n	8003096 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	e016      	b.n	8003096 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2210      	movs	r2, #16
 800306e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <I2C_ITSlaveCplt+0x1fa>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003088:	d105      	bne.n	8003096 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4619      	mov	r1, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8b5 	bl	8003200 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8a4 	bl	8003200 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b28      	cmp	r3, #40	; 0x28
 80030c2:	d141      	bne.n	8003148 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f846 	bl	8003158 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030cc:	e03c      	b.n	8003148 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d6:	d014      	beq.n	8003102 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fdb5 	bl	8002c48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <I2C_ITSlaveCplt+0x2c4>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe ffa9 	bl	8002052 <HAL_I2C_ListenCpltCallback>
}
 8003100:	e022      	b.n	8003148 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b22      	cmp	r3, #34	; 0x22
 800310c:	d10e      	bne.n	800312c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fe ff7c 	bl	8002022 <HAL_I2C_SlaveRxCpltCallback>
}
 800312a:	e00d      	b.n	8003148 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe ff63 	bl	800200e <HAL_I2C_SlaveTxCpltCallback>
}
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	fe00e800 	.word	0xfe00e800
 8003154:	ffff0000 	.word	0xffff0000

08003158 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <I2C_ITListenCplt+0xa4>)
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d022      	beq.n	80031d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f043 0204 	orr.w	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fa21 	bl	8003620 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2210      	movs	r2, #16
 80031e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe ff2f 	bl	8002052 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <I2C_ITError+0x1d4>)
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b28      	cmp	r3, #40	; 0x28
 8003236:	d005      	beq.n	8003244 <I2C_ITError+0x44>
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b29      	cmp	r3, #41	; 0x29
 800323c:	d002      	beq.n	8003244 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b2a      	cmp	r3, #42	; 0x2a
 8003242:	d10b      	bne.n	800325c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003244:	2103      	movs	r1, #3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9ea 	bl	8003620 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2228      	movs	r2, #40	; 0x28
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <I2C_ITError+0x1d8>)
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
 800325a:	e030      	b.n	80032be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800325c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9dd 	bl	8003620 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8e1 	bl	800342e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d01f      	beq.n	80032b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	d114      	bne.n	80032b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d109      	bne.n	80032b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d039      	beq.n	8003340 <I2C_ITError+0x140>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b11      	cmp	r3, #17
 80032d0:	d002      	beq.n	80032d8 <I2C_ITError+0xd8>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b21      	cmp	r3, #33	; 0x21
 80032d6:	d133      	bne.n	8003340 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e6:	d107      	bne.n	80032f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fa25 	bl	800174c <HAL_DMA_GetState>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d017      	beq.n	8003338 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4a33      	ldr	r2, [pc, #204]	; (80033dc <I2C_ITError+0x1dc>)
 800330e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe f8ff 	bl	8001520 <HAL_DMA_Abort_IT>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04d      	beq.n	80033c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003332:	4610      	mov	r0, r2
 8003334:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003336:	e045      	b.n	80033c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f851 	bl	80033e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800333e:	e041      	b.n	80033c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d039      	beq.n	80033bc <I2C_ITError+0x1bc>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b12      	cmp	r3, #18
 800334c:	d002      	beq.n	8003354 <I2C_ITError+0x154>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b22      	cmp	r3, #34	; 0x22
 8003352:	d133      	bne.n	80033bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d107      	bne.n	8003374 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe f9e7 	bl	800174c <HAL_DMA_GetState>
 800337e:	4603      	mov	r3, r0
 8003380:	2b01      	cmp	r3, #1
 8003382:	d017      	beq.n	80033b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <I2C_ITError+0x1dc>)
 800338a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe f8c1 	bl	8001520 <HAL_DMA_Abort_IT>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ae:	4610      	mov	r0, r2
 80033b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033b2:	e009      	b.n	80033c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f813 	bl	80033e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ba:	e005      	b.n	80033c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f80f 	bl	80033e0 <I2C_TreatErrorCallback>
  }
}
 80033c2:	e002      	b.n	80033ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033c8:	bf00      	nop
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	ffff0000 	.word	0xffff0000
 80033d8:	08002305 	.word	0x08002305
 80033dc:	08003477 	.word	0x08003477

080033e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d10e      	bne.n	8003412 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fe49 	bl	80020a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003410:	e009      	b.n	8003426 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe fe34 	bl	800208e <HAL_I2C_ErrorCallback>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d103      	bne.n	800344c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d007      	beq.n	800346a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	619a      	str	r2, [r3, #24]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	2200      	movs	r2, #0
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	2200      	movs	r2, #0
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ff9b 	bl	80033e0 <I2C_TreatErrorCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	817b      	strh	r3, [r7, #10]
 80034c2:	4613      	mov	r3, r2
 80034c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	4313      	orrs	r3, r2
 80034de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	0d5b      	lsrs	r3, r3, #21
 80034ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <I2C_TransferConfig+0x60>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	43db      	mvns	r3, r3
 80034f8:	ea02 0103 	and.w	r1, r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	03ff63ff 	.word	0x03ff63ff

08003518 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <I2C_Enable_IRQ+0xfc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d032      	beq.n	8003598 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003536:	4a38      	ldr	r2, [pc, #224]	; (8003618 <I2C_Enable_IRQ+0x100>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d02d      	beq.n	8003598 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003540:	4a36      	ldr	r2, [pc, #216]	; (800361c <I2C_Enable_IRQ+0x104>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d028      	beq.n	8003598 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003546:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800354a:	2b00      	cmp	r3, #0
 800354c:	da03      	bge.n	8003556 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003554:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003566:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003578:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	2b10      	cmp	r3, #16
 800357e:	d103      	bne.n	8003588 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003586:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	2b20      	cmp	r3, #32
 800358c:	d133      	bne.n	80035f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f043 0320 	orr.w	r3, r3, #32
 8003594:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003596:	e02e      	b.n	80035f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800359c:	2b00      	cmp	r3, #0
 800359e:	da03      	bge.n	80035a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80035b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80035ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d103      	bne.n	80035da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80035d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d103      	bne.n	80035e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d103      	bne.n	80035f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	080024f7 	.word	0x080024f7
 8003618:	08002919 	.word	0x08002919
 800361c:	080026cd 	.word	0x080026cd

08003620 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00f      	beq.n	800365a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003640:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800364e:	2b28      	cmp	r3, #40	; 0x28
 8003650:	d003      	beq.n	800365a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003658:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00f      	beq.n	8003684 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800366a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003678:	2b28      	cmp	r3, #40	; 0x28
 800367a:	d003      	beq.n	8003684 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003682:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da03      	bge.n	8003694 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003692:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	2b10      	cmp	r3, #16
 8003698:	d103      	bne.n	80036a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d103      	bne.n	80036b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f043 0320 	orr.w	r3, r3, #32
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d103      	bne.n	80036be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d138      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e032      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800372e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	d139      	bne.n	80037fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003792:	2302      	movs	r3, #2
 8003794:	e033      	b.n	80037fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2224      	movs	r2, #36	; 0x24
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d141      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800381a:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d131      	bne.n	800388c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382e:	4a46      	ldr	r2, [pc, #280]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003840:	4a41      	ldr	r2, [pc, #260]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003848:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2232      	movs	r2, #50	; 0x32
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a3f      	ldr	r2, [pc, #252]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0c9b      	lsrs	r3, r3, #18
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800385e:	e002      	b.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b01      	subs	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003866:	4b38      	ldr	r3, [pc, #224]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d102      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f2      	bne.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d158      	bne.n	800393a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e057      	b.n	800393c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003892:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800389c:	e04d      	b.n	800393a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d141      	bne.n	800392a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038a6:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d131      	bne.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ba:	4a23      	ldr	r2, [pc, #140]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2232      	movs	r2, #50	; 0x32
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	0c9b      	lsrs	r3, r3, #18
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ea:	e002      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d102      	bne.n	8003906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f2      	bne.n	80038ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d112      	bne.n	800393a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e011      	b.n	800393c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003928:	e007      	b.n	800393a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40007000 	.word	0x40007000
 800394c:	20000000 	.word	0x20000000
 8003950:	431bde83 	.word	0x431bde83

08003954 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800395e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003962:	6093      	str	r3, [r2, #8]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40007000 	.word	0x40007000

08003974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e2fe      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003992:	4b97      	ldr	r3, [pc, #604]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800399c:	4b94      	ldr	r3, [pc, #592]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3e>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d002      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x108>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e2d9      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x74>
 80039da:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7e      	ldr	r2, [pc, #504]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b7c      	ldr	r3, [pc, #496]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7b      	ldr	r2, [pc, #492]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a77      	ldr	r2, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b75      	ldr	r3, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a74      	ldr	r2, [pc, #464]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fb92 	bl	8001154 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd fb8e 	bl	8001154 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e29e      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xc0>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fb7e 	bl	8001154 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fb7a 	bl	8001154 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e28a      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0xe8>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d075      	beq.n	8003b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a94:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_OscConfig+0x136>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x13c>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d11f      	bne.n	8003af0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x154>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e25d      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	4946      	ldr	r1, [pc, #280]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003adc:	4b45      	ldr	r3, [pc, #276]	; (8003bf4 <HAL_RCC_OscConfig+0x280>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd faeb 	bl	80010bc <HAL_InitTick>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d043      	beq.n	8003b74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e249      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d023      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fb26 	bl	8001154 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fd fb22 	bl	8001154 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e232      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	492d      	ldr	r1, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 8003b3e:	e01a      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb02 	bl	8001154 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fd fafe 	bl	8001154 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e20e      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1e0>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d041      	beq.n	8003c06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4a17      	ldr	r2, [pc, #92]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fadb 	bl	8001154 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fad7 	bl	8001154 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1e7      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ef      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x22e>
 8003bc2:	e020      	b.n	8003c06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fabe 	bl	8001154 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bda:	e00d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fd faba 	bl	8001154 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d906      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1ca      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf8:	4b8c      	ldr	r3, [pc, #560]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ea      	bne.n	8003bdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80a6 	beq.w	8003d60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c18:	4b84      	ldr	r3, [pc, #528]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2b4>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x2b6>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4a:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0x4bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x4bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	; (8003e30 <HAL_RCC_OscConfig+0x4bc>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fd fa77 	bl	8001154 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd fa73 	bl	8001154 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e183      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x4bc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d108      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x32e>
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca0:	e024      	b.n	8003cec <HAL_RCC_OscConfig+0x378>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d110      	bne.n	8003ccc <HAL_RCC_OscConfig+0x358>
 8003caa:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cba:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cca:	e00f      	b.n	8003cec <HAL_RCC_OscConfig+0x378>
 8003ccc:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d016      	beq.n	8003d22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa2e 	bl	8001154 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fa2a 	bl	8001154 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e138      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ed      	beq.n	8003cfc <HAL_RCC_OscConfig+0x388>
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fd fa17 	bl	8001154 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fa13 	bl	8001154 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e121      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d40:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ed      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d4e:	7ffb      	ldrb	r3, [r7, #31]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d74:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd f9e6 	bl	8001154 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8c:	f7fd f9e2 	bl	8001154 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0f2      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <HAL_RCC_OscConfig+0x418>
 8003dac:	e01b      	b.n	8003de6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd f9c9 	bl	8001154 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc6:	f7fd f9c5 	bl	8001154 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e0d5      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80c9 	beq.w	8003f82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	f000 8083 	beq.w	8003f04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d15e      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd f99f 	bl	8001154 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e18:	e00c      	b.n	8003e34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd f99b 	bl	8001154 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d905      	bls.n	8003e34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0ab      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e34:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ec      	bne.n	8003e1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e40:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_RCC_OscConfig+0x61c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6a11      	ldr	r1, [r2, #32]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e5a:	0212      	lsls	r2, r2, #8
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0552      	lsls	r2, r2, #21
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0652      	lsls	r2, r2, #25
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e7a:	06d2      	lsls	r2, r2, #27
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	4943      	ldr	r1, [pc, #268]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a40      	ldr	r2, [pc, #256]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e90:	4b3e      	ldr	r3, [pc, #248]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a3d      	ldr	r2, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd f95a 	bl	8001154 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd f956 	bl	8001154 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e066      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x530>
 8003ec2:	e05e      	b.n	8003f82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f940 	bl	8001154 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fd f93c 	bl	8001154 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e04c      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eea:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4924      	ldr	r1, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_RCC_OscConfig+0x620>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	60cb      	str	r3, [r1, #12]
 8003f02:	e03e      	b.n	8003f82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e039      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_OscConfig+0x618>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d12c      	bne.n	8003f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d123      	bne.n	8003f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d11b      	bne.n	8003f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d113      	bne.n	8003f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	019f800c 	.word	0x019f800c
 8003f94:	feeefffc 	.word	0xfeeefffc

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e11e      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d910      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020f 	bic.w	r2, r3, #15
 8003fc6:	498c      	ldr	r1, [pc, #560]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e106      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d073      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d129      	bne.n	8004048 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff4:	4b81      	ldr	r3, [pc, #516]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0f4      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004004:	f000 f99e 	bl	8004344 <RCC_GetSysClockFreqFromPLLSource>
 8004008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a7c      	ldr	r2, [pc, #496]	; (8004200 <HAL_RCC_ClockConfig+0x268>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d93f      	bls.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004012:	4b7a      	ldr	r3, [pc, #488]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d033      	beq.n	8004092 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12f      	bne.n	8004092 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403a:	4a70      	ldr	r2, [pc, #448]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e024      	b.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004050:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0c6      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0be      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004070:	f000 f8ce 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8004074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_RCC_ClockConfig+0x268>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d909      	bls.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800407e:	4b5f      	ldr	r3, [pc, #380]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4957      	ldr	r1, [pc, #348]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd f856 	bl	8001154 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fd f852 	bl	8001154 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e095      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ec:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a42      	ldr	r2, [pc, #264]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004104:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800410c:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800410e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4936      	ldr	r1, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
 8004126:	e008      	b.n	800413a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d105      	bne.n	800413a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800412e:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004138:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d21d      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 020f 	bic.w	r2, r3, #15
 8004150:	4929      	ldr	r1, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004158:	f7fc fffc 	bl	8001154 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fc fff8 	bl	8001154 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e03b      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d1ed      	bne.n	8004160 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490f      	ldr	r1, [pc, #60]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c2:	f000 f825 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490c      	ldr	r1, [pc, #48]	; (8004204 <HAL_RCC_ClockConfig+0x26c>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x270>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x274>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc ff68 	bl	80010bc <HAL_InitTick>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	04c4b400 	.word	0x04c4b400
 8004204:	080067d8 	.word	0x080067d8
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b04      	cmp	r3, #4
 8004220:	d102      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e047      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d102      	bne.n	800423a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e03e      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d136      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3301      	adds	r3, #1
 800425c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d10c      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004264:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	0a12      	lsrs	r2, r2, #8
 8004272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
      break;
 800427c:	e00c      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	0a12      	lsrs	r2, r2, #8
 800428c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
      break;
 8004296:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0e5b      	lsrs	r3, r3, #25
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e001      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042b8:	693b      	ldr	r3, [r7, #16]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	016e3600 	.word	0x016e3600

080042d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000

080042ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f0:	f7ff fff0 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	080067e8 	.word	0x080067e8

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800431c:	f7ff ffda 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0adb      	lsrs	r3, r3, #11
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4904      	ldr	r1, [pc, #16]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	080067e8 	.word	0x080067e8

08004344 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d10c      	bne.n	8004382 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004372:	68d2      	ldr	r2, [r2, #12]
 8004374:	0a12      	lsrs	r2, r2, #8
 8004376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	617b      	str	r3, [r7, #20]
    break;
 8004380:	e00c      	b.n	800439c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	0a12      	lsrs	r2, r2, #8
 8004390:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
    break;
 800439a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	0e5b      	lsrs	r3, r3, #25
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043b6:	687b      	ldr	r3, [r7, #4]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40021000 	.word	0x40021000
 80043c8:	016e3600 	.word	0x016e3600
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d8:	2300      	movs	r3, #0
 80043da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8098 	beq.w	800451e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10d      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6593      	str	r3, [r2, #88]	; 0x58
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a39      	ldr	r2, [pc, #228]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004426:	f7fc fe95 	bl	8001154 <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800442c:	e009      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442e:	f7fc fe91 	bl	8001154 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d902      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	74fb      	strb	r3, [r7, #19]
        break;
 8004440:	e005      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004442:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d159      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004454:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01e      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	d019      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449c:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fc fe51 	bl	8001154 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b4:	e00b      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fc fe4d 	bl	8001154 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d902      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	74fb      	strb	r3, [r7, #19]
            break;
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ec      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	74bb      	strb	r3, [r7, #18]
 80044fe:	e005      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450c:	7c7b      	ldrb	r3, [r7, #17]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4ba7      	ldr	r3, [pc, #668]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	4aa6      	ldr	r2, [pc, #664]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452a:	4ba1      	ldr	r3, [pc, #644]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0203 	bic.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	499d      	ldr	r1, [pc, #628]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454c:	4b98      	ldr	r3, [pc, #608]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 020c 	bic.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4995      	ldr	r1, [pc, #596]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800456e:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	498c      	ldr	r1, [pc, #560]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004590:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	4984      	ldr	r1, [pc, #528]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	497b      	ldr	r1, [pc, #492]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d4:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	4973      	ldr	r1, [pc, #460]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f6:	4b6e      	ldr	r3, [pc, #440]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	496a      	ldr	r1, [pc, #424]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004618:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4962      	ldr	r1, [pc, #392]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463a:	4b5d      	ldr	r3, [pc, #372]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	4959      	ldr	r1, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800465c:	4b54      	ldr	r3, [pc, #336]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	4951      	ldr	r1, [pc, #324]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800467e:	4b4c      	ldr	r3, [pc, #304]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4948      	ldr	r1, [pc, #288]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4940      	ldr	r1, [pc, #256]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d105      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	4932      	ldr	r1, [pc, #200]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004702:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4924      	ldr	r1, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	4916      	ldr	r1, [pc, #88]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004766:	d105      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004772:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479e:	d109      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047aa:	60d3      	str	r3, [r2, #12]
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	4926      	ldr	r1, [pc, #152]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004806:	4918      	ldr	r1, [pc, #96]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800485c:	7cbb      	ldrb	r3, [r7, #18]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000

0800486c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e042      	b.n	8004904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc fa47 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2224      	movs	r2, #36	; 0x24
 800489a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fc7a 	bl	80051b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f97b 	bl	8004bb8 <UART_SetConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e01b      	b.n	8004904 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fcf9 	bl	80052f4 <UART_CheckIdleState>
 8004902:	4603      	mov	r3, r0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	2b20      	cmp	r3, #32
 8004924:	d17b      	bne.n	8004a1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_UART_Transmit+0x26>
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e074      	b.n	8004a20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2221      	movs	r2, #33	; 0x21
 8004942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004946:	f7fc fc05 	bl	8001154 <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x6c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004980:	e030      	b.n	80049e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fd5b 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e03d      	b.n	8004a20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3302      	adds	r3, #2
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e007      	b.n	80049d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1c8      	bne.n	8004982 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2140      	movs	r1, #64	; 0x40
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fd24 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e006      	b.n	8004a20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	f040 80b5 	bne.w	8004bae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Receive+0x28>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0ad      	b.n	8004bb0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2222      	movs	r2, #34	; 0x22
 8004a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fb73 	bl	8001154 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d10e      	bne.n	8004aa8 <HAL_UART_Receive+0x80>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_UART_Receive+0x76>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a9c:	e02d      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	; 0xff
 8004aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004aa6:	e028      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_UART_Receive+0xa4>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Receive+0x9a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	22ff      	movs	r2, #255	; 0xff
 8004abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ac0:	e01b      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	227f      	movs	r2, #127	; 0x7f
 8004ac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004aca:	e016      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad4:	d10d      	bne.n	8004af2 <HAL_UART_Receive+0xca>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_UART_Receive+0xc0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	227f      	movs	r2, #127	; 0x7f
 8004ae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ae6:	e008      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	223f      	movs	r2, #63	; 0x3f
 8004aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004af0:	e003      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d108      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e003      	b.n	8004b26 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b26:	e036      	b.n	8004b96 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2120      	movs	r1, #32
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fc88 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e032      	b.n	8004bb0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	3302      	adds	r3, #2
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e00c      	b.n	8004b84 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	8a7b      	ldrh	r3, [r7, #18]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4013      	ands	r3, r2
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1c2      	bne.n	8004b28 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b08c      	sub	sp, #48	; 0x30
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4baa      	ldr	r3, [pc, #680]	; (8004e90 <UART_SetConfig+0x2d8>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a9f      	ldr	r2, [pc, #636]	; (8004e94 <UART_SetConfig+0x2dc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c20:	4313      	orrs	r3, r2
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f023 010f 	bic.w	r1, r3, #15
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a90      	ldr	r2, [pc, #576]	; (8004e98 <UART_SetConfig+0x2e0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d125      	bne.n	8004ca8 <UART_SetConfig+0xf0>
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d81a      	bhi.n	8004ca0 <UART_SetConfig+0xe8>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <UART_SetConfig+0xb8>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c91 	.word	0x08004c91
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c99 	.word	0x08004c99
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c86:	e116      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8e:	e112      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004c90:	2304      	movs	r3, #4
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c96:	e10e      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e10a      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e106      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a7c      	ldr	r2, [pc, #496]	; (8004ea0 <UART_SetConfig+0x2e8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d138      	bne.n	8004d24 <UART_SetConfig+0x16c>
 8004cb2:	4b7a      	ldr	r3, [pc, #488]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d82d      	bhi.n	8004d1c <UART_SetConfig+0x164>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x110>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	08004d1d 	.word	0x08004d1d
 8004cd4:	08004d1d 	.word	0x08004d1d
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004d1d 	.word	0x08004d1d
 8004ce0:	08004d1d 	.word	0x08004d1d
 8004ce4:	08004d1d 	.word	0x08004d1d
 8004ce8:	08004d05 	.word	0x08004d05
 8004cec:	08004d1d 	.word	0x08004d1d
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e0d8      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	e0d4      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d12:	e0d0      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e0cc      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e0c8      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5e      	ldr	r2, [pc, #376]	; (8004ea4 <UART_SetConfig+0x2ec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d125      	bne.n	8004d7a <UART_SetConfig+0x1c2>
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d38:	2b30      	cmp	r3, #48	; 0x30
 8004d3a:	d016      	beq.n	8004d6a <UART_SetConfig+0x1b2>
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d818      	bhi.n	8004d72 <UART_SetConfig+0x1ba>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d00a      	beq.n	8004d5a <UART_SetConfig+0x1a2>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d814      	bhi.n	8004d72 <UART_SetConfig+0x1ba>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <UART_SetConfig+0x19a>
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d008      	beq.n	8004d62 <UART_SetConfig+0x1aa>
 8004d50:	e00f      	b.n	8004d72 <UART_SetConfig+0x1ba>
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d58:	e0ad      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d60:	e0a9      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d62:	2304      	movs	r3, #4
 8004d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d68:	e0a5      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d70:	e0a1      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d72:	2310      	movs	r3, #16
 8004d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d78:	e09d      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4a      	ldr	r2, [pc, #296]	; (8004ea8 <UART_SetConfig+0x2f0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d125      	bne.n	8004dd0 <UART_SetConfig+0x218>
 8004d84:	4b45      	ldr	r3, [pc, #276]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d016      	beq.n	8004dc0 <UART_SetConfig+0x208>
 8004d92:	2bc0      	cmp	r3, #192	; 0xc0
 8004d94:	d818      	bhi.n	8004dc8 <UART_SetConfig+0x210>
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d00a      	beq.n	8004db0 <UART_SetConfig+0x1f8>
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d814      	bhi.n	8004dc8 <UART_SetConfig+0x210>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <UART_SetConfig+0x1f0>
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d008      	beq.n	8004db8 <UART_SetConfig+0x200>
 8004da6:	e00f      	b.n	8004dc8 <UART_SetConfig+0x210>
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e082      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004db0:	2302      	movs	r3, #2
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e07e      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004db8:	2304      	movs	r3, #4
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	e07a      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc6:	e076      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dce:	e072      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a35      	ldr	r2, [pc, #212]	; (8004eac <UART_SetConfig+0x2f4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d12a      	bne.n	8004e30 <UART_SetConfig+0x278>
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de8:	d01a      	beq.n	8004e20 <UART_SetConfig+0x268>
 8004dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dee:	d81b      	bhi.n	8004e28 <UART_SetConfig+0x270>
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d00c      	beq.n	8004e10 <UART_SetConfig+0x258>
 8004df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfa:	d815      	bhi.n	8004e28 <UART_SetConfig+0x270>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <UART_SetConfig+0x250>
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e04:	d008      	beq.n	8004e18 <UART_SetConfig+0x260>
 8004e06:	e00f      	b.n	8004e28 <UART_SetConfig+0x270>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e052      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e04e      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	e04a      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e046      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e042      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <UART_SetConfig+0x2dc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d13a      	bne.n	8004eb0 <UART_SetConfig+0x2f8>
 8004e3a:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <UART_SetConfig+0x2e4>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e48:	d01a      	beq.n	8004e80 <UART_SetConfig+0x2c8>
 8004e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0x2d0>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d00c      	beq.n	8004e70 <UART_SetConfig+0x2b8>
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5a:	d815      	bhi.n	8004e88 <UART_SetConfig+0x2d0>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x2b0>
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x2c0>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x2d0>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	e022      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e01e      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	e01a      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e86:	e016      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e012      	b.n	8004eb6 <UART_SetConfig+0x2fe>
 8004e90:	cfff69f3 	.word	0xcfff69f3
 8004e94:	40008000 	.word	0x40008000
 8004e98:	40013800 	.word	0x40013800
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40004400 	.word	0x40004400
 8004ea4:	40004800 	.word	0x40004800
 8004ea8:	40004c00 	.word	0x40004c00
 8004eac:	40005000 	.word	0x40005000
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4aae      	ldr	r2, [pc, #696]	; (8005174 <UART_SetConfig+0x5bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	f040 8097 	bne.w	8004ff0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d823      	bhi.n	8004f12 <UART_SetConfig+0x35a>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x318>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f03 	.word	0x08004f03
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f13 	.word	0x08004f13
 8004eec:	08004f13 	.word	0x08004f13
 8004ef0:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7ff f9fa 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8004ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b9e      	ldr	r3, [pc, #632]	; (8005178 <UART_SetConfig+0x5c0>)
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7ff f985 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8004f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8130 	beq.w	8005186 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	4a94      	ldr	r2, [pc, #592]	; (800517c <UART_SetConfig+0x5c4>)
 8004f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d305      	bcc.n	8004f56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d903      	bls.n	8004f5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f5c:	e113      	b.n	8005186 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	2200      	movs	r2, #0
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	60fa      	str	r2, [r7, #12]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	4a84      	ldr	r2, [pc, #528]	; (800517c <UART_SetConfig+0x5c4>)
 8004f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2200      	movs	r2, #0
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f80:	f7fb f99e 	bl	80002c0 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	020b      	lsls	r3, r1, #8
 8004f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f9a:	0202      	lsls	r2, r0, #8
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	6849      	ldr	r1, [r1, #4]
 8004fa0:	0849      	lsrs	r1, r1, #1
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	eb12 0804 	adds.w	r8, r2, r4
 8004fac:	eb43 0905 	adc.w	r9, r3, r5
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	469a      	mov	sl, r3
 8004fb8:	4693      	mov	fp, r2
 8004fba:	4652      	mov	r2, sl
 8004fbc:	465b      	mov	r3, fp
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	f7fb f97d 	bl	80002c0 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4613      	mov	r3, r2
 8004fcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd4:	d308      	bcc.n	8004fe8 <UART_SetConfig+0x430>
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fdc:	d204      	bcs.n	8004fe8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e0ce      	b.n	8005186 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fee:	e0ca      	b.n	8005186 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d166      	bne.n	80050c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d827      	bhi.n	8005052 <UART_SetConfig+0x49a>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x450>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005053 	.word	0x08005053
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
 8005020:	08005053 	.word	0x08005053
 8005024:	08005053 	.word	0x08005053
 8005028:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7ff f95e 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005032:	e014      	b.n	800505e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7ff f970 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800503a:	e010      	b.n	800505e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b4e      	ldr	r3, [pc, #312]	; (8005178 <UART_SetConfig+0x5c0>)
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005040:	e00d      	b.n	800505e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7ff f8e5 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005048:	e009      	b.n	800505e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005050:	e005      	b.n	800505e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800505c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8090 	beq.w	8005186 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	4a44      	ldr	r2, [pc, #272]	; (800517c <UART_SetConfig+0x5c4>)
 800506c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005070:	461a      	mov	r2, r3
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	fbb3 f3f2 	udiv	r3, r3, r2
 8005078:	005a      	lsls	r2, r3, #1
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	441a      	add	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	d916      	bls.n	80050c0 <UART_SetConfig+0x508>
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d212      	bcs.n	80050c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f023 030f 	bic.w	r3, r3, #15
 80050a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	8bfb      	ldrh	r3, [r7, #30]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	8bfa      	ldrh	r2, [r7, #30]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e062      	b.n	8005186 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050c6:	e05e      	b.n	8005186 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d828      	bhi.n	8005122 <UART_SetConfig+0x56a>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x520>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	08005123 	.word	0x08005123
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
 80050f8:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7ff f8f6 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005102:	e014      	b.n	800512e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7ff f908 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800510a:	e010      	b.n	800512e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <UART_SetConfig+0x5c0>)
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005110:	e00d      	b.n	800512e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7ff f87d 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800512c:	bf00      	nop
    }

    if (pclk != 0U)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d028      	beq.n	8005186 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	4a10      	ldr	r2, [pc, #64]	; (800517c <UART_SetConfig+0x5c4>)
 800513a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800513e:	461a      	mov	r2, r3
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	fbb3 f2f2 	udiv	r2, r3, r2
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	441a      	add	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	d910      	bls.n	8005180 <UART_SetConfig+0x5c8>
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d20c      	bcs.n	8005180 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	b29a      	uxth	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e009      	b.n	8005186 <UART_SetConfig+0x5ce>
 8005172:	bf00      	nop
 8005174:	40008000 	.word	0x40008000
 8005178:	00f42400 	.word	0x00f42400
 800517c:	080067f0 	.word	0x080067f0
      }
      else
      {
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2201      	movs	r2, #1
 800518a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2201      	movs	r2, #1
 8005192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80051a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	; 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080051b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ae:	d10a      	bne.n	80052c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b098      	sub	sp, #96	; 0x60
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005304:	f7fb ff26 	bl	8001154 <HAL_GetTick>
 8005308:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b08      	cmp	r3, #8
 8005316:	d12f      	bne.n	8005378 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f88e 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005346:	653b      	str	r3, [r7, #80]	; 0x50
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005350:	647b      	str	r3, [r7, #68]	; 0x44
 8005352:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e6      	bne.n	8005332 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e063      	b.n	8005440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d149      	bne.n	800541a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538e:	2200      	movs	r2, #0
 8005390:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f857 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03c      	beq.n	800541a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	623b      	str	r3, [r7, #32]
   return(result);
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
 80053c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e6      	bne.n	80053a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f2:	61fa      	str	r2, [r7, #28]
 80053f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e012      	b.n	8005440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3758      	adds	r7, #88	; 0x58
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	e04f      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d04b      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fb fe77 	bl	8001154 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <UART_WaitOnFlagUntilTimeout+0x30>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e04e      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d037      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d034      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b40      	cmp	r3, #64	; 0x40
 8005494:	d031      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d110      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2208      	movs	r2, #8
 80054aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f838 	bl	8005522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2208      	movs	r2, #8
 80054b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e029      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d4:	d111      	bne.n	80054fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f81e 	bl	8005522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e00f      	b.n	800551a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d0a0      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005522:	b480      	push	{r7}
 8005524:	b095      	sub	sp, #84	; 0x54
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	643b      	str	r3, [r7, #64]	; 0x40
 800554a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800554e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	61fb      	str	r3, [r7, #28]
   return(result);
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e3      	bne.n	800555c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d118      	bne.n	80055ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f023 0310 	bic.w	r3, r3, #16
 80055b0:	647b      	str	r3, [r7, #68]	; 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6979      	ldr	r1, [r7, #20]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	613b      	str	r3, [r7, #16]
   return(result);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80055e2:	bf00      	nop
 80055e4:	3754      	adds	r7, #84	; 0x54
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_UARTEx_DisableFifoMode+0x16>
 8005600:	2302      	movs	r3, #2
 8005602:	e027      	b.n	8005654 <HAL_UARTEx_DisableFifoMode+0x66>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005632:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e02d      	b.n	80056d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2224      	movs	r2, #36	; 0x24
 8005684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f84f 	bl	8005758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e02d      	b.n	8005750 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f811 	bl	8005758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005764:	2b00      	cmp	r3, #0
 8005766:	d108      	bne.n	800577a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005778:	e031      	b.n	80057de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800577a:	2308      	movs	r3, #8
 800577c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800577e:	2308      	movs	r3, #8
 8005780:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	0e5b      	lsrs	r3, r3, #25
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	0f5b      	lsrs	r3, r3, #29
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057a2:	7bbb      	ldrb	r3, [r7, #14]
 80057a4:	7b3a      	ldrb	r2, [r7, #12]
 80057a6:	4911      	ldr	r1, [pc, #68]	; (80057ec <UARTEx_SetNbDataToProcess+0x94>)
 80057a8:	5c8a      	ldrb	r2, [r1, r2]
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ae:	7b3a      	ldrb	r2, [r7, #12]
 80057b0:	490f      	ldr	r1, [pc, #60]	; (80057f0 <UARTEx_SetNbDataToProcess+0x98>)
 80057b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	7b7a      	ldrb	r2, [r7, #13]
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <UARTEx_SetNbDataToProcess+0x94>)
 80057c6:	5c8a      	ldrb	r2, [r1, r2]
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057cc:	7b7a      	ldrb	r2, [r7, #13]
 80057ce:	4908      	ldr	r1, [pc, #32]	; (80057f0 <UARTEx_SetNbDataToProcess+0x98>)
 80057d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	08006808 	.word	0x08006808
 80057f0:	08006810 	.word	0x08006810

080057f4 <rand>:
 80057f4:	4b16      	ldr	r3, [pc, #88]	; (8005850 <rand+0x5c>)
 80057f6:	b510      	push	{r4, lr}
 80057f8:	681c      	ldr	r4, [r3, #0]
 80057fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057fc:	b9b3      	cbnz	r3, 800582c <rand+0x38>
 80057fe:	2018      	movs	r0, #24
 8005800:	f000 fa22 	bl	8005c48 <malloc>
 8005804:	4602      	mov	r2, r0
 8005806:	6320      	str	r0, [r4, #48]	; 0x30
 8005808:	b920      	cbnz	r0, 8005814 <rand+0x20>
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <rand+0x60>)
 800580c:	4812      	ldr	r0, [pc, #72]	; (8005858 <rand+0x64>)
 800580e:	2152      	movs	r1, #82	; 0x52
 8005810:	f000 f9b0 	bl	8005b74 <__assert_func>
 8005814:	4911      	ldr	r1, [pc, #68]	; (800585c <rand+0x68>)
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <rand+0x6c>)
 8005818:	e9c0 1300 	strd	r1, r3, [r0]
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <rand+0x70>)
 800581e:	6083      	str	r3, [r0, #8]
 8005820:	230b      	movs	r3, #11
 8005822:	8183      	strh	r3, [r0, #12]
 8005824:	2100      	movs	r1, #0
 8005826:	2001      	movs	r0, #1
 8005828:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800582c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800582e:	480e      	ldr	r0, [pc, #56]	; (8005868 <rand+0x74>)
 8005830:	690b      	ldr	r3, [r1, #16]
 8005832:	694c      	ldr	r4, [r1, #20]
 8005834:	4a0d      	ldr	r2, [pc, #52]	; (800586c <rand+0x78>)
 8005836:	4358      	muls	r0, r3
 8005838:	fb02 0004 	mla	r0, r2, r4, r0
 800583c:	fba3 3202 	umull	r3, r2, r3, r2
 8005840:	3301      	adds	r3, #1
 8005842:	eb40 0002 	adc.w	r0, r0, r2
 8005846:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800584a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800584e:	bd10      	pop	{r4, pc}
 8005850:	20000064 	.word	0x20000064
 8005854:	08006818 	.word	0x08006818
 8005858:	0800682f 	.word	0x0800682f
 800585c:	abcd330e 	.word	0xabcd330e
 8005860:	e66d1234 	.word	0xe66d1234
 8005864:	0005deec 	.word	0x0005deec
 8005868:	5851f42d 	.word	0x5851f42d
 800586c:	4c957f2d 	.word	0x4c957f2d

08005870 <std>:
 8005870:	2300      	movs	r3, #0
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
 8005876:	e9c0 3300 	strd	r3, r3, [r0]
 800587a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800587e:	6083      	str	r3, [r0, #8]
 8005880:	8181      	strh	r1, [r0, #12]
 8005882:	6643      	str	r3, [r0, #100]	; 0x64
 8005884:	81c2      	strh	r2, [r0, #14]
 8005886:	6183      	str	r3, [r0, #24]
 8005888:	4619      	mov	r1, r3
 800588a:	2208      	movs	r2, #8
 800588c:	305c      	adds	r0, #92	; 0x5c
 800588e:	f000 f8f4 	bl	8005a7a <memset>
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <std+0x58>)
 8005894:	6263      	str	r3, [r4, #36]	; 0x24
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <std+0x5c>)
 8005898:	62a3      	str	r3, [r4, #40]	; 0x28
 800589a:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <std+0x60>)
 800589c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <std+0x64>)
 80058a0:	6323      	str	r3, [r4, #48]	; 0x30
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <std+0x68>)
 80058a4:	6224      	str	r4, [r4, #32]
 80058a6:	429c      	cmp	r4, r3
 80058a8:	d006      	beq.n	80058b8 <std+0x48>
 80058aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058ae:	4294      	cmp	r4, r2
 80058b0:	d002      	beq.n	80058b8 <std+0x48>
 80058b2:	33d0      	adds	r3, #208	; 0xd0
 80058b4:	429c      	cmp	r4, r3
 80058b6:	d105      	bne.n	80058c4 <std+0x54>
 80058b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f000 b954 	b.w	8005b6c <__retarget_lock_init_recursive>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	080059f5 	.word	0x080059f5
 80058cc:	08005a17 	.word	0x08005a17
 80058d0:	08005a4f 	.word	0x08005a4f
 80058d4:	08005a73 	.word	0x08005a73
 80058d8:	20000254 	.word	0x20000254

080058dc <stdio_exit_handler>:
 80058dc:	4a02      	ldr	r2, [pc, #8]	; (80058e8 <stdio_exit_handler+0xc>)
 80058de:	4903      	ldr	r1, [pc, #12]	; (80058ec <stdio_exit_handler+0x10>)
 80058e0:	4803      	ldr	r0, [pc, #12]	; (80058f0 <stdio_exit_handler+0x14>)
 80058e2:	f000 b869 	b.w	80059b8 <_fwalk_sglue>
 80058e6:	bf00      	nop
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	08005ebd 	.word	0x08005ebd
 80058f0:	20000018 	.word	0x20000018

080058f4 <cleanup_stdio>:
 80058f4:	6841      	ldr	r1, [r0, #4]
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <cleanup_stdio+0x34>)
 80058f8:	4299      	cmp	r1, r3
 80058fa:	b510      	push	{r4, lr}
 80058fc:	4604      	mov	r4, r0
 80058fe:	d001      	beq.n	8005904 <cleanup_stdio+0x10>
 8005900:	f000 fadc 	bl	8005ebc <_fflush_r>
 8005904:	68a1      	ldr	r1, [r4, #8]
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <cleanup_stdio+0x38>)
 8005908:	4299      	cmp	r1, r3
 800590a:	d002      	beq.n	8005912 <cleanup_stdio+0x1e>
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fad5 	bl	8005ebc <_fflush_r>
 8005912:	68e1      	ldr	r1, [r4, #12]
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <cleanup_stdio+0x3c>)
 8005916:	4299      	cmp	r1, r3
 8005918:	d004      	beq.n	8005924 <cleanup_stdio+0x30>
 800591a:	4620      	mov	r0, r4
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f000 bacc 	b.w	8005ebc <_fflush_r>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	bf00      	nop
 8005928:	20000254 	.word	0x20000254
 800592c:	200002bc 	.word	0x200002bc
 8005930:	20000324 	.word	0x20000324

08005934 <global_stdio_init.part.0>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <global_stdio_init.part.0+0x30>)
 8005938:	4c0b      	ldr	r4, [pc, #44]	; (8005968 <global_stdio_init.part.0+0x34>)
 800593a:	4a0c      	ldr	r2, [pc, #48]	; (800596c <global_stdio_init.part.0+0x38>)
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	4620      	mov	r0, r4
 8005940:	2200      	movs	r2, #0
 8005942:	2104      	movs	r1, #4
 8005944:	f7ff ff94 	bl	8005870 <std>
 8005948:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800594c:	2201      	movs	r2, #1
 800594e:	2109      	movs	r1, #9
 8005950:	f7ff ff8e 	bl	8005870 <std>
 8005954:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005958:	2202      	movs	r2, #2
 800595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595e:	2112      	movs	r1, #18
 8005960:	f7ff bf86 	b.w	8005870 <std>
 8005964:	2000038c 	.word	0x2000038c
 8005968:	20000254 	.word	0x20000254
 800596c:	080058dd 	.word	0x080058dd

08005970 <__sfp_lock_acquire>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__sfp_lock_acquire+0x8>)
 8005972:	f000 b8fc 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	20000395 	.word	0x20000395

0800597c <__sfp_lock_release>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__sfp_lock_release+0x8>)
 800597e:	f000 b8f7 	b.w	8005b70 <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	20000395 	.word	0x20000395

08005988 <__sinit>:
 8005988:	b510      	push	{r4, lr}
 800598a:	4604      	mov	r4, r0
 800598c:	f7ff fff0 	bl	8005970 <__sfp_lock_acquire>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	b11b      	cbz	r3, 800599c <__sinit+0x14>
 8005994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005998:	f7ff bff0 	b.w	800597c <__sfp_lock_release>
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <__sinit+0x28>)
 800599e:	6223      	str	r3, [r4, #32]
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <__sinit+0x2c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f5      	bne.n	8005994 <__sinit+0xc>
 80059a8:	f7ff ffc4 	bl	8005934 <global_stdio_init.part.0>
 80059ac:	e7f2      	b.n	8005994 <__sinit+0xc>
 80059ae:	bf00      	nop
 80059b0:	080058f5 	.word	0x080058f5
 80059b4:	2000038c 	.word	0x2000038c

080059b8 <_fwalk_sglue>:
 80059b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059bc:	4607      	mov	r7, r0
 80059be:	4688      	mov	r8, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	2600      	movs	r6, #0
 80059c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059c8:	f1b9 0901 	subs.w	r9, r9, #1
 80059cc:	d505      	bpl.n	80059da <_fwalk_sglue+0x22>
 80059ce:	6824      	ldr	r4, [r4, #0]
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	d1f7      	bne.n	80059c4 <_fwalk_sglue+0xc>
 80059d4:	4630      	mov	r0, r6
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d907      	bls.n	80059f0 <_fwalk_sglue+0x38>
 80059e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e4:	3301      	adds	r3, #1
 80059e6:	d003      	beq.n	80059f0 <_fwalk_sglue+0x38>
 80059e8:	4629      	mov	r1, r5
 80059ea:	4638      	mov	r0, r7
 80059ec:	47c0      	blx	r8
 80059ee:	4306      	orrs	r6, r0
 80059f0:	3568      	adds	r5, #104	; 0x68
 80059f2:	e7e9      	b.n	80059c8 <_fwalk_sglue+0x10>

080059f4 <__sread>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	460c      	mov	r4, r1
 80059f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fc:	f000 f868 	bl	8005ad0 <_read_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	bfab      	itete	ge
 8005a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a06:	89a3      	ldrhlt	r3, [r4, #12]
 8005a08:	181b      	addge	r3, r3, r0
 8005a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a0e:	bfac      	ite	ge
 8005a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a12:	81a3      	strhlt	r3, [r4, #12]
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <__swrite>:
 8005a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	898b      	ldrh	r3, [r1, #12]
 8005a1e:	05db      	lsls	r3, r3, #23
 8005a20:	4605      	mov	r5, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4616      	mov	r6, r2
 8005a26:	d505      	bpl.n	8005a34 <__swrite+0x1e>
 8005a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f000 f83c 	bl	8005aac <_lseek_r>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	4628      	mov	r0, r5
 8005a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4a:	f000 b853 	b.w	8005af4 <_write_r>

08005a4e <__sseek>:
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	460c      	mov	r4, r1
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 f829 	bl	8005aac <_lseek_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	bf15      	itete	ne
 8005a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6a:	81a3      	strheq	r3, [r4, #12]
 8005a6c:	bf18      	it	ne
 8005a6e:	81a3      	strhne	r3, [r4, #12]
 8005a70:	bd10      	pop	{r4, pc}

08005a72 <__sclose>:
 8005a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a76:	f000 b809 	b.w	8005a8c <_close_r>

08005a7a <memset>:
 8005a7a:	4402      	add	r2, r0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d100      	bne.n	8005a84 <memset+0xa>
 8005a82:	4770      	bx	lr
 8005a84:	f803 1b01 	strb.w	r1, [r3], #1
 8005a88:	e7f9      	b.n	8005a7e <memset+0x4>
	...

08005a8c <_close_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d06      	ldr	r5, [pc, #24]	; (8005aa8 <_close_r+0x1c>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fb fa51 	bl	8000f3e <_close>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_close_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_close_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000390 	.word	0x20000390

08005aac <_lseek_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	; (8005acc <_lseek_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fb fa66 	bl	8000f8c <_lseek>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_lseek_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_lseek_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000390 	.word	0x20000390

08005ad0 <_read_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d07      	ldr	r5, [pc, #28]	; (8005af0 <_read_r+0x20>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7fb f9f4 	bl	8000ecc <_read>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_read_r+0x1e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_read_r+0x1e>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	20000390 	.word	0x20000390

08005af4 <_write_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4d07      	ldr	r5, [pc, #28]	; (8005b14 <_write_r+0x20>)
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fb f9ff 	bl	8000f06 <_write>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_write_r+0x1e>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_write_r+0x1e>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000390 	.word	0x20000390

08005b18 <__errno>:
 8005b18:	4b01      	ldr	r3, [pc, #4]	; (8005b20 <__errno+0x8>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000064 	.word	0x20000064

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	; (8005b5c <__libc_init_array+0x38>)
 8005b28:	4c0d      	ldr	r4, [pc, #52]	; (8005b60 <__libc_init_array+0x3c>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	; (8005b64 <__libc_init_array+0x40>)
 8005b36:	4c0c      	ldr	r4, [pc, #48]	; (8005b68 <__libc_init_array+0x44>)
 8005b38:	f000 fe42 	bl	80067c0 <_init>
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	2600      	movs	r6, #0
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	08006900 	.word	0x08006900
 8005b60:	08006900 	.word	0x08006900
 8005b64:	08006900 	.word	0x08006900
 8005b68:	08006904 	.word	0x08006904

08005b6c <__retarget_lock_init_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_acquire_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <__retarget_lock_release_recursive>:
 8005b70:	4770      	bx	lr
	...

08005b74 <__assert_func>:
 8005b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b76:	4614      	mov	r4, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <__assert_func+0x2c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4605      	mov	r5, r0
 8005b80:	68d8      	ldr	r0, [r3, #12]
 8005b82:	b14c      	cbz	r4, 8005b98 <__assert_func+0x24>
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <__assert_func+0x30>)
 8005b86:	9100      	str	r1, [sp, #0]
 8005b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b8c:	4906      	ldr	r1, [pc, #24]	; (8005ba8 <__assert_func+0x34>)
 8005b8e:	462b      	mov	r3, r5
 8005b90:	f000 f9bc 	bl	8005f0c <fiprintf>
 8005b94:	f000 f9dc 	bl	8005f50 <abort>
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <__assert_func+0x38>)
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	e7f3      	b.n	8005b86 <__assert_func+0x12>
 8005b9e:	bf00      	nop
 8005ba0:	20000064 	.word	0x20000064
 8005ba4:	08006887 	.word	0x08006887
 8005ba8:	08006894 	.word	0x08006894
 8005bac:	080068c2 	.word	0x080068c2

08005bb0 <_free_r>:
 8005bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d044      	beq.n	8005c40 <_free_r+0x90>
 8005bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bba:	9001      	str	r0, [sp, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005bc2:	bfb8      	it	lt
 8005bc4:	18e4      	addlt	r4, r4, r3
 8005bc6:	f000 f8e7 	bl	8005d98 <__malloc_lock>
 8005bca:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <_free_r+0x94>)
 8005bcc:	9801      	ldr	r0, [sp, #4]
 8005bce:	6813      	ldr	r3, [r2, #0]
 8005bd0:	b933      	cbnz	r3, 8005be0 <_free_r+0x30>
 8005bd2:	6063      	str	r3, [r4, #4]
 8005bd4:	6014      	str	r4, [r2, #0]
 8005bd6:	b003      	add	sp, #12
 8005bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bdc:	f000 b8e2 	b.w	8005da4 <__malloc_unlock>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d908      	bls.n	8005bf6 <_free_r+0x46>
 8005be4:	6825      	ldr	r5, [r4, #0]
 8005be6:	1961      	adds	r1, r4, r5
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf01      	itttt	eq
 8005bec:	6819      	ldreq	r1, [r3, #0]
 8005bee:	685b      	ldreq	r3, [r3, #4]
 8005bf0:	1949      	addeq	r1, r1, r5
 8005bf2:	6021      	streq	r1, [r4, #0]
 8005bf4:	e7ed      	b.n	8005bd2 <_free_r+0x22>
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	b10b      	cbz	r3, 8005c00 <_free_r+0x50>
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	d9fa      	bls.n	8005bf6 <_free_r+0x46>
 8005c00:	6811      	ldr	r1, [r2, #0]
 8005c02:	1855      	adds	r5, r2, r1
 8005c04:	42a5      	cmp	r5, r4
 8005c06:	d10b      	bne.n	8005c20 <_free_r+0x70>
 8005c08:	6824      	ldr	r4, [r4, #0]
 8005c0a:	4421      	add	r1, r4
 8005c0c:	1854      	adds	r4, r2, r1
 8005c0e:	42a3      	cmp	r3, r4
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	d1e0      	bne.n	8005bd6 <_free_r+0x26>
 8005c14:	681c      	ldr	r4, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	6053      	str	r3, [r2, #4]
 8005c1a:	440c      	add	r4, r1
 8005c1c:	6014      	str	r4, [r2, #0]
 8005c1e:	e7da      	b.n	8005bd6 <_free_r+0x26>
 8005c20:	d902      	bls.n	8005c28 <_free_r+0x78>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6003      	str	r3, [r0, #0]
 8005c26:	e7d6      	b.n	8005bd6 <_free_r+0x26>
 8005c28:	6825      	ldr	r5, [r4, #0]
 8005c2a:	1961      	adds	r1, r4, r5
 8005c2c:	428b      	cmp	r3, r1
 8005c2e:	bf04      	itt	eq
 8005c30:	6819      	ldreq	r1, [r3, #0]
 8005c32:	685b      	ldreq	r3, [r3, #4]
 8005c34:	6063      	str	r3, [r4, #4]
 8005c36:	bf04      	itt	eq
 8005c38:	1949      	addeq	r1, r1, r5
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	6054      	str	r4, [r2, #4]
 8005c3e:	e7ca      	b.n	8005bd6 <_free_r+0x26>
 8005c40:	b003      	add	sp, #12
 8005c42:	bd30      	pop	{r4, r5, pc}
 8005c44:	20000398 	.word	0x20000398

08005c48 <malloc>:
 8005c48:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <malloc+0xc>)
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f000 b823 	b.w	8005c98 <_malloc_r>
 8005c52:	bf00      	nop
 8005c54:	20000064 	.word	0x20000064

08005c58 <sbrk_aligned>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	4e0e      	ldr	r6, [pc, #56]	; (8005c94 <sbrk_aligned+0x3c>)
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6831      	ldr	r1, [r6, #0]
 8005c60:	4605      	mov	r5, r0
 8005c62:	b911      	cbnz	r1, 8005c6a <sbrk_aligned+0x12>
 8005c64:	f000 f964 	bl	8005f30 <_sbrk_r>
 8005c68:	6030      	str	r0, [r6, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f95f 	bl	8005f30 <_sbrk_r>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d00a      	beq.n	8005c8c <sbrk_aligned+0x34>
 8005c76:	1cc4      	adds	r4, r0, #3
 8005c78:	f024 0403 	bic.w	r4, r4, #3
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	d007      	beq.n	8005c90 <sbrk_aligned+0x38>
 8005c80:	1a21      	subs	r1, r4, r0
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f954 	bl	8005f30 <_sbrk_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d101      	bne.n	8005c90 <sbrk_aligned+0x38>
 8005c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c90:	4620      	mov	r0, r4
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	2000039c 	.word	0x2000039c

08005c98 <_malloc_r>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	1ccd      	adds	r5, r1, #3
 8005c9e:	f025 0503 	bic.w	r5, r5, #3
 8005ca2:	3508      	adds	r5, #8
 8005ca4:	2d0c      	cmp	r5, #12
 8005ca6:	bf38      	it	cc
 8005ca8:	250c      	movcc	r5, #12
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	4607      	mov	r7, r0
 8005cae:	db01      	blt.n	8005cb4 <_malloc_r+0x1c>
 8005cb0:	42a9      	cmp	r1, r5
 8005cb2:	d905      	bls.n	8005cc0 <_malloc_r+0x28>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	2600      	movs	r6, #0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d94 <_malloc_r+0xfc>
 8005cc4:	f000 f868 	bl	8005d98 <__malloc_lock>
 8005cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb5c      	cbnz	r4, 8005d28 <_malloc_r+0x90>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc0 	bl	8005c58 <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d155      	bne.n	8005d8a <_malloc_r+0xf2>
 8005cde:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce2:	4626      	mov	r6, r4
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	d145      	bne.n	8005d74 <_malloc_r+0xdc>
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	d048      	beq.n	8005d7e <_malloc_r+0xe6>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	eb04 0903 	add.w	r9, r4, r3
 8005cf6:	f000 f91b 	bl	8005f30 <_sbrk_r>
 8005cfa:	4581      	cmp	r9, r0
 8005cfc:	d13f      	bne.n	8005d7e <_malloc_r+0xe6>
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	1a6d      	subs	r5, r5, r1
 8005d02:	4629      	mov	r1, r5
 8005d04:	4638      	mov	r0, r7
 8005d06:	f7ff ffa7 	bl	8005c58 <sbrk_aligned>
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d037      	beq.n	8005d7e <_malloc_r+0xe6>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	442b      	add	r3, r5
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d038      	beq.n	8005d8e <_malloc_r+0xf6>
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	42a2      	cmp	r2, r4
 8005d20:	d12b      	bne.n	8005d7a <_malloc_r+0xe2>
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e00f      	b.n	8005d48 <_malloc_r+0xb0>
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	1b52      	subs	r2, r2, r5
 8005d2c:	d41f      	bmi.n	8005d6e <_malloc_r+0xd6>
 8005d2e:	2a0b      	cmp	r2, #11
 8005d30:	d917      	bls.n	8005d62 <_malloc_r+0xca>
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	6025      	str	r5, [r4, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	6059      	strne	r1, [r3, #4]
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	bf08      	it	eq
 8005d40:	f8c8 1000 	streq.w	r1, [r8]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f104 060b 	add.w	r6, r4, #11
 8005d4e:	f000 f829 	bl	8005da4 <__malloc_unlock>
 8005d52:	f026 0607 	bic.w	r6, r6, #7
 8005d56:	1d23      	adds	r3, r4, #4
 8005d58:	1af2      	subs	r2, r6, r3
 8005d5a:	d0ae      	beq.n	8005cba <_malloc_r+0x22>
 8005d5c:	1b9b      	subs	r3, r3, r6
 8005d5e:	50a3      	str	r3, [r4, r2]
 8005d60:	e7ab      	b.n	8005cba <_malloc_r+0x22>
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	6862      	ldr	r2, [r4, #4]
 8005d66:	d1dd      	bne.n	8005d24 <_malloc_r+0x8c>
 8005d68:	f8c8 2000 	str.w	r2, [r8]
 8005d6c:	e7ec      	b.n	8005d48 <_malloc_r+0xb0>
 8005d6e:	4623      	mov	r3, r4
 8005d70:	6864      	ldr	r4, [r4, #4]
 8005d72:	e7ac      	b.n	8005cce <_malloc_r+0x36>
 8005d74:	4634      	mov	r4, r6
 8005d76:	6876      	ldr	r6, [r6, #4]
 8005d78:	e7b4      	b.n	8005ce4 <_malloc_r+0x4c>
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	e7cc      	b.n	8005d18 <_malloc_r+0x80>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4638      	mov	r0, r7
 8005d84:	f000 f80e 	bl	8005da4 <__malloc_unlock>
 8005d88:	e797      	b.n	8005cba <_malloc_r+0x22>
 8005d8a:	6025      	str	r5, [r4, #0]
 8005d8c:	e7dc      	b.n	8005d48 <_malloc_r+0xb0>
 8005d8e:	605b      	str	r3, [r3, #4]
 8005d90:	deff      	udf	#255	; 0xff
 8005d92:	bf00      	nop
 8005d94:	20000398 	.word	0x20000398

08005d98 <__malloc_lock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_lock+0x8>)
 8005d9a:	f7ff bee8 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000394 	.word	0x20000394

08005da4 <__malloc_unlock>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__malloc_unlock+0x8>)
 8005da6:	f7ff bee3 	b.w	8005b70 <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000394 	.word	0x20000394

08005db0 <__sflush_r>:
 8005db0:	898a      	ldrh	r2, [r1, #12]
 8005db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db6:	4605      	mov	r5, r0
 8005db8:	0710      	lsls	r0, r2, #28
 8005dba:	460c      	mov	r4, r1
 8005dbc:	d458      	bmi.n	8005e70 <__sflush_r+0xc0>
 8005dbe:	684b      	ldr	r3, [r1, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dc05      	bgt.n	8005dd0 <__sflush_r+0x20>
 8005dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dc02      	bgt.n	8005dd0 <__sflush_r+0x20>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0f9      	beq.n	8005dca <__sflush_r+0x1a>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ddc:	682f      	ldr	r7, [r5, #0]
 8005dde:	6a21      	ldr	r1, [r4, #32]
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	d032      	beq.n	8005e4a <__sflush_r+0x9a>
 8005de4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	075a      	lsls	r2, r3, #29
 8005dea:	d505      	bpl.n	8005df8 <__sflush_r+0x48>
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	1ac0      	subs	r0, r0, r3
 8005df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005df2:	b10b      	cbz	r3, 8005df8 <__sflush_r+0x48>
 8005df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dfe:	6a21      	ldr	r1, [r4, #32]
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b0      	blx	r6
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	d106      	bne.n	8005e18 <__sflush_r+0x68>
 8005e0a:	6829      	ldr	r1, [r5, #0]
 8005e0c:	291d      	cmp	r1, #29
 8005e0e:	d82b      	bhi.n	8005e68 <__sflush_r+0xb8>
 8005e10:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <__sflush_r+0x108>)
 8005e12:	410a      	asrs	r2, r1
 8005e14:	07d6      	lsls	r6, r2, #31
 8005e16:	d427      	bmi.n	8005e68 <__sflush_r+0xb8>
 8005e18:	2200      	movs	r2, #0
 8005e1a:	6062      	str	r2, [r4, #4]
 8005e1c:	04d9      	lsls	r1, r3, #19
 8005e1e:	6922      	ldr	r2, [r4, #16]
 8005e20:	6022      	str	r2, [r4, #0]
 8005e22:	d504      	bpl.n	8005e2e <__sflush_r+0x7e>
 8005e24:	1c42      	adds	r2, r0, #1
 8005e26:	d101      	bne.n	8005e2c <__sflush_r+0x7c>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b903      	cbnz	r3, 8005e2e <__sflush_r+0x7e>
 8005e2c:	6560      	str	r0, [r4, #84]	; 0x54
 8005e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e30:	602f      	str	r7, [r5, #0]
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d0c9      	beq.n	8005dca <__sflush_r+0x1a>
 8005e36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e3a:	4299      	cmp	r1, r3
 8005e3c:	d002      	beq.n	8005e44 <__sflush_r+0x94>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f7ff feb6 	bl	8005bb0 <_free_r>
 8005e44:	2000      	movs	r0, #0
 8005e46:	6360      	str	r0, [r4, #52]	; 0x34
 8005e48:	e7c0      	b.n	8005dcc <__sflush_r+0x1c>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b0      	blx	r6
 8005e50:	1c41      	adds	r1, r0, #1
 8005e52:	d1c8      	bne.n	8005de6 <__sflush_r+0x36>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0c5      	beq.n	8005de6 <__sflush_r+0x36>
 8005e5a:	2b1d      	cmp	r3, #29
 8005e5c:	d001      	beq.n	8005e62 <__sflush_r+0xb2>
 8005e5e:	2b16      	cmp	r3, #22
 8005e60:	d101      	bne.n	8005e66 <__sflush_r+0xb6>
 8005e62:	602f      	str	r7, [r5, #0]
 8005e64:	e7b1      	b.n	8005dca <__sflush_r+0x1a>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	e7ad      	b.n	8005dcc <__sflush_r+0x1c>
 8005e70:	690f      	ldr	r7, [r1, #16]
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	d0a9      	beq.n	8005dca <__sflush_r+0x1a>
 8005e76:	0793      	lsls	r3, r2, #30
 8005e78:	680e      	ldr	r6, [r1, #0]
 8005e7a:	bf08      	it	eq
 8005e7c:	694b      	ldreq	r3, [r1, #20]
 8005e7e:	600f      	str	r7, [r1, #0]
 8005e80:	bf18      	it	ne
 8005e82:	2300      	movne	r3, #0
 8005e84:	eba6 0807 	sub.w	r8, r6, r7
 8005e88:	608b      	str	r3, [r1, #8]
 8005e8a:	f1b8 0f00 	cmp.w	r8, #0
 8005e8e:	dd9c      	ble.n	8005dca <__sflush_r+0x1a>
 8005e90:	6a21      	ldr	r1, [r4, #32]
 8005e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e94:	4643      	mov	r3, r8
 8005e96:	463a      	mov	r2, r7
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b0      	blx	r6
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dc06      	bgt.n	8005eae <__sflush_r+0xfe>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e78e      	b.n	8005dcc <__sflush_r+0x1c>
 8005eae:	4407      	add	r7, r0
 8005eb0:	eba8 0800 	sub.w	r8, r8, r0
 8005eb4:	e7e9      	b.n	8005e8a <__sflush_r+0xda>
 8005eb6:	bf00      	nop
 8005eb8:	dfbffffe 	.word	0xdfbffffe

08005ebc <_fflush_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	690b      	ldr	r3, [r1, #16]
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	b913      	cbnz	r3, 8005ecc <_fflush_r+0x10>
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	4628      	mov	r0, r5
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	b118      	cbz	r0, 8005ed6 <_fflush_r+0x1a>
 8005ece:	6a03      	ldr	r3, [r0, #32]
 8005ed0:	b90b      	cbnz	r3, 8005ed6 <_fflush_r+0x1a>
 8005ed2:	f7ff fd59 	bl	8005988 <__sinit>
 8005ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f3      	beq.n	8005ec6 <_fflush_r+0xa>
 8005ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ee0:	07d0      	lsls	r0, r2, #31
 8005ee2:	d404      	bmi.n	8005eee <_fflush_r+0x32>
 8005ee4:	0599      	lsls	r1, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_fflush_r+0x32>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f7ff fe40 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8005eee:	4628      	mov	r0, r5
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	f7ff ff5d 	bl	8005db0 <__sflush_r>
 8005ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef8:	07da      	lsls	r2, r3, #31
 8005efa:	4605      	mov	r5, r0
 8005efc:	d4e4      	bmi.n	8005ec8 <_fflush_r+0xc>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	d4e1      	bmi.n	8005ec8 <_fflush_r+0xc>
 8005f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f06:	f7ff fe33 	bl	8005b70 <__retarget_lock_release_recursive>
 8005f0a:	e7dd      	b.n	8005ec8 <_fflush_r+0xc>

08005f0c <fiprintf>:
 8005f0c:	b40e      	push	{r1, r2, r3}
 8005f0e:	b503      	push	{r0, r1, lr}
 8005f10:	4601      	mov	r1, r0
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	4805      	ldr	r0, [pc, #20]	; (8005f2c <fiprintf+0x20>)
 8005f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	f000 f847 	bl	8005fb0 <_vfiprintf_r>
 8005f22:	b002      	add	sp, #8
 8005f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f28:	b003      	add	sp, #12
 8005f2a:	4770      	bx	lr
 8005f2c:	20000064 	.word	0x20000064

08005f30 <_sbrk_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_sbrk_r+0x1c>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb f834 	bl	8000fa8 <_sbrk>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_sbrk_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_sbrk_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000390 	.word	0x20000390

08005f50 <abort>:
 8005f50:	b508      	push	{r3, lr}
 8005f52:	2006      	movs	r0, #6
 8005f54:	f000 fb94 	bl	8006680 <raise>
 8005f58:	2001      	movs	r0, #1
 8005f5a:	f7fa ffad 	bl	8000eb8 <_exit>

08005f5e <__sfputc_r>:
 8005f5e:	6893      	ldr	r3, [r2, #8]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	b410      	push	{r4}
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	da08      	bge.n	8005f7c <__sfputc_r+0x1e>
 8005f6a:	6994      	ldr	r4, [r2, #24]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	db01      	blt.n	8005f74 <__sfputc_r+0x16>
 8005f70:	290a      	cmp	r1, #10
 8005f72:	d103      	bne.n	8005f7c <__sfputc_r+0x1e>
 8005f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f78:	f000 bac4 	b.w	8006504 <__swbuf_r>
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	1c58      	adds	r0, r3, #1
 8005f80:	6010      	str	r0, [r2, #0]
 8005f82:	7019      	strb	r1, [r3, #0]
 8005f84:	4608      	mov	r0, r1
 8005f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <__sfputs_r>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	4614      	mov	r4, r2
 8005f94:	18d5      	adds	r5, r2, r3
 8005f96:	42ac      	cmp	r4, r5
 8005f98:	d101      	bne.n	8005f9e <__sfputs_r+0x12>
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e007      	b.n	8005fae <__sfputs_r+0x22>
 8005f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa2:	463a      	mov	r2, r7
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff ffda 	bl	8005f5e <__sfputc_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d1f3      	bne.n	8005f96 <__sfputs_r+0xa>
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fb0 <_vfiprintf_r>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	b09d      	sub	sp, #116	; 0x74
 8005fb8:	4614      	mov	r4, r2
 8005fba:	4698      	mov	r8, r3
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	b118      	cbz	r0, 8005fc8 <_vfiprintf_r+0x18>
 8005fc0:	6a03      	ldr	r3, [r0, #32]
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <_vfiprintf_r+0x18>
 8005fc4:	f7ff fce0 	bl	8005988 <__sinit>
 8005fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fca:	07d9      	lsls	r1, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_vfiprintf_r+0x2a>
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	059a      	lsls	r2, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_vfiprintf_r+0x2a>
 8005fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fd6:	f7ff fdca 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	071b      	lsls	r3, r3, #28
 8005fde:	d501      	bpl.n	8005fe4 <_vfiprintf_r+0x34>
 8005fe0:	692b      	ldr	r3, [r5, #16]
 8005fe2:	b99b      	cbnz	r3, 800600c <_vfiprintf_r+0x5c>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 faca 	bl	8006580 <__swsetup_r>
 8005fec:	b170      	cbz	r0, 800600c <_vfiprintf_r+0x5c>
 8005fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ff0:	07dc      	lsls	r4, r3, #31
 8005ff2:	d504      	bpl.n	8005ffe <_vfiprintf_r+0x4e>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	b01d      	add	sp, #116	; 0x74
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	0598      	lsls	r0, r3, #22
 8006002:	d4f7      	bmi.n	8005ff4 <_vfiprintf_r+0x44>
 8006004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006006:	f7ff fdb3 	bl	8005b70 <__retarget_lock_release_recursive>
 800600a:	e7f3      	b.n	8005ff4 <_vfiprintf_r+0x44>
 800600c:	2300      	movs	r3, #0
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	2320      	movs	r3, #32
 8006012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006016:	f8cd 800c 	str.w	r8, [sp, #12]
 800601a:	2330      	movs	r3, #48	; 0x30
 800601c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061d0 <_vfiprintf_r+0x220>
 8006020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006024:	f04f 0901 	mov.w	r9, #1
 8006028:	4623      	mov	r3, r4
 800602a:	469a      	mov	sl, r3
 800602c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006030:	b10a      	cbz	r2, 8006036 <_vfiprintf_r+0x86>
 8006032:	2a25      	cmp	r2, #37	; 0x25
 8006034:	d1f9      	bne.n	800602a <_vfiprintf_r+0x7a>
 8006036:	ebba 0b04 	subs.w	fp, sl, r4
 800603a:	d00b      	beq.n	8006054 <_vfiprintf_r+0xa4>
 800603c:	465b      	mov	r3, fp
 800603e:	4622      	mov	r2, r4
 8006040:	4629      	mov	r1, r5
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ffa2 	bl	8005f8c <__sfputs_r>
 8006048:	3001      	adds	r0, #1
 800604a:	f000 80a9 	beq.w	80061a0 <_vfiprintf_r+0x1f0>
 800604e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006050:	445a      	add	r2, fp
 8006052:	9209      	str	r2, [sp, #36]	; 0x24
 8006054:	f89a 3000 	ldrb.w	r3, [sl]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 80a1 	beq.w	80061a0 <_vfiprintf_r+0x1f0>
 800605e:	2300      	movs	r3, #0
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006068:	f10a 0a01 	add.w	sl, sl, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	9307      	str	r3, [sp, #28]
 8006070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006074:	931a      	str	r3, [sp, #104]	; 0x68
 8006076:	4654      	mov	r4, sl
 8006078:	2205      	movs	r2, #5
 800607a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607e:	4854      	ldr	r0, [pc, #336]	; (80061d0 <_vfiprintf_r+0x220>)
 8006080:	f7fa f8ce 	bl	8000220 <memchr>
 8006084:	9a04      	ldr	r2, [sp, #16]
 8006086:	b9d8      	cbnz	r0, 80060c0 <_vfiprintf_r+0x110>
 8006088:	06d1      	lsls	r1, r2, #27
 800608a:	bf44      	itt	mi
 800608c:	2320      	movmi	r3, #32
 800608e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006092:	0713      	lsls	r3, r2, #28
 8006094:	bf44      	itt	mi
 8006096:	232b      	movmi	r3, #43	; 0x2b
 8006098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609c:	f89a 3000 	ldrb.w	r3, [sl]
 80060a0:	2b2a      	cmp	r3, #42	; 0x2a
 80060a2:	d015      	beq.n	80060d0 <_vfiprintf_r+0x120>
 80060a4:	9a07      	ldr	r2, [sp, #28]
 80060a6:	4654      	mov	r4, sl
 80060a8:	2000      	movs	r0, #0
 80060aa:	f04f 0c0a 	mov.w	ip, #10
 80060ae:	4621      	mov	r1, r4
 80060b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b4:	3b30      	subs	r3, #48	; 0x30
 80060b6:	2b09      	cmp	r3, #9
 80060b8:	d94d      	bls.n	8006156 <_vfiprintf_r+0x1a6>
 80060ba:	b1b0      	cbz	r0, 80060ea <_vfiprintf_r+0x13a>
 80060bc:	9207      	str	r2, [sp, #28]
 80060be:	e014      	b.n	80060ea <_vfiprintf_r+0x13a>
 80060c0:	eba0 0308 	sub.w	r3, r0, r8
 80060c4:	fa09 f303 	lsl.w	r3, r9, r3
 80060c8:	4313      	orrs	r3, r2
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	46a2      	mov	sl, r4
 80060ce:	e7d2      	b.n	8006076 <_vfiprintf_r+0xc6>
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	1d19      	adds	r1, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	9103      	str	r1, [sp, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bfbb      	ittet	lt
 80060dc:	425b      	neglt	r3, r3
 80060de:	f042 0202 	orrlt.w	r2, r2, #2
 80060e2:	9307      	strge	r3, [sp, #28]
 80060e4:	9307      	strlt	r3, [sp, #28]
 80060e6:	bfb8      	it	lt
 80060e8:	9204      	strlt	r2, [sp, #16]
 80060ea:	7823      	ldrb	r3, [r4, #0]
 80060ec:	2b2e      	cmp	r3, #46	; 0x2e
 80060ee:	d10c      	bne.n	800610a <_vfiprintf_r+0x15a>
 80060f0:	7863      	ldrb	r3, [r4, #1]
 80060f2:	2b2a      	cmp	r3, #42	; 0x2a
 80060f4:	d134      	bne.n	8006160 <_vfiprintf_r+0x1b0>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	1d1a      	adds	r2, r3, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	9203      	str	r2, [sp, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfb8      	it	lt
 8006102:	f04f 33ff 	movlt.w	r3, #4294967295
 8006106:	3402      	adds	r4, #2
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061e0 <_vfiprintf_r+0x230>
 800610e:	7821      	ldrb	r1, [r4, #0]
 8006110:	2203      	movs	r2, #3
 8006112:	4650      	mov	r0, sl
 8006114:	f7fa f884 	bl	8000220 <memchr>
 8006118:	b138      	cbz	r0, 800612a <_vfiprintf_r+0x17a>
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	eba0 000a 	sub.w	r0, r0, sl
 8006120:	2240      	movs	r2, #64	; 0x40
 8006122:	4082      	lsls	r2, r0
 8006124:	4313      	orrs	r3, r2
 8006126:	3401      	adds	r4, #1
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4829      	ldr	r0, [pc, #164]	; (80061d4 <_vfiprintf_r+0x224>)
 8006130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006134:	2206      	movs	r2, #6
 8006136:	f7fa f873 	bl	8000220 <memchr>
 800613a:	2800      	cmp	r0, #0
 800613c:	d03f      	beq.n	80061be <_vfiprintf_r+0x20e>
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <_vfiprintf_r+0x228>)
 8006140:	bb1b      	cbnz	r3, 800618a <_vfiprintf_r+0x1da>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	3307      	adds	r3, #7
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	3308      	adds	r3, #8
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	443b      	add	r3, r7
 8006152:	9309      	str	r3, [sp, #36]	; 0x24
 8006154:	e768      	b.n	8006028 <_vfiprintf_r+0x78>
 8006156:	fb0c 3202 	mla	r2, ip, r2, r3
 800615a:	460c      	mov	r4, r1
 800615c:	2001      	movs	r0, #1
 800615e:	e7a6      	b.n	80060ae <_vfiprintf_r+0xfe>
 8006160:	2300      	movs	r3, #0
 8006162:	3401      	adds	r4, #1
 8006164:	9305      	str	r3, [sp, #20]
 8006166:	4619      	mov	r1, r3
 8006168:	f04f 0c0a 	mov.w	ip, #10
 800616c:	4620      	mov	r0, r4
 800616e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006172:	3a30      	subs	r2, #48	; 0x30
 8006174:	2a09      	cmp	r2, #9
 8006176:	d903      	bls.n	8006180 <_vfiprintf_r+0x1d0>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0c6      	beq.n	800610a <_vfiprintf_r+0x15a>
 800617c:	9105      	str	r1, [sp, #20]
 800617e:	e7c4      	b.n	800610a <_vfiprintf_r+0x15a>
 8006180:	fb0c 2101 	mla	r1, ip, r1, r2
 8006184:	4604      	mov	r4, r0
 8006186:	2301      	movs	r3, #1
 8006188:	e7f0      	b.n	800616c <_vfiprintf_r+0x1bc>
 800618a:	ab03      	add	r3, sp, #12
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	462a      	mov	r2, r5
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <_vfiprintf_r+0x22c>)
 8006192:	a904      	add	r1, sp, #16
 8006194:	4630      	mov	r0, r6
 8006196:	f3af 8000 	nop.w
 800619a:	4607      	mov	r7, r0
 800619c:	1c78      	adds	r0, r7, #1
 800619e:	d1d6      	bne.n	800614e <_vfiprintf_r+0x19e>
 80061a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a2:	07d9      	lsls	r1, r3, #31
 80061a4:	d405      	bmi.n	80061b2 <_vfiprintf_r+0x202>
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	059a      	lsls	r2, r3, #22
 80061aa:	d402      	bmi.n	80061b2 <_vfiprintf_r+0x202>
 80061ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ae:	f7ff fcdf 	bl	8005b70 <__retarget_lock_release_recursive>
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	065b      	lsls	r3, r3, #25
 80061b6:	f53f af1d 	bmi.w	8005ff4 <_vfiprintf_r+0x44>
 80061ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061bc:	e71c      	b.n	8005ff8 <_vfiprintf_r+0x48>
 80061be:	ab03      	add	r3, sp, #12
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	462a      	mov	r2, r5
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <_vfiprintf_r+0x22c>)
 80061c6:	a904      	add	r1, sp, #16
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f879 	bl	80062c0 <_printf_i>
 80061ce:	e7e4      	b.n	800619a <_vfiprintf_r+0x1ea>
 80061d0:	080068c3 	.word	0x080068c3
 80061d4:	080068cd 	.word	0x080068cd
 80061d8:	00000000 	.word	0x00000000
 80061dc:	08005f8d 	.word	0x08005f8d
 80061e0:	080068c9 	.word	0x080068c9

080061e4 <_printf_common>:
 80061e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	4616      	mov	r6, r2
 80061ea:	4699      	mov	r9, r3
 80061ec:	688a      	ldr	r2, [r1, #8]
 80061ee:	690b      	ldr	r3, [r1, #16]
 80061f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	bfb8      	it	lt
 80061f8:	4613      	movlt	r3, r2
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006200:	4607      	mov	r7, r0
 8006202:	460c      	mov	r4, r1
 8006204:	b10a      	cbz	r2, 800620a <_printf_common+0x26>
 8006206:	3301      	adds	r3, #1
 8006208:	6033      	str	r3, [r6, #0]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	0699      	lsls	r1, r3, #26
 800620e:	bf42      	ittt	mi
 8006210:	6833      	ldrmi	r3, [r6, #0]
 8006212:	3302      	addmi	r3, #2
 8006214:	6033      	strmi	r3, [r6, #0]
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	f015 0506 	ands.w	r5, r5, #6
 800621c:	d106      	bne.n	800622c <_printf_common+0x48>
 800621e:	f104 0a19 	add.w	sl, r4, #25
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	6832      	ldr	r2, [r6, #0]
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	42ab      	cmp	r3, r5
 800622a:	dc26      	bgt.n	800627a <_printf_common+0x96>
 800622c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006230:	1e13      	subs	r3, r2, #0
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	bf18      	it	ne
 8006236:	2301      	movne	r3, #1
 8006238:	0692      	lsls	r2, r2, #26
 800623a:	d42b      	bmi.n	8006294 <_printf_common+0xb0>
 800623c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006240:	4649      	mov	r1, r9
 8006242:	4638      	mov	r0, r7
 8006244:	47c0      	blx	r8
 8006246:	3001      	adds	r0, #1
 8006248:	d01e      	beq.n	8006288 <_printf_common+0xa4>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6922      	ldr	r2, [r4, #16]
 800624e:	f003 0306 	and.w	r3, r3, #6
 8006252:	2b04      	cmp	r3, #4
 8006254:	bf02      	ittt	eq
 8006256:	68e5      	ldreq	r5, [r4, #12]
 8006258:	6833      	ldreq	r3, [r6, #0]
 800625a:	1aed      	subeq	r5, r5, r3
 800625c:	68a3      	ldr	r3, [r4, #8]
 800625e:	bf0c      	ite	eq
 8006260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006264:	2500      	movne	r5, #0
 8006266:	4293      	cmp	r3, r2
 8006268:	bfc4      	itt	gt
 800626a:	1a9b      	subgt	r3, r3, r2
 800626c:	18ed      	addgt	r5, r5, r3
 800626e:	2600      	movs	r6, #0
 8006270:	341a      	adds	r4, #26
 8006272:	42b5      	cmp	r5, r6
 8006274:	d11a      	bne.n	80062ac <_printf_common+0xc8>
 8006276:	2000      	movs	r0, #0
 8006278:	e008      	b.n	800628c <_printf_common+0xa8>
 800627a:	2301      	movs	r3, #1
 800627c:	4652      	mov	r2, sl
 800627e:	4649      	mov	r1, r9
 8006280:	4638      	mov	r0, r7
 8006282:	47c0      	blx	r8
 8006284:	3001      	adds	r0, #1
 8006286:	d103      	bne.n	8006290 <_printf_common+0xac>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006290:	3501      	adds	r5, #1
 8006292:	e7c6      	b.n	8006222 <_printf_common+0x3e>
 8006294:	18e1      	adds	r1, r4, r3
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	2030      	movs	r0, #48	; 0x30
 800629a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800629e:	4422      	add	r2, r4
 80062a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a8:	3302      	adds	r3, #2
 80062aa:	e7c7      	b.n	800623c <_printf_common+0x58>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4622      	mov	r2, r4
 80062b0:	4649      	mov	r1, r9
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c0      	blx	r8
 80062b6:	3001      	adds	r0, #1
 80062b8:	d0e6      	beq.n	8006288 <_printf_common+0xa4>
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7d9      	b.n	8006272 <_printf_common+0x8e>
	...

080062c0 <_printf_i>:
 80062c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	7e0f      	ldrb	r7, [r1, #24]
 80062c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062c8:	2f78      	cmp	r7, #120	; 0x78
 80062ca:	4691      	mov	r9, r2
 80062cc:	4680      	mov	r8, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	469a      	mov	sl, r3
 80062d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062d6:	d807      	bhi.n	80062e8 <_printf_i+0x28>
 80062d8:	2f62      	cmp	r7, #98	; 0x62
 80062da:	d80a      	bhi.n	80062f2 <_printf_i+0x32>
 80062dc:	2f00      	cmp	r7, #0
 80062de:	f000 80d4 	beq.w	800648a <_printf_i+0x1ca>
 80062e2:	2f58      	cmp	r7, #88	; 0x58
 80062e4:	f000 80c0 	beq.w	8006468 <_printf_i+0x1a8>
 80062e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f0:	e03a      	b.n	8006368 <_printf_i+0xa8>
 80062f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062f6:	2b15      	cmp	r3, #21
 80062f8:	d8f6      	bhi.n	80062e8 <_printf_i+0x28>
 80062fa:	a101      	add	r1, pc, #4	; (adr r1, 8006300 <_printf_i+0x40>)
 80062fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006300:	08006359 	.word	0x08006359
 8006304:	0800636d 	.word	0x0800636d
 8006308:	080062e9 	.word	0x080062e9
 800630c:	080062e9 	.word	0x080062e9
 8006310:	080062e9 	.word	0x080062e9
 8006314:	080062e9 	.word	0x080062e9
 8006318:	0800636d 	.word	0x0800636d
 800631c:	080062e9 	.word	0x080062e9
 8006320:	080062e9 	.word	0x080062e9
 8006324:	080062e9 	.word	0x080062e9
 8006328:	080062e9 	.word	0x080062e9
 800632c:	08006471 	.word	0x08006471
 8006330:	08006399 	.word	0x08006399
 8006334:	0800642b 	.word	0x0800642b
 8006338:	080062e9 	.word	0x080062e9
 800633c:	080062e9 	.word	0x080062e9
 8006340:	08006493 	.word	0x08006493
 8006344:	080062e9 	.word	0x080062e9
 8006348:	08006399 	.word	0x08006399
 800634c:	080062e9 	.word	0x080062e9
 8006350:	080062e9 	.word	0x080062e9
 8006354:	08006433 	.word	0x08006433
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	602a      	str	r2, [r5, #0]
 8006360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006368:	2301      	movs	r3, #1
 800636a:	e09f      	b.n	80064ac <_printf_i+0x1ec>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	0607      	lsls	r7, r0, #24
 8006372:	f103 0104 	add.w	r1, r3, #4
 8006376:	6029      	str	r1, [r5, #0]
 8006378:	d501      	bpl.n	800637e <_printf_i+0xbe>
 800637a:	681e      	ldr	r6, [r3, #0]
 800637c:	e003      	b.n	8006386 <_printf_i+0xc6>
 800637e:	0646      	lsls	r6, r0, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0xba>
 8006382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006386:	2e00      	cmp	r6, #0
 8006388:	da03      	bge.n	8006392 <_printf_i+0xd2>
 800638a:	232d      	movs	r3, #45	; 0x2d
 800638c:	4276      	negs	r6, r6
 800638e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006392:	485a      	ldr	r0, [pc, #360]	; (80064fc <_printf_i+0x23c>)
 8006394:	230a      	movs	r3, #10
 8006396:	e012      	b.n	80063be <_printf_i+0xfe>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	6820      	ldr	r0, [r4, #0]
 800639c:	1d19      	adds	r1, r3, #4
 800639e:	6029      	str	r1, [r5, #0]
 80063a0:	0605      	lsls	r5, r0, #24
 80063a2:	d501      	bpl.n	80063a8 <_printf_i+0xe8>
 80063a4:	681e      	ldr	r6, [r3, #0]
 80063a6:	e002      	b.n	80063ae <_printf_i+0xee>
 80063a8:	0641      	lsls	r1, r0, #25
 80063aa:	d5fb      	bpl.n	80063a4 <_printf_i+0xe4>
 80063ac:	881e      	ldrh	r6, [r3, #0]
 80063ae:	4853      	ldr	r0, [pc, #332]	; (80064fc <_printf_i+0x23c>)
 80063b0:	2f6f      	cmp	r7, #111	; 0x6f
 80063b2:	bf0c      	ite	eq
 80063b4:	2308      	moveq	r3, #8
 80063b6:	230a      	movne	r3, #10
 80063b8:	2100      	movs	r1, #0
 80063ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063be:	6865      	ldr	r5, [r4, #4]
 80063c0:	60a5      	str	r5, [r4, #8]
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	bfa2      	ittt	ge
 80063c6:	6821      	ldrge	r1, [r4, #0]
 80063c8:	f021 0104 	bicge.w	r1, r1, #4
 80063cc:	6021      	strge	r1, [r4, #0]
 80063ce:	b90e      	cbnz	r6, 80063d4 <_printf_i+0x114>
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	d04b      	beq.n	800646c <_printf_i+0x1ac>
 80063d4:	4615      	mov	r5, r2
 80063d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063da:	fb03 6711 	mls	r7, r3, r1, r6
 80063de:	5dc7      	ldrb	r7, [r0, r7]
 80063e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063e4:	4637      	mov	r7, r6
 80063e6:	42bb      	cmp	r3, r7
 80063e8:	460e      	mov	r6, r1
 80063ea:	d9f4      	bls.n	80063d6 <_printf_i+0x116>
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d10b      	bne.n	8006408 <_printf_i+0x148>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	07de      	lsls	r6, r3, #31
 80063f4:	d508      	bpl.n	8006408 <_printf_i+0x148>
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	6861      	ldr	r1, [r4, #4]
 80063fa:	4299      	cmp	r1, r3
 80063fc:	bfde      	ittt	le
 80063fe:	2330      	movle	r3, #48	; 0x30
 8006400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006408:	1b52      	subs	r2, r2, r5
 800640a:	6122      	str	r2, [r4, #16]
 800640c:	f8cd a000 	str.w	sl, [sp]
 8006410:	464b      	mov	r3, r9
 8006412:	aa03      	add	r2, sp, #12
 8006414:	4621      	mov	r1, r4
 8006416:	4640      	mov	r0, r8
 8006418:	f7ff fee4 	bl	80061e4 <_printf_common>
 800641c:	3001      	adds	r0, #1
 800641e:	d14a      	bne.n	80064b6 <_printf_i+0x1f6>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	b004      	add	sp, #16
 8006426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	f043 0320 	orr.w	r3, r3, #32
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	4833      	ldr	r0, [pc, #204]	; (8006500 <_printf_i+0x240>)
 8006434:	2778      	movs	r7, #120	; 0x78
 8006436:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	6829      	ldr	r1, [r5, #0]
 800643e:	061f      	lsls	r7, r3, #24
 8006440:	f851 6b04 	ldr.w	r6, [r1], #4
 8006444:	d402      	bmi.n	800644c <_printf_i+0x18c>
 8006446:	065f      	lsls	r7, r3, #25
 8006448:	bf48      	it	mi
 800644a:	b2b6      	uxthmi	r6, r6
 800644c:	07df      	lsls	r7, r3, #31
 800644e:	bf48      	it	mi
 8006450:	f043 0320 	orrmi.w	r3, r3, #32
 8006454:	6029      	str	r1, [r5, #0]
 8006456:	bf48      	it	mi
 8006458:	6023      	strmi	r3, [r4, #0]
 800645a:	b91e      	cbnz	r6, 8006464 <_printf_i+0x1a4>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	f023 0320 	bic.w	r3, r3, #32
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	2310      	movs	r3, #16
 8006466:	e7a7      	b.n	80063b8 <_printf_i+0xf8>
 8006468:	4824      	ldr	r0, [pc, #144]	; (80064fc <_printf_i+0x23c>)
 800646a:	e7e4      	b.n	8006436 <_printf_i+0x176>
 800646c:	4615      	mov	r5, r2
 800646e:	e7bd      	b.n	80063ec <_printf_i+0x12c>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	6826      	ldr	r6, [r4, #0]
 8006474:	6961      	ldr	r1, [r4, #20]
 8006476:	1d18      	adds	r0, r3, #4
 8006478:	6028      	str	r0, [r5, #0]
 800647a:	0635      	lsls	r5, r6, #24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	d501      	bpl.n	8006484 <_printf_i+0x1c4>
 8006480:	6019      	str	r1, [r3, #0]
 8006482:	e002      	b.n	800648a <_printf_i+0x1ca>
 8006484:	0670      	lsls	r0, r6, #25
 8006486:	d5fb      	bpl.n	8006480 <_printf_i+0x1c0>
 8006488:	8019      	strh	r1, [r3, #0]
 800648a:	2300      	movs	r3, #0
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	4615      	mov	r5, r2
 8006490:	e7bc      	b.n	800640c <_printf_i+0x14c>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	2100      	movs	r1, #0
 800649e:	4628      	mov	r0, r5
 80064a0:	f7f9 febe 	bl	8000220 <memchr>
 80064a4:	b108      	cbz	r0, 80064aa <_printf_i+0x1ea>
 80064a6:	1b40      	subs	r0, r0, r5
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	2300      	movs	r3, #0
 80064b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b4:	e7aa      	b.n	800640c <_printf_i+0x14c>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	462a      	mov	r2, r5
 80064ba:	4649      	mov	r1, r9
 80064bc:	4640      	mov	r0, r8
 80064be:	47d0      	blx	sl
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0ad      	beq.n	8006420 <_printf_i+0x160>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	d413      	bmi.n	80064f2 <_printf_i+0x232>
 80064ca:	68e0      	ldr	r0, [r4, #12]
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	4298      	cmp	r0, r3
 80064d0:	bfb8      	it	lt
 80064d2:	4618      	movlt	r0, r3
 80064d4:	e7a6      	b.n	8006424 <_printf_i+0x164>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4632      	mov	r2, r6
 80064da:	4649      	mov	r1, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	47d0      	blx	sl
 80064e0:	3001      	adds	r0, #1
 80064e2:	d09d      	beq.n	8006420 <_printf_i+0x160>
 80064e4:	3501      	adds	r5, #1
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	9903      	ldr	r1, [sp, #12]
 80064ea:	1a5b      	subs	r3, r3, r1
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dcf2      	bgt.n	80064d6 <_printf_i+0x216>
 80064f0:	e7eb      	b.n	80064ca <_printf_i+0x20a>
 80064f2:	2500      	movs	r5, #0
 80064f4:	f104 0619 	add.w	r6, r4, #25
 80064f8:	e7f5      	b.n	80064e6 <_printf_i+0x226>
 80064fa:	bf00      	nop
 80064fc:	080068d4 	.word	0x080068d4
 8006500:	080068e5 	.word	0x080068e5

08006504 <__swbuf_r>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	4614      	mov	r4, r2
 800650a:	4605      	mov	r5, r0
 800650c:	b118      	cbz	r0, 8006516 <__swbuf_r+0x12>
 800650e:	6a03      	ldr	r3, [r0, #32]
 8006510:	b90b      	cbnz	r3, 8006516 <__swbuf_r+0x12>
 8006512:	f7ff fa39 	bl	8005988 <__sinit>
 8006516:	69a3      	ldr	r3, [r4, #24]
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	071a      	lsls	r2, r3, #28
 800651e:	d525      	bpl.n	800656c <__swbuf_r+0x68>
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	b31b      	cbz	r3, 800656c <__swbuf_r+0x68>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	1a98      	subs	r0, r3, r2
 800652a:	6963      	ldr	r3, [r4, #20]
 800652c:	b2f6      	uxtb	r6, r6
 800652e:	4283      	cmp	r3, r0
 8006530:	4637      	mov	r7, r6
 8006532:	dc04      	bgt.n	800653e <__swbuf_r+0x3a>
 8006534:	4621      	mov	r1, r4
 8006536:	4628      	mov	r0, r5
 8006538:	f7ff fcc0 	bl	8005ebc <_fflush_r>
 800653c:	b9e0      	cbnz	r0, 8006578 <__swbuf_r+0x74>
 800653e:	68a3      	ldr	r3, [r4, #8]
 8006540:	3b01      	subs	r3, #1
 8006542:	60a3      	str	r3, [r4, #8]
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	6022      	str	r2, [r4, #0]
 800654a:	701e      	strb	r6, [r3, #0]
 800654c:	6962      	ldr	r2, [r4, #20]
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	429a      	cmp	r2, r3
 8006552:	d004      	beq.n	800655e <__swbuf_r+0x5a>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	07db      	lsls	r3, r3, #31
 8006558:	d506      	bpl.n	8006568 <__swbuf_r+0x64>
 800655a:	2e0a      	cmp	r6, #10
 800655c:	d104      	bne.n	8006568 <__swbuf_r+0x64>
 800655e:	4621      	mov	r1, r4
 8006560:	4628      	mov	r0, r5
 8006562:	f7ff fcab 	bl	8005ebc <_fflush_r>
 8006566:	b938      	cbnz	r0, 8006578 <__swbuf_r+0x74>
 8006568:	4638      	mov	r0, r7
 800656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f806 	bl	8006580 <__swsetup_r>
 8006574:	2800      	cmp	r0, #0
 8006576:	d0d5      	beq.n	8006524 <__swbuf_r+0x20>
 8006578:	f04f 37ff 	mov.w	r7, #4294967295
 800657c:	e7f4      	b.n	8006568 <__swbuf_r+0x64>
	...

08006580 <__swsetup_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4b2a      	ldr	r3, [pc, #168]	; (800662c <__swsetup_r+0xac>)
 8006584:	4605      	mov	r5, r0
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	460c      	mov	r4, r1
 800658a:	b118      	cbz	r0, 8006594 <__swsetup_r+0x14>
 800658c:	6a03      	ldr	r3, [r0, #32]
 800658e:	b90b      	cbnz	r3, 8006594 <__swsetup_r+0x14>
 8006590:	f7ff f9fa 	bl	8005988 <__sinit>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800659a:	0718      	lsls	r0, r3, #28
 800659c:	d422      	bmi.n	80065e4 <__swsetup_r+0x64>
 800659e:	06d9      	lsls	r1, r3, #27
 80065a0:	d407      	bmi.n	80065b2 <__swsetup_r+0x32>
 80065a2:	2309      	movs	r3, #9
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e034      	b.n	800661c <__swsetup_r+0x9c>
 80065b2:	0758      	lsls	r0, r3, #29
 80065b4:	d512      	bpl.n	80065dc <__swsetup_r+0x5c>
 80065b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b8:	b141      	cbz	r1, 80065cc <__swsetup_r+0x4c>
 80065ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065be:	4299      	cmp	r1, r3
 80065c0:	d002      	beq.n	80065c8 <__swsetup_r+0x48>
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff faf4 	bl	8005bb0 <_free_r>
 80065c8:	2300      	movs	r3, #0
 80065ca:	6363      	str	r3, [r4, #52]	; 0x34
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	2300      	movs	r3, #0
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f043 0308 	orr.w	r3, r3, #8
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	b94b      	cbnz	r3, 80065fc <__swsetup_r+0x7c>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f2:	d003      	beq.n	80065fc <__swsetup_r+0x7c>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f884 	bl	8006704 <__smakebuf_r>
 80065fc:	89a0      	ldrh	r0, [r4, #12]
 80065fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006602:	f010 0301 	ands.w	r3, r0, #1
 8006606:	d00a      	beq.n	800661e <__swsetup_r+0x9e>
 8006608:	2300      	movs	r3, #0
 800660a:	60a3      	str	r3, [r4, #8]
 800660c:	6963      	ldr	r3, [r4, #20]
 800660e:	425b      	negs	r3, r3
 8006610:	61a3      	str	r3, [r4, #24]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	b943      	cbnz	r3, 8006628 <__swsetup_r+0xa8>
 8006616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800661a:	d1c4      	bne.n	80065a6 <__swsetup_r+0x26>
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	0781      	lsls	r1, r0, #30
 8006620:	bf58      	it	pl
 8006622:	6963      	ldrpl	r3, [r4, #20]
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	e7f4      	b.n	8006612 <__swsetup_r+0x92>
 8006628:	2000      	movs	r0, #0
 800662a:	e7f7      	b.n	800661c <__swsetup_r+0x9c>
 800662c:	20000064 	.word	0x20000064

08006630 <_raise_r>:
 8006630:	291f      	cmp	r1, #31
 8006632:	b538      	push	{r3, r4, r5, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	460d      	mov	r5, r1
 8006638:	d904      	bls.n	8006644 <_raise_r+0x14>
 800663a:	2316      	movs	r3, #22
 800663c:	6003      	str	r3, [r0, #0]
 800663e:	f04f 30ff 	mov.w	r0, #4294967295
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006646:	b112      	cbz	r2, 800664e <_raise_r+0x1e>
 8006648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800664c:	b94b      	cbnz	r3, 8006662 <_raise_r+0x32>
 800664e:	4620      	mov	r0, r4
 8006650:	f000 f830 	bl	80066b4 <_getpid_r>
 8006654:	462a      	mov	r2, r5
 8006656:	4601      	mov	r1, r0
 8006658:	4620      	mov	r0, r4
 800665a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665e:	f000 b817 	b.w	8006690 <_kill_r>
 8006662:	2b01      	cmp	r3, #1
 8006664:	d00a      	beq.n	800667c <_raise_r+0x4c>
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	d103      	bne.n	8006672 <_raise_r+0x42>
 800666a:	2316      	movs	r3, #22
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	2001      	movs	r0, #1
 8006670:	e7e7      	b.n	8006642 <_raise_r+0x12>
 8006672:	2400      	movs	r4, #0
 8006674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006678:	4628      	mov	r0, r5
 800667a:	4798      	blx	r3
 800667c:	2000      	movs	r0, #0
 800667e:	e7e0      	b.n	8006642 <_raise_r+0x12>

08006680 <raise>:
 8006680:	4b02      	ldr	r3, [pc, #8]	; (800668c <raise+0xc>)
 8006682:	4601      	mov	r1, r0
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f7ff bfd3 	b.w	8006630 <_raise_r>
 800668a:	bf00      	nop
 800668c:	20000064 	.word	0x20000064

08006690 <_kill_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	; (80066b0 <_kill_r+0x20>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	f7fa fbfb 	bl	8000e98 <_kill>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d102      	bne.n	80066ac <_kill_r+0x1c>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	b103      	cbz	r3, 80066ac <_kill_r+0x1c>
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	bf00      	nop
 80066b0:	20000390 	.word	0x20000390

080066b4 <_getpid_r>:
 80066b4:	f7fa bbe8 	b.w	8000e88 <_getpid>

080066b8 <__swhatbuf_r>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	460c      	mov	r4, r1
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	2900      	cmp	r1, #0
 80066c2:	b096      	sub	sp, #88	; 0x58
 80066c4:	4615      	mov	r5, r2
 80066c6:	461e      	mov	r6, r3
 80066c8:	da0d      	bge.n	80066e6 <__swhatbuf_r+0x2e>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	bf0c      	ite	eq
 80066d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066da:	2340      	movne	r3, #64	; 0x40
 80066dc:	2000      	movs	r0, #0
 80066de:	6031      	str	r1, [r6, #0]
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	b016      	add	sp, #88	; 0x58
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	466a      	mov	r2, sp
 80066e8:	f000 f848 	bl	800677c <_fstat_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	dbec      	blt.n	80066ca <__swhatbuf_r+0x12>
 80066f0:	9901      	ldr	r1, [sp, #4]
 80066f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066fa:	4259      	negs	r1, r3
 80066fc:	4159      	adcs	r1, r3
 80066fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006702:	e7eb      	b.n	80066dc <__swhatbuf_r+0x24>

08006704 <__smakebuf_r>:
 8006704:	898b      	ldrh	r3, [r1, #12]
 8006706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006708:	079d      	lsls	r5, r3, #30
 800670a:	4606      	mov	r6, r0
 800670c:	460c      	mov	r4, r1
 800670e:	d507      	bpl.n	8006720 <__smakebuf_r+0x1c>
 8006710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	2301      	movs	r3, #1
 800671a:	6163      	str	r3, [r4, #20]
 800671c:	b002      	add	sp, #8
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	ab01      	add	r3, sp, #4
 8006722:	466a      	mov	r2, sp
 8006724:	f7ff ffc8 	bl	80066b8 <__swhatbuf_r>
 8006728:	9900      	ldr	r1, [sp, #0]
 800672a:	4605      	mov	r5, r0
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff fab3 	bl	8005c98 <_malloc_r>
 8006732:	b948      	cbnz	r0, 8006748 <__smakebuf_r+0x44>
 8006734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006738:	059a      	lsls	r2, r3, #22
 800673a:	d4ef      	bmi.n	800671c <__smakebuf_r+0x18>
 800673c:	f023 0303 	bic.w	r3, r3, #3
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7e3      	b.n	8006710 <__smakebuf_r+0xc>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	6020      	str	r0, [r4, #0]
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	9b00      	ldr	r3, [sp, #0]
 8006754:	6163      	str	r3, [r4, #20]
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	6120      	str	r0, [r4, #16]
 800675a:	b15b      	cbz	r3, 8006774 <__smakebuf_r+0x70>
 800675c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006760:	4630      	mov	r0, r6
 8006762:	f000 f81d 	bl	80067a0 <_isatty_r>
 8006766:	b128      	cbz	r0, 8006774 <__smakebuf_r+0x70>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	431d      	orrs	r5, r3
 8006778:	81a5      	strh	r5, [r4, #12]
 800677a:	e7cf      	b.n	800671c <__smakebuf_r+0x18>

0800677c <_fstat_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d07      	ldr	r5, [pc, #28]	; (800679c <_fstat_r+0x20>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	4611      	mov	r1, r2
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	f7fa fbe4 	bl	8000f56 <_fstat>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d102      	bne.n	8006798 <_fstat_r+0x1c>
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	b103      	cbz	r3, 8006798 <_fstat_r+0x1c>
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	bd38      	pop	{r3, r4, r5, pc}
 800679a:	bf00      	nop
 800679c:	20000390 	.word	0x20000390

080067a0 <_isatty_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d06      	ldr	r5, [pc, #24]	; (80067bc <_isatty_r+0x1c>)
 80067a4:	2300      	movs	r3, #0
 80067a6:	4604      	mov	r4, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	f7fa fbe3 	bl	8000f76 <_isatty>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_isatty_r+0x1a>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_isatty_r+0x1a>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	20000390 	.word	0x20000390

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
