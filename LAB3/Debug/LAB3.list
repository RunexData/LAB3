
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  08006620  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006620  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001104c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e4  00000000  00000000  00031127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad2  00000000  00000000  00034408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026349  00000000  00000000  00034eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012120  00000000  00000000  0005b223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee2ef  00000000  00000000  0006d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ac  00000000  00000000  0015b634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006470 	.word	0x08006470

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006470 	.word	0x08006470

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fd11 	bl	8000fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f816 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f91c 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f8e8 	bl	80007a0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f89c 	bl	800070c <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80005d4:	f000 f85a 	bl	800068c <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  EEPROMWriteExample();
 80005d8:	f000 f982 	bl	80008e0 <EEPROMWriteExample>
	  EEPROMReadExample(Times, 1);
 80005dc:	2101      	movs	r1, #1
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <main+0x34>)
 80005e0:	f000 f9a2 	bl	8000928 <EEPROMReadExample>
	  Start();
 80005e4:	f000 f9c6 	bl	8000974 <Start>
	  Play();
 80005e8:	f000 f9fe 	bl	80009e8 <Play>
	  EEPROMWriteExample();
 80005ec:	e7f4      	b.n	80005d8 <main+0x1c>
 80005ee:	bf00      	nop
 80005f0:	20000230 	.word	0x20000230

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	; 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f891 	bl	800572a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f003 f8a6 	bl	8003768 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	; 0x55
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f940 	bl	80038d0 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 fa07 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fc3e 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 f9f3 	bl	8000a68 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C2_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C2_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C2_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C2_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_I2C2_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_I2C2_Init+0x74>)
 80006c8:	f001 fa1b 	bl	8001b02 <HAL_I2C_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006d2:	f000 f9c9 	bl	8000a68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C2_Init+0x74>)
 80006da:	f002 ffad 	bl	8003638 <HAL_I2CEx_ConfigAnalogFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f9c0 	bl	8000a68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_I2C2_Init+0x74>)
 80006ec:	f002 ffef 	bl	80036ce <HAL_I2CEx_ConfigDigitalFilter>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f9b7 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000084 	.word	0x20000084
 8000704:	40005800 	.word	0x40005800
 8000708:	30a0a7fb 	.word	0x30a0a7fb

0800070c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <MX_LPUART1_UART_Init+0x90>)
 8000714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f004 f83a 	bl	80047c8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f985 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	f004 fdd5 	bl	8005310 <HAL_UARTEx_SetTxFifoThreshold>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800076c:	f000 f97c 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f004 fe0a 	bl	800538c <HAL_UARTEx_SetRxFifoThreshold>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800077e:	f000 f973 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	f004 fd8b 	bl	800529e <HAL_UARTEx_DisableFifoMode>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800078e:	f000 f96b 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000198 	.word	0x20000198
 800079c:	40008000 	.word	0x40008000

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_DMA_Init+0x60>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_DMA_Init+0x60>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_DMA_Init+0x60>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x60>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x60>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x60>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200b      	movs	r0, #11
 80007dc:	f000 fd71 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f000 fd88 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200c      	movs	r0, #12
 80007ec:	f000 fd69 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f0:	200c      	movs	r0, #12
 80007f2:	f000 fd80 	bl	80012f6 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_GPIO_Init+0xd4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a2e      	ldr	r2, [pc, #184]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000838:	f043 0320 	orr.w	r3, r3, #32
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0320 	and.w	r3, r3, #32
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xd4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f001 f903 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <MX_GPIO_Init+0xd8>)
 800089e:	f000 ff73 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	2320      	movs	r3, #32
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 ff64 	bl	8001788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f000 fcfc 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f000 fd13 	bl	80012f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c2.State == HAL_I2C_STATE_READY) {
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <EEPROMWriteExample+0x3c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d012      	beq.n	8000914 <EEPROMWriteExample+0x34>
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <EEPROMWriteExample+0x40>)
 80008f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b20      	cmp	r3, #32
 80008f8:	d10c      	bne.n	8000914 <EEPROMWriteExample+0x34>
		HAL_I2C_Mem_Write_IT(&hi2c2, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, result, 1);
 80008fa:	2301      	movs	r3, #1
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <EEPROMWriteExample+0x44>)
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2302      	movs	r3, #2
 8000904:	222c      	movs	r2, #44	; 0x2c
 8000906:	21a0      	movs	r1, #160	; 0xa0
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <EEPROMWriteExample+0x40>)
 800090a:	f001 f995 	bl	8001c38 <HAL_I2C_Mem_Write_IT>
		eepromExampleWriteFlag = 0;
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <EEPROMWriteExample+0x3c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	}
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000022c 	.word	0x2000022c
 8000920:	20000084 	.word	0x20000084
 8000924:	20000238 	.word	0x20000238

08000928 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c2.State == HAL_I2C_STATE_READY) {
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <EEPROMReadExample+0x44>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d012      	beq.n	8000962 <EEPROMReadExample+0x3a>
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <EEPROMReadExample+0x48>)
 800093e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b20      	cmp	r3, #32
 8000946:	d10c      	bne.n	8000962 <EEPROMReadExample+0x3a>
		HAL_I2C_Mem_Read_IT(&hi2c2, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2302      	movs	r3, #2
 8000952:	222c      	movs	r2, #44	; 0x2c
 8000954:	21a0      	movs	r1, #160	; 0xa0
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <EEPROMReadExample+0x48>)
 8000958:	f001 f9f8 	bl	8001d4c <HAL_I2C_Mem_Read_IT>
		eepromExampleReadFlag = 0;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <EEPROMReadExample+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
	}
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000022d 	.word	0x2000022d
 8000970:	20000084 	.word	0x20000084

08000974 <Start>:

void Start()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	 if(start)
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <Start+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d026      	beq.n	80009ce <Start+0x5a>
	 {
		 time = rand() % (8000 - 3000 + 1) + 3000;
 8000980:	f004 fd90 	bl	80054a4 <rand>
 8000984:	4603      	mov	r3, r0
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <Start+0x64>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	441a      	add	r2, r3
 800098e:	1311      	asrs	r1, r2, #12
 8000990:	17da      	asrs	r2, r3, #31
 8000992:	1a8a      	subs	r2, r1, r2
 8000994:	f241 3189 	movw	r1, #5001	; 0x1389
 8000998:	fb01 f202 	mul.w	r2, r1, r2
 800099c:	1a9a      	subs	r2, r3, r2
 800099e:	b293      	uxth	r3, r2
 80009a0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <Start+0x68>)
 80009a8:	801a      	strh	r2, [r3, #0]
		 start = 0;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <Start+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		 HAL_Delay(time + 1);
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <Start+0x68>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fb86 	bl	80010c8 <HAL_Delay>
		 led = 1;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <Start+0x6c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
		 stimer = HAL_GetTick();
 80009c2:	f000 fb75 	bl	80010b0 <HAL_GetTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <Start+0x70>)
 80009cc:	801a      	strh	r2, [r3, #0]
	 }
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000231 	.word	0x20000231
 80009d8:	d1ac5b1f 	.word	0xd1ac5b1f
 80009dc:	20000234 	.word	0x20000234
 80009e0:	20000233 	.word	0x20000233
 80009e4:	20000236 	.word	0x20000236

080009e8 <Play>:


void Play()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	if(led == 1)
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <Play+0x64>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d128      	bne.n	8000a46 <Play+0x5e>
	{
		if(play){
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <Play+0x68>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d024      	beq.n	8000a46 <Play+0x5e>
			rawresult = HAL_GetTick() - stimer ;
 80009fc:	f000 fb58 	bl	80010b0 <HAL_GetTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <Play+0x6c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <Play+0x70>)
 8000a0e:	801a      	strh	r2, [r3, #0]
			if(rawresult > 1000)
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <Play+0x70>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a18:	d903      	bls.n	8000a22 <Play+0x3a>
			{
				result[0] = 100;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <Play+0x74>)
 8000a1c:	2264      	movs	r2, #100	; 0x64
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e009      	b.n	8000a36 <Play+0x4e>
			}
			else
			{
				result[0] = rawresult / 10;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <Play+0x70>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <Play+0x78>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <Play+0x74>)
 8000a34:	701a      	strb	r2, [r3, #0]
			}
			eepromExampleWriteFlag = 1;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <Play+0x7c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
			EEPROMWriteExample();
 8000a3c:	f7ff ff50 	bl	80008e0 <EEPROMWriteExample>
			play = 0;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <Play+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000233 	.word	0x20000233
 8000a50:	20000232 	.word	0x20000232
 8000a54:	20000236 	.word	0x20000236
 8000a58:	2000023a 	.word	0x2000023a
 8000a5c:	20000238 	.word	0x20000238
 8000a60:	cccccccd 	.word	0xcccccccd
 8000a64:	2000022c 	.word	0x2000022c

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aaa:	f002 ff01 	bl	80038b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0a0      	sub	sp, #128	; 0x80
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	2254      	movs	r2, #84	; 0x54
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fe24 	bl	800572a <memset>
  if(hi2c->Instance==I2C2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a5f      	ldr	r2, [pc, #380]	; (8000c64 <HAL_I2C_MspInit+0x1a8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	f040 80b6 	bne.w	8000c5a <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fc16 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ffaf 	bl	8000a68 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b57      	ldr	r3, [pc, #348]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a56      	ldr	r2, [pc, #344]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a50      	ldr	r2, [pc, #320]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b52:	4619      	mov	r1, r3
 8000b54:	4845      	ldr	r0, [pc, #276]	; (8000c6c <HAL_I2C_MspInit+0x1b0>)
 8000b56:	f000 fe17 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fe05 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b88:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <HAL_I2C_MspInit+0x1ac>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000b98:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <HAL_I2C_MspInit+0x1b8>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000b9e:	2212      	movs	r2, #18
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000bcc:	4828      	ldr	r0, [pc, #160]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000bce:	f000 fbad 	bl	800132c <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000bd8:	f7ff ff46 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000be0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_I2C_MspInit+0x1b4>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <HAL_I2C_MspInit+0x1c0>)
 8000bec:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000bf0:	2213      	movs	r2, #19
 8000bf2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000c1e:	4816      	ldr	r0, [pc, #88]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c20:	f000 fb84 	bl	800132c <HAL_DMA_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8000c2a:	f7ff ff1d 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_I2C_MspInit+0x1bc>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2021      	movs	r0, #33	; 0x21
 8000c40:	f000 fb3f 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c44:	2021      	movs	r0, #33	; 0x21
 8000c46:	f000 fb56 	bl	80012f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2022      	movs	r0, #34	; 0x22
 8000c50:	f000 fb37 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000c54:	2022      	movs	r0, #34	; 0x22
 8000c56:	f000 fb4e 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3780      	adds	r7, #128	; 0x80
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40005800 	.word	0x40005800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000800 	.word	0x48000800
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	40020008 	.word	0x40020008
 8000c78:	20000138 	.word	0x20000138
 8000c7c:	4002001c 	.word	0x4002001c

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09e      	sub	sp, #120	; 0x78
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2254      	movs	r2, #84	; 0x54
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 fd42 	bl	800572a <memset>
  if(huart->Instance==LPUART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_UART_MspInit+0xa8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d136      	bne.n	8000d1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fb35 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff fece 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd0:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0xac>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f000 fd35 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3778      	adds	r7, #120	; 0x78
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40008000 	.word	0x40008000
 8000d2c:	40021000 	.word	0x40021000

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f986 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA1_Channel1_IRQHandler+0x10>)
 8000d8a:	f000 fbde 	bl	800154a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000d8 	.word	0x200000d8

08000d98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Channel2_IRQHandler+0x10>)
 8000d9e:	f000 fbd4 	bl	800154a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000138 	.word	0x20000138

08000dac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <I2C2_EV_IRQHandler+0x10>)
 8000db2:	f001 f851 	bl	8001e58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000084 	.word	0x20000084

08000dc0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <I2C2_ER_IRQHandler+0x10>)
 8000dc6:	f001 f861 	bl	8001e8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000084 	.word	0x20000084

08000dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ddc:	f000 fe6e 	bl	8001abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_kill>:

int _kill(int pid, int sig)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfe:	f004 fce3 	bl	80057c8 <__errno>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2216      	movs	r2, #22
 8000e06:	601a      	str	r2, [r3, #0]
  return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_exit>:

void _exit (int status)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffe7 	bl	8000df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e26:	e7fe      	b.n	8000e26 <_exit+0x12>

08000e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f004 fc48 	bl	80057c8 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20020000 	.word	0x20020000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	2000023c 	.word	0x2000023c
 8000f6c:	20000390 	.word	0x20000390

08000f70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 fc07 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff faf9 	bl	80005bc <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd8:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 8000fdc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fe0:	20000390 	.word	0x20000390

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>

08000fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f95b 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f80e 	bl	8001018 <HAL_InitTick>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001008:	f7ff fd34 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100c:	79fb      	ldrb	r3, [r7, #7]

}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_InitTick+0x68>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d022      	beq.n	8001072 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_InitTick+0x6c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_InitTick+0x68>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001038:	fbb1 f3f3 	udiv	r3, r1, r3
 800103c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f966 	bl	8001312 <HAL_SYSTICK_Config>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10f      	bne.n	800106c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d809      	bhi.n	8001066 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f000 f932 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_InitTick+0x70>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e007      	b.n	8001076 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e004      	b.n	8001076 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e001      	b.n	8001076 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008
 8001084:	20000000 	.word	0x20000000
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4413      	add	r3, r2
 800109a:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x1c>)
 800109c:	6013      	str	r3, [r2, #0]
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000240 	.word	0x20000240
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000240 	.word	0x20000240

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d004      	beq.n	80010ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_Delay+0x40>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ec:	bf00      	nop
 80010ee:	f7ff ffdf 	bl	80010b0 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d8f7      	bhi.n	80010ee <HAL_Delay+0x26>
  {
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff40 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff33 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa4 	bl	8001268 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e08d      	b.n	800145a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_DMA_Init+0x138>)
 8001346:	429a      	cmp	r2, r3
 8001348:	d80f      	bhi.n	800136a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b45      	ldr	r3, [pc, #276]	; (8001468 <HAL_DMA_Init+0x13c>)
 8001352:	4413      	add	r3, r2
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_DMA_Init+0x140>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	009a      	lsls	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_DMA_Init+0x144>)
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
 8001368:	e00e      	b.n	8001388 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b40      	ldr	r3, [pc, #256]	; (8001474 <HAL_DMA_Init+0x148>)
 8001372:	4413      	add	r3, r2
 8001374:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_DMA_Init+0x140>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	009a      	lsls	r2, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_DMA_Init+0x14c>)
 8001386:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800139e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f972 	bl	80016c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013e8:	d102      	bne.n	80013f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001404:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_DMA_Init+0x104>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d80c      	bhi.n	8001430 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f992 	bl	8001740 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e008      	b.n	8001442 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020407 	.word	0x40020407
 8001468:	bffdfff8 	.word	0xbffdfff8
 800146c:	cccccccd 	.word	0xcccccccd
 8001470:	40020000 	.word	0x40020000
 8001474:	bffdfbf8 	.word	0xbffdfbf8
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d00d      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2204      	movs	r2, #4
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e047      	b.n	8001540 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 020e 	bic.w	r2, r2, #14
 80014be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001514:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800151e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
    }
  }
  return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2204      	movs	r2, #4
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d026      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x7a>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d021      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	2b00      	cmp	r3, #0
 800158c:	d107      	bne.n	800159e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0204 	bic.w	r2, r2, #4
 800159c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f003 021f 	and.w	r2, r3, #31
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2104      	movs	r1, #4
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d071      	beq.n	800169e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015c2:	e06c      	b.n	800169e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2202      	movs	r2, #2
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d02e      	beq.n	8001636 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d029      	beq.n	8001636 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10b      	bne.n	8001608 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020a 	bic.w	r2, r2, #10
 80015fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2102      	movs	r1, #2
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d038      	beq.n	800169e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001634:	e033      	b.n	800169e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	2208      	movs	r2, #8
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02a      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d025      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020e 	bic.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
}
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d802      	bhi.n	80016de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e001      	b.n	80016e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3b08      	subs	r3, #8
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	009a      	lsls	r2, r3, #2
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4413      	add	r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800170e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2201      	movs	r2, #1
 8001718:	409a      	lsls	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40020407 	.word	0x40020407
 8001730:	40020800 	.word	0x40020800
 8001734:	40020820 	.word	0x40020820
 8001738:	cccccccd 	.word	0xcccccccd
 800173c:	40020880 	.word	0x40020880

08001740 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001762:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2201      	movs	r2, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	1000823f 	.word	0x1000823f
 8001784:	40020940 	.word	0x40020940

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001796:	e15a      	b.n	8001a4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 814c 	beq.w	8001a48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d005      	beq.n	80017c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a6 	beq.w	8001a48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	4a5a      	ldr	r2, [pc, #360]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6613      	str	r3, [r2, #96]	; 0x60
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001914:	4a56      	ldr	r2, [pc, #344]	; (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800193e:	d01f      	beq.n	8001980 <HAL_GPIO_Init+0x1f8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x2ec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d019      	beq.n	800197c <HAL_GPIO_Init+0x1f4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x1f0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x2f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x2f8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a48      	ldr	r2, [pc, #288]	; (8001a84 <HAL_GPIO_Init+0x2fc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1e4>
 8001968:	2305      	movs	r3, #5
 800196a:	e00a      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 800196c:	2306      	movs	r3, #6
 800196e:	e008      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001970:	2304      	movs	r3, #4
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001974:	2303      	movs	r3, #3
 8001976:	e004      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001978:	2302      	movs	r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001980:	2300      	movs	r3, #0
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	4093      	lsls	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001992:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_GPIO_Init+0x300>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c4:	4a30      	ldr	r2, [pc, #192]	; (8001a88 <HAL_GPIO_Init+0x300>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x300>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <HAL_GPIO_Init+0x300>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x300>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_GPIO_Init+0x300>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x300>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_GPIO_Init+0x300>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f ae9d 	bne.w	8001798 <HAL_GPIO_Init+0x10>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000c00 	.word	0x48000c00
 8001a80:	48001000 	.word	0x48001000
 8001a84:	48001400 	.word	0x48001400
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f806 	bl	8001aec <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e08d      	b.n	8001c30 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d106      	bne.n	8001b2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe ffc7 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2224      	movs	r2, #36	; 0x24
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	e006      	b.n	8001b8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d108      	bne.n	8001ba4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e007      	b.n	8001bb4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69d9      	ldr	r1, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d16a      	bne.n	8001d34 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_I2C_Mem_Write_IT+0x32>
 8001c64:	8bbb      	ldrh	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e05f      	b.n	8001d36 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
 8001c88:	e055      	b.n	8001d36 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_I2C_Mem_Write_IT+0x60>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e04e      	b.n	8001d36 <HAL_I2C_Mem_Write_IT+0xfe>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2221      	movs	r2, #33	; 0x21
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8bba      	ldrh	r2, [r7, #28]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_I2C_Mem_Write_IT+0x108>)
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001cd4:	897a      	ldrh	r2, [r7, #10]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d109      	bne.n	8001cf4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf2:	e00b      	b.n	8001d0c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cf4:	893b      	ldrh	r3, [r7, #8]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_I2C_Mem_Write_IT+0x110>)
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f001 fb78 	bl	8003410 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d28:	2101      	movs	r1, #1
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f001 fba2 	bl	8003474 <I2C_Enable_IRQ>

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	ffff0000 	.word	0xffff0000
 8001d44:	08002015 	.word	0x08002015
 8001d48:	80002000 	.word	0x80002000

08001d4c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	817b      	strh	r3, [r7, #10]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	813b      	strh	r3, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d166      	bne.n	8001e40 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_I2C_Mem_Read_IT+0x32>
 8001d78:	8bbb      	ldrh	r3, [r7, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e05b      	b.n	8001e42 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e051      	b.n	8001e42 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_I2C_Mem_Read_IT+0x60>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e04a      	b.n	8001e42 <HAL_I2C_Mem_Read_IT+0xf6>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2222      	movs	r2, #34	; 0x22
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8bba      	ldrh	r2, [r7, #28]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_I2C_Mem_Read_IT+0x100>)
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_I2C_Mem_Read_IT+0x104>)
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001de2:	897a      	ldrh	r2, [r7, #10]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d109      	bne.n	8001e02 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfe:	651a      	str	r2, [r3, #80]	; 0x50
 8001e00:	e00b      	b.n	8001e1a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e02:	893b      	ldrh	r3, [r7, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001e10:	893b      	ldrh	r3, [r7, #8]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	8979      	ldrh	r1, [r7, #10]
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_I2C_Mem_Read_IT+0x108>)
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2300      	movs	r3, #0
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f001 faf2 	bl	8003410 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e34:	2101      	movs	r1, #1
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f001 fb1c 	bl	8003474 <I2C_Enable_IRQ>

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	ffff0000 	.word	0xffff0000
 8001e50:	08002015 	.word	0x08002015
 8001e54:	80002000 	.word	0x80002000

08001e58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	68f9      	ldr	r1, [r7, #12]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
  }
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00f      	beq.n	8001ece <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00f      	beq.n	8001ef8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f043 0208 	orr.w	r2, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00f      	beq.n	8001f22 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 030b 	and.w	r3, r3, #11
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f001 f911 	bl	800315c <I2C_ITError>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002020:	4b8d      	ldr	r3, [pc, #564]	; (8002258 <I2C_Mem_ISR_IT+0x244>)
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <I2C_Mem_ISR_IT+0x22>
 8002032:	2302      	movs	r3, #2
 8002034:	e10c      	b.n	8002250 <I2C_Mem_ISR_IT+0x23c>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2210      	movs	r2, #16
 8002058:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f001 f98f 	bl	800338a <I2C_Flush_TXDR>
 800206c:	e0dd      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020bc:	e0b5      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02c      	beq.n	8002122 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d027      	beq.n	8002122 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020da:	d118      	bne.n	800210e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800210c:	e08d      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f04f 32ff 	mov.w	r2, #4294967295
 800211e:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002120:	e083      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d03c      	beq.n	80021a6 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002132:	2b00      	cmp	r3, #0
 8002134:	d037      	beq.n	80021a6 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02c      	beq.n	800219a <I2C_Mem_ISR_IT+0x186>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d128      	bne.n	800219a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d910      	bls.n	8002174 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	b299      	uxth	r1, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	b2da      	uxtb	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f001 f94f 	bl	8003410 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002172:	e017      	b.n	80021a4 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	b299      	uxth	r1, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	b2da      	uxtb	r2, r3
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f001 f93c 	bl	8003410 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002198:	e004      	b.n	80021a4 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800219a:	2140      	movs	r1, #64	; 0x40
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 ffdd 	bl	800315c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a2:	e042      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
 80021a4:	e041      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d03c      	beq.n	800222a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d037      	beq.n	800222a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021ba:	2101      	movs	r1, #1
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f001 f9dd 	bl	800357c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021c2:	2102      	movs	r1, #2
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 f955 	bl	8003474 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b22      	cmp	r3, #34	; 0x22
 80021d4:	d101      	bne.n	80021da <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <I2C_Mem_ISR_IT+0x248>)
 80021d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2bff      	cmp	r3, #255	; 0xff
 80021e2:	d910      	bls.n	8002206 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	b299      	uxth	r1, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f001 f906 	bl	8003410 <I2C_TransferConfig>
 8002204:	e011      	b.n	800222a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	b299      	uxth	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	b2da      	uxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f001 f8f3 	bl	8003410 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800223e:	6939      	ldr	r1, [r7, #16]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fd0b 	bl	8002c5c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	80002000 	.word	0x80002000
 800225c:	80002400 	.word	0x80002400

08002260 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <I2C_Slave_ISR_IT+0x24>
 8002280:	2302      	movs	r3, #2
 8002282:	e0e2      	b.n	800244a <I2C_Slave_ISR_IT+0x1ea>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fda2 	bl	8002dec <I2C_ITSlaveCplt>
 80022a8:	e0ca      	b.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d04b      	beq.n	800234c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d046      	beq.n	800234c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d128      	bne.n	800231a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b28      	cmp	r3, #40	; 0x28
 80022d2:	d108      	bne.n	80022e6 <I2C_Slave_ISR_IT+0x86>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022da:	d104      	bne.n	80022e6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fee8 	bl	80030b4 <I2C_ITListenCplt>
 80022e4:	e031      	b.n	800234a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b29      	cmp	r3, #41	; 0x29
 80022f0:	d10e      	bne.n	8002310 <I2C_Slave_ISR_IT+0xb0>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f8:	d00a      	beq.n	8002310 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2210      	movs	r2, #16
 8002300:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f001 f841 	bl	800338a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fc4b 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
 800230e:	e01c      	b.n	800234a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2210      	movs	r2, #16
 8002316:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002318:	e08f      	b.n	800243a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2210      	movs	r2, #16
 8002320:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <I2C_Slave_ISR_IT+0xdc>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233a:	d17e      	bne.n	800243a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	4619      	mov	r1, r3
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 ff0a 	bl	800315c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002348:	e077      	b.n	800243a <I2C_Slave_ISR_IT+0x1da>
 800234a:	e076      	b.n	800243a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02f      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02a      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d018      	beq.n	800239c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d14b      	bne.n	800243e <I2C_Slave_ISR_IT+0x1de>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023ac:	d047      	beq.n	800243e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fbf8 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80023b4:	e043      	b.n	800243e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80023ca:	6939      	ldr	r1, [r7, #16]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fb28 	bl	8002a22 <I2C_ITAddrCplt>
 80023d2:	e035      	b.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d030      	beq.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02b      	beq.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d018      	beq.n	8002424 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
 8002422:	e00d      	b.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242a:	d002      	beq.n	8002432 <I2C_Slave_ISR_IT+0x1d2>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fbb6 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
 8002438:	e002      	b.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800243e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b088      	sub	sp, #32
 8002456:	af02      	add	r7, sp, #8
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <I2C_Master_ISR_DMA+0x1a>
 8002468:	2302      	movs	r3, #2
 800246a:	e0d9      	b.n	8002620 <I2C_Master_ISR_DMA+0x1ce>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002484:	2b00      	cmp	r3, #0
 8002486:	d011      	beq.n	80024ac <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2210      	movs	r2, #16
 800248e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800249c:	2120      	movs	r1, #32
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 ffe8 	bl	8003474 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 ff70 	bl	800338a <I2C_Flush_TXDR>
 80024aa:	e0b4      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d071      	beq.n	800259a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06c      	beq.n	800259a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04e      	beq.n	8002578 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	; 0xff
 80024f0:	d906      	bls.n	8002500 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80024f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e010      	b.n	8002522 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002512:	d003      	beq.n	800251c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e002      	b.n	8002522 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800251c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002520:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	8a79      	ldrh	r1, [r7, #18]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 ff6d 	bl	8003410 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b22      	cmp	r3, #34	; 0x22
 8002552:	d108      	bne.n	8002566 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002564:	e057      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002574:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002576:	e04e      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002586:	d003      	beq.n	8002590 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 face 	bl	8002b2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800258e:	e042      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fde2 	bl	800315c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002598:	e03d      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d028      	beq.n	80025f6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d023      	beq.n	80025f6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d119      	bne.n	80025ec <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025c6:	d025      	beq.n	8002614 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80025e2:	e017      	b.n	8002614 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 faa0 	bl	8002b2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80025ea:	e013      	b.n	8002614 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fdb4 	bl	800315c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025f4:	e00e      	b.n	8002614 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb25 	bl	8002c5c <I2C_ITMasterCplt>
 8002612:	e000      	b.n	8002616 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002614:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002634:	4b8d      	ldr	r3, [pc, #564]	; (800286c <I2C_Mem_ISR_DMA+0x244>)
 8002636:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <I2C_Mem_ISR_DMA+0x1e>
 8002642:	2302      	movs	r3, #2
 8002644:	e10e      	b.n	8002864 <I2C_Mem_ISR_DMA+0x23c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d016      	beq.n	8002686 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800265e:	2b00      	cmp	r3, #0
 8002660:	d011      	beq.n	8002686 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2210      	movs	r2, #16
 8002668:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002676:	2120      	movs	r1, #32
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fefb 	bl	8003474 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fe83 	bl	800338a <I2C_Flush_TXDR>
 8002684:	e0e9      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f04f 32ff 	mov.w	r2, #4294967295
 80026aa:	651a      	str	r2, [r3, #80]	; 0x50
 80026ac:	e0d5      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05f      	beq.n	8002778 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d05a      	beq.n	8002778 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026c2:	2101      	movs	r1, #1
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 ff59 	bl	800357c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80026ca:	2110      	movs	r1, #16
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fed1 	bl	8003474 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d048      	beq.n	800276e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	d910      	bls.n	8002708 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	b299      	uxth	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fe85 	bl	8003410 <I2C_TransferConfig>
 8002706:	e011      	b.n	800272c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	b299      	uxth	r1, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fe72 	bl	8003410 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b22      	cmp	r3, #34	; 0x22
 8002748:	d108      	bne.n	800275c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002758:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800275a:	e07e      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800276c:	e075      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fcf3 	bl	800315c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002776:	e070      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d05d      	beq.n	800283e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002788:	2b00      	cmp	r3, #0
 800278a:	d058      	beq.n	800283e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800278c:	2101      	movs	r1, #1
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fef4 	bl	800357c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002794:	2110      	movs	r1, #16
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fe6c 	bl	8003474 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b22      	cmp	r3, #34	; 0x22
 80027a6:	d101      	bne.n	80027ac <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <I2C_Mem_ISR_DMA+0x248>)
 80027aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2bff      	cmp	r3, #255	; 0xff
 80027b4:	d910      	bls.n	80027d8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	b299      	uxth	r1, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fe1d 	bl	8003410 <I2C_TransferConfig>
 80027d6:	e011      	b.n	80027fc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	b299      	uxth	r1, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fe0a 	bl	8003410 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b22      	cmp	r3, #34	; 0x22
 8002818:	d108      	bne.n	800282c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002828:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800282a:	e016      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800283c:	e00d      	b.n	800285a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa01 	bl	8002c5c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	80002000 	.word	0x80002000
 8002870:	80002400 	.word	0x80002400

08002874 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <I2C_Slave_ISR_DMA+0x24>
 8002894:	2302      	movs	r3, #2
 8002896:	e0c0      	b.n	8002a1a <I2C_Slave_ISR_DMA+0x1a6>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fa98 	bl	8002dec <I2C_ITSlaveCplt>
 80028bc:	e0a8      	b.n	8002a10 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8095 	beq.w	80029f4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808f 	beq.w	80029f4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07d      	beq.n	80029e6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800292a:	2301      	movs	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d128      	bne.n	8002986 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b28      	cmp	r3, #40	; 0x28
 800293e:	d108      	bne.n	8002952 <I2C_Slave_ISR_DMA+0xde>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002946:	d104      	bne.n	8002952 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fbb2 	bl	80030b4 <I2C_ITListenCplt>
 8002950:	e048      	b.n	80029e4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b29      	cmp	r3, #41	; 0x29
 800295c:	d10e      	bne.n	800297c <I2C_Slave_ISR_DMA+0x108>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002964:	d00a      	beq.n	800297c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2210      	movs	r2, #16
 800296c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fd0b 	bl	800338a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f915 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
 800297a:	e033      	b.n	80029e4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002984:	e034      	b.n	80029f0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2210      	movs	r2, #16
 800298c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f043 0204 	orr.w	r2, r3, #4
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <I2C_Slave_ISR_DMA+0x13c>
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ae:	d11f      	bne.n	80029f0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b21      	cmp	r3, #33	; 0x21
 80029b4:	d002      	beq.n	80029bc <I2C_Slave_ISR_DMA+0x148>
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b29      	cmp	r3, #41	; 0x29
 80029ba:	d103      	bne.n	80029c4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
 80029c2:	e008      	b.n	80029d6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b22      	cmp	r3, #34	; 0x22
 80029c8:	d002      	beq.n	80029d0 <I2C_Slave_ISR_DMA+0x15c>
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b2a      	cmp	r3, #42	; 0x2a
 80029ce:	d102      	bne.n	80029d6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2222      	movs	r2, #34	; 0x22
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4619      	mov	r1, r3
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fbbd 	bl	800315c <I2C_ITError>
      if (treatdmanack == 1U)
 80029e2:	e005      	b.n	80029f0 <I2C_Slave_ISR_DMA+0x17c>
 80029e4:	e004      	b.n	80029f0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2210      	movs	r2, #16
 80029ec:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029ee:	e00f      	b.n	8002a10 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80029f0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029f2:	e00d      	b.n	8002a10 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f809 	bl	8002a22 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a38:	2b28      	cmp	r3, #40	; 0x28
 8002a3a:	d16a      	bne.n	8002b12 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a5a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a68:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002a76:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d138      	bne.n	8002af2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	09db      	lsrs	r3, r3, #7
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	89bb      	ldrh	r3, [r7, #12]
 8002a88:	4053      	eors	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f003 0306 	and.w	r3, r3, #6
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11c      	bne.n	8002ace <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d13b      	bne.n	8002b22 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ac0:	89ba      	ldrh	r2, [r7, #12]
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fa63 	bl	8001f92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002acc:	e029      	b.n	8002b22 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ace:	893b      	ldrh	r3, [r7, #8]
 8002ad0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fd50 	bl	800357c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ae4:	89ba      	ldrh	r2, [r7, #12]
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fa51 	bl	8001f92 <HAL_I2C_AddrCallback>
}
 8002af0:	e017      	b.n	8002b22 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fd40 	bl	800357c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b04:	89ba      	ldrh	r2, [r7, #12]
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fa41 	bl	8001f92 <HAL_I2C_AddrCallback>
}
 8002b10:	e007      	b.n	8002b22 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b21      	cmp	r3, #33	; 0x21
 8002b44:	d115      	bne.n	8002b72 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2211      	movs	r2, #17
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fd0d 	bl	800357c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff f9e9 	bl	8001f42 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b70:	e014      	b.n	8002b9c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2212      	movs	r2, #18
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b86:	2102      	movs	r1, #2
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fcf7 	bl	800357c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff f9dd 	bl	8001f56 <HAL_I2C_MasterRxCpltCallback>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e00c      	b.n	8002bf2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b29      	cmp	r3, #41	; 0x29
 8002bfc:	d112      	bne.n	8002c24 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2221      	movs	r2, #33	; 0x21
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fcb4 	bl	800357c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff f9a4 	bl	8001f6a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c22:	e017      	b.n	8002c54 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2e:	d111      	bne.n	8002c54 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2228      	movs	r2, #40	; 0x28
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2222      	movs	r2, #34	; 0x22
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c3e:	2102      	movs	r1, #2
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fc9b 	bl	800357c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f995 	bl	8001f7e <HAL_I2C_SlaveRxCpltCallback>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b21      	cmp	r3, #33	; 0x21
 8002c7c:	d107      	bne.n	8002c8e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c7e:	2101      	movs	r1, #1
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fc7b 	bl	800357c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2211      	movs	r2, #17
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8c:	e00c      	b.n	8002ca8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b22      	cmp	r3, #34	; 0x22
 8002c98:	d106      	bne.n	8002ca8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fc6d 	bl	800357c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2212      	movs	r2, #18
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <I2C_ITMasterCplt+0x188>)
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <I2C_ITMasterCplt+0x18c>)
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b60      	cmp	r3, #96	; 0x60
 8002cec:	d10a      	bne.n	8002d04 <I2C_ITMasterCplt+0xa8>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002d02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fb40 	bl	800338a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	d002      	beq.n	8002d22 <I2C_ITMasterCplt+0xc6>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa17 	bl	800315c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d2e:	e054      	b.n	8002dda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b21      	cmp	r3, #33	; 0x21
 8002d3a:	d124      	bne.n	8002d86 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d10b      	bne.n	8002d6e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff f92b 	bl	8001fc2 <HAL_I2C_MemTxCpltCallback>
}
 8002d6c:	e035      	b.n	8002dda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff f8df 	bl	8001f42 <HAL_I2C_MasterTxCpltCallback>
}
 8002d84:	e029      	b.n	8002dda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b22      	cmp	r3, #34	; 0x22
 8002d90:	d123      	bne.n	8002dda <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d10b      	bne.n	8002dc4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff f90a 	bl	8001fd6 <HAL_I2C_MemRxCpltCallback>
}
 8002dc2:	e00a      	b.n	8002dda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff f8be 	bl	8001f56 <HAL_I2C_MasterRxCpltCallback>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	fe00e800 	.word	0xfe00e800
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2220      	movs	r2, #32
 8002e16:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	2b21      	cmp	r3, #33	; 0x21
 8002e1c:	d002      	beq.n	8002e24 <I2C_ITSlaveCplt+0x38>
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	2b29      	cmp	r3, #41	; 0x29
 8002e22:	d108      	bne.n	8002e36 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e24:	f248 0101 	movw	r1, #32769	; 0x8001
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fba7 	bl	800357c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2221      	movs	r2, #33	; 0x21
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
 8002e34:	e019      	b.n	8002e6a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b22      	cmp	r3, #34	; 0x22
 8002e3a:	d002      	beq.n	8002e42 <I2C_ITSlaveCplt+0x56>
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d108      	bne.n	8002e54 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002e42:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fb98 	bl	800357c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2222      	movs	r2, #34	; 0x22
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
 8002e52:	e00a      	b.n	8002e6a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	2b28      	cmp	r3, #40	; 0x28
 8002e58:	d107      	bne.n	8002e6a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002e5a:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb8c 	bl	800357c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e78:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b89      	ldr	r3, [pc, #548]	; (80030ac <I2C_ITSlaveCplt+0x2c0>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa7d 	bl	800338a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d013      	beq.n	8002ec2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ea8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01f      	beq.n	8002ef2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec0:	e017      	b.n	8002ef2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d049      	beq.n	8002ff2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d044      	beq.n	8002ff2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d128      	bne.n	8002fc4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b28      	cmp	r3, #40	; 0x28
 8002f7c:	d108      	bne.n	8002f90 <I2C_ITSlaveCplt+0x1a4>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f84:	d104      	bne.n	8002f90 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f893 	bl	80030b4 <I2C_ITListenCplt>
 8002f8e:	e030      	b.n	8002ff2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b29      	cmp	r3, #41	; 0x29
 8002f9a:	d10e      	bne.n	8002fba <I2C_ITSlaveCplt+0x1ce>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fa2:	d00a      	beq.n	8002fba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f9ec 	bl	800338a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fdf6 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
 8002fb8:	e01b      	b.n	8002ff2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	61da      	str	r2, [r3, #28]
 8002fc2:	e016      	b.n	8002ff2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <I2C_ITSlaveCplt+0x1fa>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe4:	d105      	bne.n	8002ff2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f8b5 	bl	800315c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8a4 	bl	800315c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b28      	cmp	r3, #40	; 0x28
 800301e:	d141      	bne.n	80030a4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f846 	bl	80030b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003028:	e03c      	b.n	80030a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003032:	d014      	beq.n	800305e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fdb5 	bl	8002ba4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <I2C_ITSlaveCplt+0x2c4>)
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe ffa9 	bl	8001fae <HAL_I2C_ListenCpltCallback>
}
 800305c:	e022      	b.n	80030a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b22      	cmp	r3, #34	; 0x22
 8003068:	d10e      	bne.n	8003088 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe ff7c 	bl	8001f7e <HAL_I2C_SlaveRxCpltCallback>
}
 8003086:	e00d      	b.n	80030a4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe ff63 	bl	8001f6a <HAL_I2C_SlaveTxCpltCallback>
}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	fe00e800 	.word	0xfe00e800
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <I2C_ITListenCplt+0xa4>)
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d022      	beq.n	8003130 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003130:	f248 0103 	movw	r1, #32771	; 0x8003
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa21 	bl	800357c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2210      	movs	r2, #16
 8003140:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe ff2f 	bl	8001fae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	ffff0000 	.word	0xffff0000

0800315c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a6d      	ldr	r2, [pc, #436]	; (8003330 <I2C_ITError+0x1d4>)
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b28      	cmp	r3, #40	; 0x28
 8003192:	d005      	beq.n	80031a0 <I2C_ITError+0x44>
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b29      	cmp	r3, #41	; 0x29
 8003198:	d002      	beq.n	80031a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b2a      	cmp	r3, #42	; 0x2a
 800319e:	d10b      	bne.n	80031b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031a0:	2103      	movs	r1, #3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9ea 	bl	800357c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2228      	movs	r2, #40	; 0x28
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a60      	ldr	r2, [pc, #384]	; (8003334 <I2C_ITError+0x1d8>)
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
 80031b6:	e030      	b.n	800321a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9dd 	bl	800357c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8e1 	bl	800338a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d01f      	beq.n	8003214 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d114      	bne.n	8003214 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d109      	bne.n	800320c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2210      	movs	r2, #16
 80031fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2220      	movs	r2, #32
 8003212:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d039      	beq.n	800329c <I2C_ITError+0x140>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b11      	cmp	r3, #17
 800322c:	d002      	beq.n	8003234 <I2C_ITError+0xd8>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b21      	cmp	r3, #33	; 0x21
 8003232:	d133      	bne.n	800329c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d107      	bne.n	8003254 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003252:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe fa25 	bl	80016a8 <HAL_DMA_GetState>
 800325e:	4603      	mov	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d017      	beq.n	8003294 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	4a33      	ldr	r2, [pc, #204]	; (8003338 <I2C_ITError+0x1dc>)
 800326a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe f8ff 	bl	800147c <HAL_DMA_Abort_IT>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d04d      	beq.n	8003320 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800328e:	4610      	mov	r0, r2
 8003290:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003292:	e045      	b.n	8003320 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f851 	bl	800333c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800329a:	e041      	b.n	8003320 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d039      	beq.n	8003318 <I2C_ITError+0x1bc>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b12      	cmp	r3, #18
 80032a8:	d002      	beq.n	80032b0 <I2C_ITError+0x154>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b22      	cmp	r3, #34	; 0x22
 80032ae:	d133      	bne.n	8003318 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032be:	d107      	bne.n	80032d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe f9e7 	bl	80016a8 <HAL_DMA_GetState>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d017      	beq.n	8003310 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <I2C_ITError+0x1dc>)
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe f8c1 	bl	800147c <HAL_DMA_Abort_IT>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d011      	beq.n	8003324 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330a:	4610      	mov	r0, r2
 800330c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800330e:	e009      	b.n	8003324 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f813 	bl	800333c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003316:	e005      	b.n	8003324 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f80f 	bl	800333c <I2C_TreatErrorCallback>
  }
}
 800331e:	e002      	b.n	8003326 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003324:	bf00      	nop
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	ffff0000 	.word	0xffff0000
 8003334:	08002261 	.word	0x08002261
 8003338:	080033d3 	.word	0x080033d3

0800333c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d10e      	bne.n	800336e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fe49 	bl	8001ffe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800336c:	e009      	b.n	8003382 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fe fe34 	bl	8001fea <HAL_I2C_ErrorCallback>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d103      	bne.n	80033a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d007      	beq.n	80033c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	619a      	str	r2, [r3, #24]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	2200      	movs	r2, #0
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	2200      	movs	r2, #0
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff ff9b 	bl	800333c <I2C_TreatErrorCallback>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	4613      	mov	r3, r2
 8003420:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003428:	7a7b      	ldrb	r3, [r7, #9]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003430:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	4313      	orrs	r3, r2
 800343a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800343e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	0d5b      	lsrs	r3, r3, #21
 800344a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <I2C_TransferConfig+0x60>)
 8003450:	430b      	orrs	r3, r1
 8003452:	43db      	mvns	r3, r3
 8003454:	ea02 0103 	and.w	r1, r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	03ff63ff 	.word	0x03ff63ff

08003474 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	4a39      	ldr	r2, [pc, #228]	; (8003570 <I2C_Enable_IRQ+0xfc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d032      	beq.n	80034f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <I2C_Enable_IRQ+0x100>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d02d      	beq.n	80034f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800349c:	4a36      	ldr	r2, [pc, #216]	; (8003578 <I2C_Enable_IRQ+0x104>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d028      	beq.n	80034f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da03      	bge.n	80034b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80034c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80034d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d103      	bne.n	80034e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d133      	bne.n	8003552 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034f2:	e02e      	b.n	8003552 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da03      	bge.n	8003504 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003502:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003514:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003526:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d103      	bne.n	8003536 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003534:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	2b20      	cmp	r3, #32
 800353a:	d103      	bne.n	8003544 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003542:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d103      	bne.n	8003552 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003550:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	08002453 	.word	0x08002453
 8003574:	08002875 	.word	0x08002875
 8003578:	08002629 	.word	0x08002629

0800357c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00f      	beq.n	80035b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800359c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035aa:	2b28      	cmp	r3, #40	; 0x28
 80035ac:	d003      	beq.n	80035b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00f      	beq.n	80035e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80035c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035d4:	2b28      	cmp	r3, #40	; 0x28
 80035d6:	d003      	beq.n	80035e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da03      	bge.n	80035f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d103      	bne.n	80035fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	2b20      	cmp	r3, #32
 8003602:	d103      	bne.n	800360c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f043 0320 	orr.w	r3, r3, #32
 800360a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d103      	bne.n	800361a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003618:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6819      	ldr	r1, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43da      	mvns	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b20      	cmp	r3, #32
 800364c:	d138      	bne.n	80036c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003658:	2302      	movs	r3, #2
 800365a:	e032      	b.n	80036c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800368a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d139      	bne.n	8003758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e033      	b.n	800375a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d141      	bne.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003776:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d131      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003784:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003794:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800379c:	4a41      	ldr	r2, [pc, #260]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037a4:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2232      	movs	r2, #50	; 0x32
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	0c9b      	lsrs	r3, r3, #18
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ba:	e002      	b.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3b01      	subs	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d102      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f2      	bne.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d6:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d158      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e057      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037f8:	e04d      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d141      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d131      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2232      	movs	r2, #50	; 0x32
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003846:	e002      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d102      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d112      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e011      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003884:	e007      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003894:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40007000 	.word	0x40007000
 80038a8:	20000000 	.word	0x20000000
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038be:	6093      	str	r3, [r2, #8]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e2fe      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b97      	ldr	r3, [pc, #604]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f8:	4b94      	ldr	r3, [pc, #592]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0x3e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d002      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e2d9      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a84      	ldr	r2, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7e      	ldr	r2, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a77      	ldr	r2, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b75      	ldr	r3, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fd fb92 	bl	80010b0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd fb8e 	bl	80010b0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e29e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fb7e 	bl	80010b0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd fb7a 	bl	80010b0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e28a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d075      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	4b56      	ldr	r3, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0x136>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_OscConfig+0x13c>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11f      	bne.n	8003a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x154>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e25d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	4946      	ldr	r1, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a38:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd faeb 	bl	8001018 <HAL_InitTick>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e249      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d023      	beq.n	8003a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fb26 	bl	80010b0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a68:	f7fd fb22 	bl	80010b0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e232      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	e01a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fb02 	bl	80010b0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fafe 	bl	80010b0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e20e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1e0>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d041      	beq.n	8003b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd fadb 	bl	80010b0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fd fad7 	bl	80010b0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1e7      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ef      	beq.n	8003afe <HAL_RCC_OscConfig+0x22e>
 8003b1e:	e020      	b.n	8003b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd fabe 	bl	80010b0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b36:	e00d      	b.n	8003b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd faba 	bl	80010b0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d906      	bls.n	8003b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1ca      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ea      	bne.n	8003b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a6 	beq.w	8003cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2b4>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x2b6>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a75      	ldr	r2, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fa77 	bl	80010b0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fd fa73 	bl	80010b0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e183      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0x32e>
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfc:	e024      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d110      	bne.n	8003c28 <HAL_RCC_OscConfig+0x358>
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a52      	ldr	r2, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fd fa2e 	bl	80010b0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fd fa2a 	bl	80010b0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e138      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ed      	beq.n	8003c58 <HAL_RCC_OscConfig+0x388>
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fd fa17 	bl	80010b0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd fa13 	bl	80010b0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e121      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ed      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd f9e6 	bl	80010b0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce8:	f7fd f9e2 	bl	80010b0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0f2      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x418>
 8003d08:	e01b      	b.n	8003d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fd f9c9 	bl	80010b0 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d22:	f7fd f9c5 	bl	80010b0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0d5      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80c9 	beq.w	8003ede <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	f000 8083 	beq.w	8003e60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d15e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd f99f 	bl	80010b0 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	e00c      	b.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd f99b 	bl	80010b0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d905      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0ab      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ec      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x61c>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6a11      	ldr	r1, [r2, #32]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003db6:	0212      	lsls	r2, r2, #8
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0552      	lsls	r2, r2, #21
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0652      	lsls	r2, r2, #25
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd6:	06d2      	lsls	r2, r2, #27
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4943      	ldr	r1, [pc, #268]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a3d      	ldr	r2, [pc, #244]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f95a 	bl	80010b0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f956 	bl	80010b0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e066      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x530>
 8003e1e:	e05e      	b.n	8003ede <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd f940 	bl	80010b0 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fd f93c 	bl	80010b0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4924      	ldr	r1, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
 8003e5e:	e03e      	b.n	8003ede <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e039      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0203 	and.w	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d12c      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d123      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11b      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d113      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	019f800c 	.word	0x019f800c
 8003ef0:	feeefffc 	.word	0xfeeefffc

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e11e      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d910      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b8e      	ldr	r3, [pc, #568]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	498c      	ldr	r1, [pc, #560]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e106      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d073      	beq.n	8004030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d129      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0f4      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f60:	f000 f99e 	bl	80042a0 <RCC_GetSysClockFreqFromPLLSource>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d93f      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d033      	beq.n	8003fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12f      	bne.n	8003fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	4a70      	ldr	r2, [pc, #448]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e024      	b.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0c6      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0be      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fcc:	f000 f8ce 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4a61      	ldr	r2, [pc, #388]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d909      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4957      	ldr	r1, [pc, #348]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fd f856 	bl	80010b0 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fd f852 	bl	80010b0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e095      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004060:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004068:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800406a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800406e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4936      	ldr	r1, [pc, #216]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
 8004082:	e008      	b.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d105      	bne.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d21d      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 020f 	bic.w	r2, r3, #15
 80040ac:	4929      	ldr	r1, [pc, #164]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040b4:	f7fc fffc 	bl	80010b0 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fc fff8 	bl	80010b0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03b      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1ed      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490f      	ldr	r1, [pc, #60]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411e:	f000 f825 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490c      	ldr	r1, [pc, #48]	; (8004160 <HAL_RCC_ClockConfig+0x26c>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x270>)
 800413c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc ff68 	bl	8001018 <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40022000 	.word	0x40022000
 8004158:	40021000 	.word	0x40021000
 800415c:	04c4b400 	.word	0x04c4b400
 8004160:	08006488 	.word	0x08006488
 8004164:	20000000 	.word	0x20000000
 8004168:	20000004 	.word	0x20000004

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b04      	cmp	r3, #4
 800417c:	d102      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e047      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d102      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e03e      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004196:	4b23      	ldr	r3, [pc, #140]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d136      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e001      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004214:	693b      	ldr	r3, [r7, #16]
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	00f42400 	.word	0x00f42400
 800422c:	016e3600 	.word	0x016e3600

08004230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4904      	ldr	r1, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	08006498 	.word	0x08006498

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004278:	f7ff ffda 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCC_GetPCLK2Freq+0x28>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08006498 	.word	0x08006498

080042a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d10c      	bne.n	80042de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ce:	68d2      	ldr	r2, [r2, #12]
 80042d0:	0a12      	lsrs	r2, r2, #8
 80042d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	617b      	str	r3, [r7, #20]
    break;
 80042dc:	e00c      	b.n	80042f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0a12      	lsrs	r2, r2, #8
 80042ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
    break;
 80042f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0e5b      	lsrs	r3, r3, #25
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004312:	687b      	ldr	r3, [r7, #4]
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40021000 	.word	0x40021000
 8004324:	016e3600 	.word	0x016e3600
 8004328:	00f42400 	.word	0x00f42400

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004334:	2300      	movs	r3, #0
 8004336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004338:	2300      	movs	r3, #0
 800433a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8098 	beq.w	800447a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434e:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a3f      	ldr	r2, [pc, #252]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
 8004366:	4b3d      	ldr	r3, [pc, #244]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004376:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004382:	f7fc fe95 	bl	80010b0 <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004388:	e009      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fc fe91 	bl	80010b0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	74fb      	strb	r3, [r7, #19]
        break;
 800439c:	e005      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d159      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d019      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fc fe51 	bl	80010b0 <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004410:	e00b      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fc fe4d 	bl	80010b0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d902      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	74fb      	strb	r3, [r7, #19]
            break;
 8004428:	e006      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ec      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	74bb      	strb	r3, [r7, #18]
 800445a:	e005      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004468:	7c7b      	ldrb	r3, [r7, #17]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4ba7      	ldr	r3, [pc, #668]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4aa6      	ldr	r2, [pc, #664]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004486:	4ba1      	ldr	r3, [pc, #644]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f023 0203 	bic.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	499d      	ldr	r1, [pc, #628]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a8:	4b98      	ldr	r3, [pc, #608]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 020c 	bic.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4995      	ldr	r1, [pc, #596]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ca:	4b90      	ldr	r3, [pc, #576]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	498c      	ldr	r1, [pc, #560]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ec:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4984      	ldr	r1, [pc, #528]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800450e:	4b7f      	ldr	r3, [pc, #508]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004530:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	4973      	ldr	r1, [pc, #460]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004552:	4b6e      	ldr	r3, [pc, #440]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	496a      	ldr	r1, [pc, #424]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004574:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4962      	ldr	r1, [pc, #392]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	4959      	ldr	r1, [pc, #356]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045b8:	4b54      	ldr	r3, [pc, #336]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	4951      	ldr	r1, [pc, #324]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4948      	ldr	r1, [pc, #288]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4940      	ldr	r1, [pc, #256]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a3a      	ldr	r2, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004634:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	4932      	ldr	r1, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800466c:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4924      	ldr	r1, [pc, #144]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b1f      	ldr	r3, [pc, #124]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	4916      	ldr	r1, [pc, #88]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a10      	ldr	r2, [pc, #64]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4926      	ldr	r1, [pc, #152]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	4918      	ldr	r1, [pc, #96]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e042      	b.n	8004860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc fa47 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2224      	movs	r2, #36	; 0x24
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fb24 	bl	8004e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f825 	bl	8004868 <UART_SetConfig>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e01b      	b.n	8004860 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fba3 	bl	8004fa4 <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b08c      	sub	sp, #48	; 0x30
 800486e:	af00      	add	r7, sp, #0
 8004870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4baa      	ldr	r3, [pc, #680]	; (8004b40 <UART_SetConfig+0x2d8>)
 8004898:	4013      	ands	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a9f      	ldr	r2, [pc, #636]	; (8004b44 <UART_SetConfig+0x2dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f023 010f 	bic.w	r1, r3, #15
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a90      	ldr	r2, [pc, #576]	; (8004b48 <UART_SetConfig+0x2e0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d125      	bne.n	8004958 <UART_SetConfig+0xf0>
 800490c:	4b8f      	ldr	r3, [pc, #572]	; (8004b4c <UART_SetConfig+0x2e4>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d81a      	bhi.n	8004950 <UART_SetConfig+0xe8>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0xb8>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	08004939 	.word	0x08004939
 800492c:	08004949 	.word	0x08004949
 8004930:	2301      	movs	r3, #1
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e116      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e112      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e10e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e10a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e106      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7c      	ldr	r2, [pc, #496]	; (8004b50 <UART_SetConfig+0x2e8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d138      	bne.n	80049d4 <UART_SetConfig+0x16c>
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d82d      	bhi.n	80049cc <UART_SetConfig+0x164>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x110>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049b5 	.word	0x080049b5
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e0d8      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e0d4      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e0d0      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e0cc      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e0c8      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5e      	ldr	r2, [pc, #376]	; (8004b54 <UART_SetConfig+0x2ec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d125      	bne.n	8004a2a <UART_SetConfig+0x1c2>
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <UART_SetConfig+0x2e4>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d016      	beq.n	8004a1a <UART_SetConfig+0x1b2>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d818      	bhi.n	8004a22 <UART_SetConfig+0x1ba>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d00a      	beq.n	8004a0a <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d814      	bhi.n	8004a22 <UART_SetConfig+0x1ba>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <UART_SetConfig+0x19a>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d008      	beq.n	8004a12 <UART_SetConfig+0x1aa>
 8004a00:	e00f      	b.n	8004a22 <UART_SetConfig+0x1ba>
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a08:	e0ad      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a10:	e0a9      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a12:	2304      	movs	r3, #4
 8004a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a18:	e0a5      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a20:	e0a1      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a22:	2310      	movs	r3, #16
 8004a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a28:	e09d      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4a      	ldr	r2, [pc, #296]	; (8004b58 <UART_SetConfig+0x2f0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d125      	bne.n	8004a80 <UART_SetConfig+0x218>
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a40:	d016      	beq.n	8004a70 <UART_SetConfig+0x208>
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d818      	bhi.n	8004a78 <UART_SetConfig+0x210>
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d00a      	beq.n	8004a60 <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d814      	bhi.n	8004a78 <UART_SetConfig+0x210>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <UART_SetConfig+0x1f0>
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d008      	beq.n	8004a68 <UART_SetConfig+0x200>
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x210>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5e:	e082      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a60:	2302      	movs	r3, #2
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a66:	e07e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e07a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e076      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e072      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <UART_SetConfig+0x2f4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d12a      	bne.n	8004ae0 <UART_SetConfig+0x278>
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a98:	d01a      	beq.n	8004ad0 <UART_SetConfig+0x268>
 8004a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9e:	d81b      	bhi.n	8004ad8 <UART_SetConfig+0x270>
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d00c      	beq.n	8004ac0 <UART_SetConfig+0x258>
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d815      	bhi.n	8004ad8 <UART_SetConfig+0x270>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <UART_SetConfig+0x250>
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab4:	d008      	beq.n	8004ac8 <UART_SetConfig+0x260>
 8004ab6:	e00f      	b.n	8004ad8 <UART_SetConfig+0x270>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004abe:	e052      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac6:	e04e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ace:	e04a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e046      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e042      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <UART_SetConfig+0x2dc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d13a      	bne.n	8004b60 <UART_SetConfig+0x2f8>
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af8:	d01a      	beq.n	8004b30 <UART_SetConfig+0x2c8>
 8004afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afe:	d81b      	bhi.n	8004b38 <UART_SetConfig+0x2d0>
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d00c      	beq.n	8004b20 <UART_SetConfig+0x2b8>
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0a:	d815      	bhi.n	8004b38 <UART_SetConfig+0x2d0>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x2b0>
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d008      	beq.n	8004b28 <UART_SetConfig+0x2c0>
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x2d0>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1e:	e022      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b20:	2302      	movs	r3, #2
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b26:	e01e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e01a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e016      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e012      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b40:	cfff69f3 	.word	0xcfff69f3
 8004b44:	40008000 	.word	0x40008000
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40004400 	.word	0x40004400
 8004b54:	40004800 	.word	0x40004800
 8004b58:	40004c00 	.word	0x40004c00
 8004b5c:	40005000 	.word	0x40005000
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4aae      	ldr	r2, [pc, #696]	; (8004e24 <UART_SetConfig+0x5bc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 8097 	bne.w	8004ca0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d823      	bhi.n	8004bc2 <UART_SetConfig+0x35a>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x318>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bc3 	.word	0x08004bc3
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bc3 	.word	0x08004bc3
 8004b90:	08004bb3 	.word	0x08004bb3
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004bc3 	.word	0x08004bc3
 8004b9c:	08004bc3 	.word	0x08004bc3
 8004ba0:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7ff fb50 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e010      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb0:	e00d      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7ff fadb 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb8:	e009      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc0:	e005      	b.n	8004bce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8130 	beq.w	8004e36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	4a94      	ldr	r2, [pc, #592]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d305      	bcc.n	8004c06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c0c:	e113      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2200      	movs	r2, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	60fa      	str	r2, [r7, #12]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	4a84      	ldr	r2, [pc, #528]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2200      	movs	r2, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c30:	f7fb fb46 	bl	80002c0 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	020b      	lsls	r3, r1, #8
 8004c46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c4a:	0202      	lsls	r2, r0, #8
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	6849      	ldr	r1, [r1, #4]
 8004c50:	0849      	lsrs	r1, r1, #1
 8004c52:	2000      	movs	r0, #0
 8004c54:	460c      	mov	r4, r1
 8004c56:	4605      	mov	r5, r0
 8004c58:	eb12 0804 	adds.w	r8, r2, r4
 8004c5c:	eb43 0905 	adc.w	r9, r3, r5
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	469a      	mov	sl, r3
 8004c68:	4693      	mov	fp, r2
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	465b      	mov	r3, fp
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fb25 	bl	80002c0 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c84:	d308      	bcc.n	8004c98 <UART_SetConfig+0x430>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8c:	d204      	bcs.n	8004c98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e0ce      	b.n	8004e36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c9e:	e0ca      	b.n	8004e36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d166      	bne.n	8004d78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d827      	bhi.n	8004d02 <UART_SetConfig+0x49a>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x450>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7ff fab4 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce2:	e014      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7ff fac6 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cea:	e010      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b4e      	ldr	r3, [pc, #312]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf0:	e00d      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7ff fa3b 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf8:	e009      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8090 	beq.w	8004e36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	4a44      	ldr	r2, [pc, #272]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d28:	005a      	lsls	r2, r3, #1
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	441a      	add	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d916      	bls.n	8004d70 <UART_SetConfig+0x508>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d212      	bcs.n	8004d70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	8bfb      	ldrh	r3, [r7, #30]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	8bfa      	ldrh	r2, [r7, #30]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e062      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d76:	e05e      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d828      	bhi.n	8004dd2 <UART_SetConfig+0x56a>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x520>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	08004dd3 	.word	0x08004dd3
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dd3 	.word	0x08004dd3
 8004da4:	08004dd3 	.word	0x08004dd3
 8004da8:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7ff fa4c 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db2:	e014      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db4:	f7ff fa5e 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dba:	e010      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc0:	e00d      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7ff f9d3 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dd0:	e005      	b.n	8004dde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d028      	beq.n	8004e36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dee:	461a      	mov	r2, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	441a      	add	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d910      	bls.n	8004e30 <UART_SetConfig+0x5c8>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d20c      	bcs.n	8004e30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x5ce>
 8004e22:	bf00      	nop
 8004e24:	40008000 	.word	0x40008000
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	080064a0 	.word	0x080064a0
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3730      	adds	r7, #48	; 0x30
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01a      	beq.n	8004f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5e:	d10a      	bne.n	8004f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b098      	sub	sp, #96	; 0x60
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fb4:	f7fc f87c 	bl	80010b0 <HAL_GetTick>
 8004fb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d12f      	bne.n	8005028 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f88e 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d022      	beq.n	8005028 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e063      	b.n	80050f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d149      	bne.n	80050ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503e:	2200      	movs	r2, #0
 8005040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f857 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d03c      	beq.n	80050ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	623b      	str	r3, [r7, #32]
   return(result);
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
 8005070:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	60fb      	str	r3, [r7, #12]
   return(result);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a2:	61fa      	str	r2, [r7, #28]
 80050a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	617b      	str	r3, [r7, #20]
   return(result);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e012      	b.n	80050f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3758      	adds	r7, #88	; 0x58
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005108:	e04f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d04b      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fb ffcd 	bl	80010b0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <UART_WaitOnFlagUntilTimeout+0x30>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e04e      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d037      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d034      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d031      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d110      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2208      	movs	r2, #8
 800515a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f838 	bl	80051d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2208      	movs	r2, #8
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e029      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005184:	d111      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f81e 	bl	80051d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d0a0      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b095      	sub	sp, #84	; 0x54
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f8:	643b      	str	r3, [r7, #64]	; 0x40
 80051fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e6      	bne.n	80051da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3308      	adds	r3, #8
 8005212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	61fb      	str	r3, [r7, #28]
   return(result);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e3      	bne.n	800520c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005292:	bf00      	nop
 8005294:	3754      	adds	r7, #84	; 0x54
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e027      	b.n	8005304 <HAL_UARTEx_DisableFifoMode+0x66>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e02d      	b.n	8005384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f84f 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e02d      	b.n	8005400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f811 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005414:	2b00      	cmp	r3, #0
 8005416:	d108      	bne.n	800542a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005428:	e031      	b.n	800548e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800542a:	2308      	movs	r3, #8
 800542c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800542e:	2308      	movs	r3, #8
 8005430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0e5b      	lsrs	r3, r3, #25
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	0f5b      	lsrs	r3, r3, #29
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	7b3a      	ldrb	r2, [r7, #12]
 8005456:	4911      	ldr	r1, [pc, #68]	; (800549c <UARTEx_SetNbDataToProcess+0x94>)
 8005458:	5c8a      	ldrb	r2, [r1, r2]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800545e:	7b3a      	ldrb	r2, [r7, #12]
 8005460:	490f      	ldr	r1, [pc, #60]	; (80054a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005464:	fb93 f3f2 	sdiv	r3, r3, r2
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	7b7a      	ldrb	r2, [r7, #13]
 8005474:	4909      	ldr	r1, [pc, #36]	; (800549c <UARTEx_SetNbDataToProcess+0x94>)
 8005476:	5c8a      	ldrb	r2, [r1, r2]
 8005478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800547c:	7b7a      	ldrb	r2, [r7, #13]
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005482:	fb93 f3f2 	sdiv	r3, r3, r2
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	080064b8 	.word	0x080064b8
 80054a0:	080064c0 	.word	0x080064c0

080054a4 <rand>:
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <rand+0x5c>)
 80054a6:	b510      	push	{r4, lr}
 80054a8:	681c      	ldr	r4, [r3, #0]
 80054aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054ac:	b9b3      	cbnz	r3, 80054dc <rand+0x38>
 80054ae:	2018      	movs	r0, #24
 80054b0:	f000 fa22 	bl	80058f8 <malloc>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6320      	str	r0, [r4, #48]	; 0x30
 80054b8:	b920      	cbnz	r0, 80054c4 <rand+0x20>
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <rand+0x60>)
 80054bc:	4812      	ldr	r0, [pc, #72]	; (8005508 <rand+0x64>)
 80054be:	2152      	movs	r1, #82	; 0x52
 80054c0:	f000 f9b0 	bl	8005824 <__assert_func>
 80054c4:	4911      	ldr	r1, [pc, #68]	; (800550c <rand+0x68>)
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <rand+0x6c>)
 80054c8:	e9c0 1300 	strd	r1, r3, [r0]
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <rand+0x70>)
 80054ce:	6083      	str	r3, [r0, #8]
 80054d0:	230b      	movs	r3, #11
 80054d2:	8183      	strh	r3, [r0, #12]
 80054d4:	2100      	movs	r1, #0
 80054d6:	2001      	movs	r0, #1
 80054d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80054dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <rand+0x74>)
 80054e0:	690b      	ldr	r3, [r1, #16]
 80054e2:	694c      	ldr	r4, [r1, #20]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	; (800551c <rand+0x78>)
 80054e6:	4358      	muls	r0, r3
 80054e8:	fb02 0004 	mla	r0, r2, r4, r0
 80054ec:	fba3 3202 	umull	r3, r2, r3, r2
 80054f0:	3301      	adds	r3, #1
 80054f2:	eb40 0002 	adc.w	r0, r0, r2
 80054f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80054fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	20000064 	.word	0x20000064
 8005504:	080064c8 	.word	0x080064c8
 8005508:	080064df 	.word	0x080064df
 800550c:	abcd330e 	.word	0xabcd330e
 8005510:	e66d1234 	.word	0xe66d1234
 8005514:	0005deec 	.word	0x0005deec
 8005518:	5851f42d 	.word	0x5851f42d
 800551c:	4c957f2d 	.word	0x4c957f2d

08005520 <std>:
 8005520:	2300      	movs	r3, #0
 8005522:	b510      	push	{r4, lr}
 8005524:	4604      	mov	r4, r0
 8005526:	e9c0 3300 	strd	r3, r3, [r0]
 800552a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800552e:	6083      	str	r3, [r0, #8]
 8005530:	8181      	strh	r1, [r0, #12]
 8005532:	6643      	str	r3, [r0, #100]	; 0x64
 8005534:	81c2      	strh	r2, [r0, #14]
 8005536:	6183      	str	r3, [r0, #24]
 8005538:	4619      	mov	r1, r3
 800553a:	2208      	movs	r2, #8
 800553c:	305c      	adds	r0, #92	; 0x5c
 800553e:	f000 f8f4 	bl	800572a <memset>
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <std+0x58>)
 8005544:	6263      	str	r3, [r4, #36]	; 0x24
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <std+0x5c>)
 8005548:	62a3      	str	r3, [r4, #40]	; 0x28
 800554a:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <std+0x60>)
 800554c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <std+0x64>)
 8005550:	6323      	str	r3, [r4, #48]	; 0x30
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <std+0x68>)
 8005554:	6224      	str	r4, [r4, #32]
 8005556:	429c      	cmp	r4, r3
 8005558:	d006      	beq.n	8005568 <std+0x48>
 800555a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800555e:	4294      	cmp	r4, r2
 8005560:	d002      	beq.n	8005568 <std+0x48>
 8005562:	33d0      	adds	r3, #208	; 0xd0
 8005564:	429c      	cmp	r4, r3
 8005566:	d105      	bne.n	8005574 <std+0x54>
 8005568:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005570:	f000 b954 	b.w	800581c <__retarget_lock_init_recursive>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	bf00      	nop
 8005578:	080056a5 	.word	0x080056a5
 800557c:	080056c7 	.word	0x080056c7
 8005580:	080056ff 	.word	0x080056ff
 8005584:	08005723 	.word	0x08005723
 8005588:	20000244 	.word	0x20000244

0800558c <stdio_exit_handler>:
 800558c:	4a02      	ldr	r2, [pc, #8]	; (8005598 <stdio_exit_handler+0xc>)
 800558e:	4903      	ldr	r1, [pc, #12]	; (800559c <stdio_exit_handler+0x10>)
 8005590:	4803      	ldr	r0, [pc, #12]	; (80055a0 <stdio_exit_handler+0x14>)
 8005592:	f000 b869 	b.w	8005668 <_fwalk_sglue>
 8005596:	bf00      	nop
 8005598:	2000000c 	.word	0x2000000c
 800559c:	08005b6d 	.word	0x08005b6d
 80055a0:	20000018 	.word	0x20000018

080055a4 <cleanup_stdio>:
 80055a4:	6841      	ldr	r1, [r0, #4]
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <cleanup_stdio+0x34>)
 80055a8:	4299      	cmp	r1, r3
 80055aa:	b510      	push	{r4, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	d001      	beq.n	80055b4 <cleanup_stdio+0x10>
 80055b0:	f000 fadc 	bl	8005b6c <_fflush_r>
 80055b4:	68a1      	ldr	r1, [r4, #8]
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <cleanup_stdio+0x38>)
 80055b8:	4299      	cmp	r1, r3
 80055ba:	d002      	beq.n	80055c2 <cleanup_stdio+0x1e>
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fad5 	bl	8005b6c <_fflush_r>
 80055c2:	68e1      	ldr	r1, [r4, #12]
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <cleanup_stdio+0x3c>)
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d004      	beq.n	80055d4 <cleanup_stdio+0x30>
 80055ca:	4620      	mov	r0, r4
 80055cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d0:	f000 bacc 	b.w	8005b6c <_fflush_r>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	bf00      	nop
 80055d8:	20000244 	.word	0x20000244
 80055dc:	200002ac 	.word	0x200002ac
 80055e0:	20000314 	.word	0x20000314

080055e4 <global_stdio_init.part.0>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <global_stdio_init.part.0+0x30>)
 80055e8:	4c0b      	ldr	r4, [pc, #44]	; (8005618 <global_stdio_init.part.0+0x34>)
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <global_stdio_init.part.0+0x38>)
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	4620      	mov	r0, r4
 80055f0:	2200      	movs	r2, #0
 80055f2:	2104      	movs	r1, #4
 80055f4:	f7ff ff94 	bl	8005520 <std>
 80055f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055fc:	2201      	movs	r2, #1
 80055fe:	2109      	movs	r1, #9
 8005600:	f7ff ff8e 	bl	8005520 <std>
 8005604:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005608:	2202      	movs	r2, #2
 800560a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560e:	2112      	movs	r1, #18
 8005610:	f7ff bf86 	b.w	8005520 <std>
 8005614:	2000037c 	.word	0x2000037c
 8005618:	20000244 	.word	0x20000244
 800561c:	0800558d 	.word	0x0800558d

08005620 <__sfp_lock_acquire>:
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <__sfp_lock_acquire+0x8>)
 8005622:	f000 b8fc 	b.w	800581e <__retarget_lock_acquire_recursive>
 8005626:	bf00      	nop
 8005628:	20000385 	.word	0x20000385

0800562c <__sfp_lock_release>:
 800562c:	4801      	ldr	r0, [pc, #4]	; (8005634 <__sfp_lock_release+0x8>)
 800562e:	f000 b8f7 	b.w	8005820 <__retarget_lock_release_recursive>
 8005632:	bf00      	nop
 8005634:	20000385 	.word	0x20000385

08005638 <__sinit>:
 8005638:	b510      	push	{r4, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	f7ff fff0 	bl	8005620 <__sfp_lock_acquire>
 8005640:	6a23      	ldr	r3, [r4, #32]
 8005642:	b11b      	cbz	r3, 800564c <__sinit+0x14>
 8005644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005648:	f7ff bff0 	b.w	800562c <__sfp_lock_release>
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <__sinit+0x28>)
 800564e:	6223      	str	r3, [r4, #32]
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__sinit+0x2c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f5      	bne.n	8005644 <__sinit+0xc>
 8005658:	f7ff ffc4 	bl	80055e4 <global_stdio_init.part.0>
 800565c:	e7f2      	b.n	8005644 <__sinit+0xc>
 800565e:	bf00      	nop
 8005660:	080055a5 	.word	0x080055a5
 8005664:	2000037c 	.word	0x2000037c

08005668 <_fwalk_sglue>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	4607      	mov	r7, r0
 800566e:	4688      	mov	r8, r1
 8005670:	4614      	mov	r4, r2
 8005672:	2600      	movs	r6, #0
 8005674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005678:	f1b9 0901 	subs.w	r9, r9, #1
 800567c:	d505      	bpl.n	800568a <_fwalk_sglue+0x22>
 800567e:	6824      	ldr	r4, [r4, #0]
 8005680:	2c00      	cmp	r4, #0
 8005682:	d1f7      	bne.n	8005674 <_fwalk_sglue+0xc>
 8005684:	4630      	mov	r0, r6
 8005686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d907      	bls.n	80056a0 <_fwalk_sglue+0x38>
 8005690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005694:	3301      	adds	r3, #1
 8005696:	d003      	beq.n	80056a0 <_fwalk_sglue+0x38>
 8005698:	4629      	mov	r1, r5
 800569a:	4638      	mov	r0, r7
 800569c:	47c0      	blx	r8
 800569e:	4306      	orrs	r6, r0
 80056a0:	3568      	adds	r5, #104	; 0x68
 80056a2:	e7e9      	b.n	8005678 <_fwalk_sglue+0x10>

080056a4 <__sread>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	f000 f868 	bl	8005780 <_read_r>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	bfab      	itete	ge
 80056b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056b6:	89a3      	ldrhlt	r3, [r4, #12]
 80056b8:	181b      	addge	r3, r3, r0
 80056ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056be:	bfac      	ite	ge
 80056c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056c2:	81a3      	strhlt	r3, [r4, #12]
 80056c4:	bd10      	pop	{r4, pc}

080056c6 <__swrite>:
 80056c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ca:	461f      	mov	r7, r3
 80056cc:	898b      	ldrh	r3, [r1, #12]
 80056ce:	05db      	lsls	r3, r3, #23
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	4616      	mov	r6, r2
 80056d6:	d505      	bpl.n	80056e4 <__swrite+0x1e>
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2302      	movs	r3, #2
 80056de:	2200      	movs	r2, #0
 80056e0:	f000 f83c 	bl	800575c <_lseek_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	4628      	mov	r0, r5
 80056f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	f000 b853 	b.w	80057a4 <_write_r>

080056fe <__sseek>:
 80056fe:	b510      	push	{r4, lr}
 8005700:	460c      	mov	r4, r1
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 f829 	bl	800575c <_lseek_r>
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	bf15      	itete	ne
 8005710:	6560      	strne	r0, [r4, #84]	; 0x54
 8005712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800571a:	81a3      	strheq	r3, [r4, #12]
 800571c:	bf18      	it	ne
 800571e:	81a3      	strhne	r3, [r4, #12]
 8005720:	bd10      	pop	{r4, pc}

08005722 <__sclose>:
 8005722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005726:	f000 b809 	b.w	800573c <_close_r>

0800572a <memset>:
 800572a:	4402      	add	r2, r0
 800572c:	4603      	mov	r3, r0
 800572e:	4293      	cmp	r3, r2
 8005730:	d100      	bne.n	8005734 <memset+0xa>
 8005732:	4770      	bx	lr
 8005734:	f803 1b01 	strb.w	r1, [r3], #1
 8005738:	e7f9      	b.n	800572e <memset+0x4>
	...

0800573c <_close_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_close_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fba7 	bl	8000e9a <_close>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_close_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_close_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000380 	.word	0x20000380

0800575c <_lseek_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	; (800577c <_lseek_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fb fbbc 	bl	8000ee8 <_lseek>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_lseek_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_lseek_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000380 	.word	0x20000380

08005780 <_read_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_read_r+0x20>)
 8005784:	4604      	mov	r4, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fb fb4a 	bl	8000e28 <_read>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_read_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_read_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000380 	.word	0x20000380

080057a4 <_write_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d07      	ldr	r5, [pc, #28]	; (80057c4 <_write_r+0x20>)
 80057a8:	4604      	mov	r4, r0
 80057aa:	4608      	mov	r0, r1
 80057ac:	4611      	mov	r1, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fb fb55 	bl	8000e62 <_write>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_write_r+0x1e>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_write_r+0x1e>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20000380 	.word	0x20000380

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000064 	.word	0x20000064

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 fe42 	bl	8006470 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	080065b0 	.word	0x080065b0
 8005810:	080065b0 	.word	0x080065b0
 8005814:	080065b0 	.word	0x080065b0
 8005818:	080065b4 	.word	0x080065b4

0800581c <__retarget_lock_init_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_acquire_recursive>:
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_release_recursive>:
 8005820:	4770      	bx	lr
	...

08005824 <__assert_func>:
 8005824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005826:	4614      	mov	r4, r2
 8005828:	461a      	mov	r2, r3
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <__assert_func+0x2c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4605      	mov	r5, r0
 8005830:	68d8      	ldr	r0, [r3, #12]
 8005832:	b14c      	cbz	r4, 8005848 <__assert_func+0x24>
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <__assert_func+0x30>)
 8005836:	9100      	str	r1, [sp, #0]
 8005838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800583c:	4906      	ldr	r1, [pc, #24]	; (8005858 <__assert_func+0x34>)
 800583e:	462b      	mov	r3, r5
 8005840:	f000 f9bc 	bl	8005bbc <fiprintf>
 8005844:	f000 f9dc 	bl	8005c00 <abort>
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <__assert_func+0x38>)
 800584a:	461c      	mov	r4, r3
 800584c:	e7f3      	b.n	8005836 <__assert_func+0x12>
 800584e:	bf00      	nop
 8005850:	20000064 	.word	0x20000064
 8005854:	08006537 	.word	0x08006537
 8005858:	08006544 	.word	0x08006544
 800585c:	08006572 	.word	0x08006572

08005860 <_free_r>:
 8005860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005862:	2900      	cmp	r1, #0
 8005864:	d044      	beq.n	80058f0 <_free_r+0x90>
 8005866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586a:	9001      	str	r0, [sp, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f1a1 0404 	sub.w	r4, r1, #4
 8005872:	bfb8      	it	lt
 8005874:	18e4      	addlt	r4, r4, r3
 8005876:	f000 f8e7 	bl	8005a48 <__malloc_lock>
 800587a:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <_free_r+0x94>)
 800587c:	9801      	ldr	r0, [sp, #4]
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	b933      	cbnz	r3, 8005890 <_free_r+0x30>
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	b003      	add	sp, #12
 8005888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800588c:	f000 b8e2 	b.w	8005a54 <__malloc_unlock>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d908      	bls.n	80058a6 <_free_r+0x46>
 8005894:	6825      	ldr	r5, [r4, #0]
 8005896:	1961      	adds	r1, r4, r5
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1949      	addeq	r1, r1, r5
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	e7ed      	b.n	8005882 <_free_r+0x22>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x50>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x46>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1855      	adds	r5, r2, r1
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x70>
 80058b8:	6824      	ldr	r4, [r4, #0]
 80058ba:	4421      	add	r1, r4
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	42a3      	cmp	r3, r4
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1e0      	bne.n	8005886 <_free_r+0x26>
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	440c      	add	r4, r1
 80058cc:	6014      	str	r4, [r2, #0]
 80058ce:	e7da      	b.n	8005886 <_free_r+0x26>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x78>
 80058d2:	230c      	movs	r3, #12
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	e7d6      	b.n	8005886 <_free_r+0x26>
 80058d8:	6825      	ldr	r5, [r4, #0]
 80058da:	1961      	adds	r1, r4, r5
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1949      	addeq	r1, r1, r5
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7ca      	b.n	8005886 <_free_r+0x26>
 80058f0:	b003      	add	sp, #12
 80058f2:	bd30      	pop	{r4, r5, pc}
 80058f4:	20000388 	.word	0x20000388

080058f8 <malloc>:
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <malloc+0xc>)
 80058fa:	4601      	mov	r1, r0
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f000 b823 	b.w	8005948 <_malloc_r>
 8005902:	bf00      	nop
 8005904:	20000064 	.word	0x20000064

08005908 <sbrk_aligned>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4e0e      	ldr	r6, [pc, #56]	; (8005944 <sbrk_aligned+0x3c>)
 800590c:	460c      	mov	r4, r1
 800590e:	6831      	ldr	r1, [r6, #0]
 8005910:	4605      	mov	r5, r0
 8005912:	b911      	cbnz	r1, 800591a <sbrk_aligned+0x12>
 8005914:	f000 f964 	bl	8005be0 <_sbrk_r>
 8005918:	6030      	str	r0, [r6, #0]
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f95f 	bl	8005be0 <_sbrk_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d00a      	beq.n	800593c <sbrk_aligned+0x34>
 8005926:	1cc4      	adds	r4, r0, #3
 8005928:	f024 0403 	bic.w	r4, r4, #3
 800592c:	42a0      	cmp	r0, r4
 800592e:	d007      	beq.n	8005940 <sbrk_aligned+0x38>
 8005930:	1a21      	subs	r1, r4, r0
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f954 	bl	8005be0 <_sbrk_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d101      	bne.n	8005940 <sbrk_aligned+0x38>
 800593c:	f04f 34ff 	mov.w	r4, #4294967295
 8005940:	4620      	mov	r0, r4
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	2000038c 	.word	0x2000038c

08005948 <_malloc_r>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	1ccd      	adds	r5, r1, #3
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	2d00      	cmp	r5, #0
 800595c:	4607      	mov	r7, r0
 800595e:	db01      	blt.n	8005964 <_malloc_r+0x1c>
 8005960:	42a9      	cmp	r1, r5
 8005962:	d905      	bls.n	8005970 <_malloc_r+0x28>
 8005964:	230c      	movs	r3, #12
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	2600      	movs	r6, #0
 800596a:	4630      	mov	r0, r6
 800596c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a44 <_malloc_r+0xfc>
 8005974:	f000 f868 	bl	8005a48 <__malloc_lock>
 8005978:	f8d8 3000 	ldr.w	r3, [r8]
 800597c:	461c      	mov	r4, r3
 800597e:	bb5c      	cbnz	r4, 80059d8 <_malloc_r+0x90>
 8005980:	4629      	mov	r1, r5
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff ffc0 	bl	8005908 <sbrk_aligned>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	4604      	mov	r4, r0
 800598c:	d155      	bne.n	8005a3a <_malloc_r+0xf2>
 800598e:	f8d8 4000 	ldr.w	r4, [r8]
 8005992:	4626      	mov	r6, r4
 8005994:	2e00      	cmp	r6, #0
 8005996:	d145      	bne.n	8005a24 <_malloc_r+0xdc>
 8005998:	2c00      	cmp	r4, #0
 800599a:	d048      	beq.n	8005a2e <_malloc_r+0xe6>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	4631      	mov	r1, r6
 80059a0:	4638      	mov	r0, r7
 80059a2:	eb04 0903 	add.w	r9, r4, r3
 80059a6:	f000 f91b 	bl	8005be0 <_sbrk_r>
 80059aa:	4581      	cmp	r9, r0
 80059ac:	d13f      	bne.n	8005a2e <_malloc_r+0xe6>
 80059ae:	6821      	ldr	r1, [r4, #0]
 80059b0:	1a6d      	subs	r5, r5, r1
 80059b2:	4629      	mov	r1, r5
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ffa7 	bl	8005908 <sbrk_aligned>
 80059ba:	3001      	adds	r0, #1
 80059bc:	d037      	beq.n	8005a2e <_malloc_r+0xe6>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	442b      	add	r3, r5
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	f8d8 3000 	ldr.w	r3, [r8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d038      	beq.n	8005a3e <_malloc_r+0xf6>
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	42a2      	cmp	r2, r4
 80059d0:	d12b      	bne.n	8005a2a <_malloc_r+0xe2>
 80059d2:	2200      	movs	r2, #0
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	e00f      	b.n	80059f8 <_malloc_r+0xb0>
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	1b52      	subs	r2, r2, r5
 80059dc:	d41f      	bmi.n	8005a1e <_malloc_r+0xd6>
 80059de:	2a0b      	cmp	r2, #11
 80059e0:	d917      	bls.n	8005a12 <_malloc_r+0xca>
 80059e2:	1961      	adds	r1, r4, r5
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	6025      	str	r5, [r4, #0]
 80059e8:	bf18      	it	ne
 80059ea:	6059      	strne	r1, [r3, #4]
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	bf08      	it	eq
 80059f0:	f8c8 1000 	streq.w	r1, [r8]
 80059f4:	5162      	str	r2, [r4, r5]
 80059f6:	604b      	str	r3, [r1, #4]
 80059f8:	4638      	mov	r0, r7
 80059fa:	f104 060b 	add.w	r6, r4, #11
 80059fe:	f000 f829 	bl	8005a54 <__malloc_unlock>
 8005a02:	f026 0607 	bic.w	r6, r6, #7
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	1af2      	subs	r2, r6, r3
 8005a0a:	d0ae      	beq.n	800596a <_malloc_r+0x22>
 8005a0c:	1b9b      	subs	r3, r3, r6
 8005a0e:	50a3      	str	r3, [r4, r2]
 8005a10:	e7ab      	b.n	800596a <_malloc_r+0x22>
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	6862      	ldr	r2, [r4, #4]
 8005a16:	d1dd      	bne.n	80059d4 <_malloc_r+0x8c>
 8005a18:	f8c8 2000 	str.w	r2, [r8]
 8005a1c:	e7ec      	b.n	80059f8 <_malloc_r+0xb0>
 8005a1e:	4623      	mov	r3, r4
 8005a20:	6864      	ldr	r4, [r4, #4]
 8005a22:	e7ac      	b.n	800597e <_malloc_r+0x36>
 8005a24:	4634      	mov	r4, r6
 8005a26:	6876      	ldr	r6, [r6, #4]
 8005a28:	e7b4      	b.n	8005994 <_malloc_r+0x4c>
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	e7cc      	b.n	80059c8 <_malloc_r+0x80>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4638      	mov	r0, r7
 8005a34:	f000 f80e 	bl	8005a54 <__malloc_unlock>
 8005a38:	e797      	b.n	800596a <_malloc_r+0x22>
 8005a3a:	6025      	str	r5, [r4, #0]
 8005a3c:	e7dc      	b.n	80059f8 <_malloc_r+0xb0>
 8005a3e:	605b      	str	r3, [r3, #4]
 8005a40:	deff      	udf	#255	; 0xff
 8005a42:	bf00      	nop
 8005a44:	20000388 	.word	0x20000388

08005a48 <__malloc_lock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__malloc_lock+0x8>)
 8005a4a:	f7ff bee8 	b.w	800581e <__retarget_lock_acquire_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000384 	.word	0x20000384

08005a54 <__malloc_unlock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__malloc_unlock+0x8>)
 8005a56:	f7ff bee3 	b.w	8005820 <__retarget_lock_release_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000384 	.word	0x20000384

08005a60 <__sflush_r>:
 8005a60:	898a      	ldrh	r2, [r1, #12]
 8005a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a66:	4605      	mov	r5, r0
 8005a68:	0710      	lsls	r0, r2, #28
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	d458      	bmi.n	8005b20 <__sflush_r+0xc0>
 8005a6e:	684b      	ldr	r3, [r1, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dc05      	bgt.n	8005a80 <__sflush_r+0x20>
 8005a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dc02      	bgt.n	8005a80 <__sflush_r+0x20>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d0f9      	beq.n	8005a7a <__sflush_r+0x1a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a8c:	682f      	ldr	r7, [r5, #0]
 8005a8e:	6a21      	ldr	r1, [r4, #32]
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	d032      	beq.n	8005afa <__sflush_r+0x9a>
 8005a94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	075a      	lsls	r2, r3, #29
 8005a9a:	d505      	bpl.n	8005aa8 <__sflush_r+0x48>
 8005a9c:	6863      	ldr	r3, [r4, #4]
 8005a9e:	1ac0      	subs	r0, r0, r3
 8005aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aa2:	b10b      	cbz	r3, 8005aa8 <__sflush_r+0x48>
 8005aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aa6:	1ac0      	subs	r0, r0, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aae:	6a21      	ldr	r1, [r4, #32]
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b0      	blx	r6
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	d106      	bne.n	8005ac8 <__sflush_r+0x68>
 8005aba:	6829      	ldr	r1, [r5, #0]
 8005abc:	291d      	cmp	r1, #29
 8005abe:	d82b      	bhi.n	8005b18 <__sflush_r+0xb8>
 8005ac0:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <__sflush_r+0x108>)
 8005ac2:	410a      	asrs	r2, r1
 8005ac4:	07d6      	lsls	r6, r2, #31
 8005ac6:	d427      	bmi.n	8005b18 <__sflush_r+0xb8>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	6062      	str	r2, [r4, #4]
 8005acc:	04d9      	lsls	r1, r3, #19
 8005ace:	6922      	ldr	r2, [r4, #16]
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	d504      	bpl.n	8005ade <__sflush_r+0x7e>
 8005ad4:	1c42      	adds	r2, r0, #1
 8005ad6:	d101      	bne.n	8005adc <__sflush_r+0x7c>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b903      	cbnz	r3, 8005ade <__sflush_r+0x7e>
 8005adc:	6560      	str	r0, [r4, #84]	; 0x54
 8005ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ae0:	602f      	str	r7, [r5, #0]
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	d0c9      	beq.n	8005a7a <__sflush_r+0x1a>
 8005ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d002      	beq.n	8005af4 <__sflush_r+0x94>
 8005aee:	4628      	mov	r0, r5
 8005af0:	f7ff feb6 	bl	8005860 <_free_r>
 8005af4:	2000      	movs	r0, #0
 8005af6:	6360      	str	r0, [r4, #52]	; 0x34
 8005af8:	e7c0      	b.n	8005a7c <__sflush_r+0x1c>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b0      	blx	r6
 8005b00:	1c41      	adds	r1, r0, #1
 8005b02:	d1c8      	bne.n	8005a96 <__sflush_r+0x36>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0c5      	beq.n	8005a96 <__sflush_r+0x36>
 8005b0a:	2b1d      	cmp	r3, #29
 8005b0c:	d001      	beq.n	8005b12 <__sflush_r+0xb2>
 8005b0e:	2b16      	cmp	r3, #22
 8005b10:	d101      	bne.n	8005b16 <__sflush_r+0xb6>
 8005b12:	602f      	str	r7, [r5, #0]
 8005b14:	e7b1      	b.n	8005a7a <__sflush_r+0x1a>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	e7ad      	b.n	8005a7c <__sflush_r+0x1c>
 8005b20:	690f      	ldr	r7, [r1, #16]
 8005b22:	2f00      	cmp	r7, #0
 8005b24:	d0a9      	beq.n	8005a7a <__sflush_r+0x1a>
 8005b26:	0793      	lsls	r3, r2, #30
 8005b28:	680e      	ldr	r6, [r1, #0]
 8005b2a:	bf08      	it	eq
 8005b2c:	694b      	ldreq	r3, [r1, #20]
 8005b2e:	600f      	str	r7, [r1, #0]
 8005b30:	bf18      	it	ne
 8005b32:	2300      	movne	r3, #0
 8005b34:	eba6 0807 	sub.w	r8, r6, r7
 8005b38:	608b      	str	r3, [r1, #8]
 8005b3a:	f1b8 0f00 	cmp.w	r8, #0
 8005b3e:	dd9c      	ble.n	8005a7a <__sflush_r+0x1a>
 8005b40:	6a21      	ldr	r1, [r4, #32]
 8005b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b44:	4643      	mov	r3, r8
 8005b46:	463a      	mov	r2, r7
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b0      	blx	r6
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	dc06      	bgt.n	8005b5e <__sflush_r+0xfe>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e78e      	b.n	8005a7c <__sflush_r+0x1c>
 8005b5e:	4407      	add	r7, r0
 8005b60:	eba8 0800 	sub.w	r8, r8, r0
 8005b64:	e7e9      	b.n	8005b3a <__sflush_r+0xda>
 8005b66:	bf00      	nop
 8005b68:	dfbffffe 	.word	0xdfbffffe

08005b6c <_fflush_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	4605      	mov	r5, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b913      	cbnz	r3, 8005b7c <_fflush_r+0x10>
 8005b76:	2500      	movs	r5, #0
 8005b78:	4628      	mov	r0, r5
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	b118      	cbz	r0, 8005b86 <_fflush_r+0x1a>
 8005b7e:	6a03      	ldr	r3, [r0, #32]
 8005b80:	b90b      	cbnz	r3, 8005b86 <_fflush_r+0x1a>
 8005b82:	f7ff fd59 	bl	8005638 <__sinit>
 8005b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f3      	beq.n	8005b76 <_fflush_r+0xa>
 8005b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	d404      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b94:	0599      	lsls	r1, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b9a:	f7ff fe40 	bl	800581e <__retarget_lock_acquire_recursive>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f7ff ff5d 	bl	8005a60 <__sflush_r>
 8005ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ba8:	07da      	lsls	r2, r3, #31
 8005baa:	4605      	mov	r5, r0
 8005bac:	d4e4      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	d4e1      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb6:	f7ff fe33 	bl	8005820 <__retarget_lock_release_recursive>
 8005bba:	e7dd      	b.n	8005b78 <_fflush_r+0xc>

08005bbc <fiprintf>:
 8005bbc:	b40e      	push	{r1, r2, r3}
 8005bbe:	b503      	push	{r0, r1, lr}
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	ab03      	add	r3, sp, #12
 8005bc4:	4805      	ldr	r0, [pc, #20]	; (8005bdc <fiprintf+0x20>)
 8005bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bca:	6800      	ldr	r0, [r0, #0]
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	f000 f847 	bl	8005c60 <_vfiprintf_r>
 8005bd2:	b002      	add	sp, #8
 8005bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd8:	b003      	add	sp, #12
 8005bda:	4770      	bx	lr
 8005bdc:	20000064 	.word	0x20000064

08005be0 <_sbrk_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d06      	ldr	r5, [pc, #24]	; (8005bfc <_sbrk_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fb f98a 	bl	8000f04 <_sbrk>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_sbrk_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_sbrk_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20000380 	.word	0x20000380

08005c00 <abort>:
 8005c00:	b508      	push	{r3, lr}
 8005c02:	2006      	movs	r0, #6
 8005c04:	f000 fb94 	bl	8006330 <raise>
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f7fb f903 	bl	8000e14 <_exit>

08005c0e <__sfputc_r>:
 8005c0e:	6893      	ldr	r3, [r2, #8]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	b410      	push	{r4}
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	da08      	bge.n	8005c2c <__sfputc_r+0x1e>
 8005c1a:	6994      	ldr	r4, [r2, #24]
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	db01      	blt.n	8005c24 <__sfputc_r+0x16>
 8005c20:	290a      	cmp	r1, #10
 8005c22:	d103      	bne.n	8005c2c <__sfputc_r+0x1e>
 8005c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c28:	f000 bac4 	b.w	80061b4 <__swbuf_r>
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	1c58      	adds	r0, r3, #1
 8005c30:	6010      	str	r0, [r2, #0]
 8005c32:	7019      	strb	r1, [r3, #0]
 8005c34:	4608      	mov	r0, r1
 8005c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <__sfputs_r>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460f      	mov	r7, r1
 8005c42:	4614      	mov	r4, r2
 8005c44:	18d5      	adds	r5, r2, r3
 8005c46:	42ac      	cmp	r4, r5
 8005c48:	d101      	bne.n	8005c4e <__sfputs_r+0x12>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e007      	b.n	8005c5e <__sfputs_r+0x22>
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	463a      	mov	r2, r7
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff ffda 	bl	8005c0e <__sfputc_r>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	d1f3      	bne.n	8005c46 <__sfputs_r+0xa>
 8005c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c60 <_vfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	460d      	mov	r5, r1
 8005c66:	b09d      	sub	sp, #116	; 0x74
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4698      	mov	r8, r3
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <_vfiprintf_r+0x18>
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	b90b      	cbnz	r3, 8005c78 <_vfiprintf_r+0x18>
 8005c74:	f7ff fce0 	bl	8005638 <__sinit>
 8005c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c7a:	07d9      	lsls	r1, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	059a      	lsls	r2, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c86:	f7ff fdca 	bl	800581e <__retarget_lock_acquire_recursive>
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	071b      	lsls	r3, r3, #28
 8005c8e:	d501      	bpl.n	8005c94 <_vfiprintf_r+0x34>
 8005c90:	692b      	ldr	r3, [r5, #16]
 8005c92:	b99b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x5c>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 faca 	bl	8006230 <__swsetup_r>
 8005c9c:	b170      	cbz	r0, 8005cbc <_vfiprintf_r+0x5c>
 8005c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca0:	07dc      	lsls	r4, r3, #31
 8005ca2:	d504      	bpl.n	8005cae <_vfiprintf_r+0x4e>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b01d      	add	sp, #116	; 0x74
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	0598      	lsls	r0, r3, #22
 8005cb2:	d4f7      	bmi.n	8005ca4 <_vfiprintf_r+0x44>
 8005cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cb6:	f7ff fdb3 	bl	8005820 <__retarget_lock_release_recursive>
 8005cba:	e7f3      	b.n	8005ca4 <_vfiprintf_r+0x44>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cca:	2330      	movs	r3, #48	; 0x30
 8005ccc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e80 <_vfiprintf_r+0x220>
 8005cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd4:	f04f 0901 	mov.w	r9, #1
 8005cd8:	4623      	mov	r3, r4
 8005cda:	469a      	mov	sl, r3
 8005cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_vfiprintf_r+0x86>
 8005ce2:	2a25      	cmp	r2, #37	; 0x25
 8005ce4:	d1f9      	bne.n	8005cda <_vfiprintf_r+0x7a>
 8005ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cea:	d00b      	beq.n	8005d04 <_vfiprintf_r+0xa4>
 8005cec:	465b      	mov	r3, fp
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffa2 	bl	8005c3c <__sfputs_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f000 80a9 	beq.w	8005e50 <_vfiprintf_r+0x1f0>
 8005cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d00:	445a      	add	r2, fp
 8005d02:	9209      	str	r2, [sp, #36]	; 0x24
 8005d04:	f89a 3000 	ldrb.w	r3, [sl]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80a1 	beq.w	8005e50 <_vfiprintf_r+0x1f0>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d18:	f10a 0a01 	add.w	sl, sl, #1
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d24:	931a      	str	r3, [sp, #104]	; 0x68
 8005d26:	4654      	mov	r4, sl
 8005d28:	2205      	movs	r2, #5
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	4854      	ldr	r0, [pc, #336]	; (8005e80 <_vfiprintf_r+0x220>)
 8005d30:	f7fa fa76 	bl	8000220 <memchr>
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	b9d8      	cbnz	r0, 8005d70 <_vfiprintf_r+0x110>
 8005d38:	06d1      	lsls	r1, r2, #27
 8005d3a:	bf44      	itt	mi
 8005d3c:	2320      	movmi	r3, #32
 8005d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d42:	0713      	lsls	r3, r2, #28
 8005d44:	bf44      	itt	mi
 8005d46:	232b      	movmi	r3, #43	; 0x2b
 8005d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d50:	2b2a      	cmp	r3, #42	; 0x2a
 8005d52:	d015      	beq.n	8005d80 <_vfiprintf_r+0x120>
 8005d54:	9a07      	ldr	r2, [sp, #28]
 8005d56:	4654      	mov	r4, sl
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f04f 0c0a 	mov.w	ip, #10
 8005d5e:	4621      	mov	r1, r4
 8005d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d64:	3b30      	subs	r3, #48	; 0x30
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d94d      	bls.n	8005e06 <_vfiprintf_r+0x1a6>
 8005d6a:	b1b0      	cbz	r0, 8005d9a <_vfiprintf_r+0x13a>
 8005d6c:	9207      	str	r2, [sp, #28]
 8005d6e:	e014      	b.n	8005d9a <_vfiprintf_r+0x13a>
 8005d70:	eba0 0308 	sub.w	r3, r0, r8
 8005d74:	fa09 f303 	lsl.w	r3, r9, r3
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	46a2      	mov	sl, r4
 8005d7e:	e7d2      	b.n	8005d26 <_vfiprintf_r+0xc6>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d19      	adds	r1, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9103      	str	r1, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbb      	ittet	lt
 8005d8c:	425b      	neglt	r3, r3
 8005d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d92:	9307      	strge	r3, [sp, #28]
 8005d94:	9307      	strlt	r3, [sp, #28]
 8005d96:	bfb8      	it	lt
 8005d98:	9204      	strlt	r2, [sp, #16]
 8005d9a:	7823      	ldrb	r3, [r4, #0]
 8005d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9e:	d10c      	bne.n	8005dba <_vfiprintf_r+0x15a>
 8005da0:	7863      	ldrb	r3, [r4, #1]
 8005da2:	2b2a      	cmp	r3, #42	; 0x2a
 8005da4:	d134      	bne.n	8005e10 <_vfiprintf_r+0x1b0>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db6:	3402      	adds	r4, #2
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e90 <_vfiprintf_r+0x230>
 8005dbe:	7821      	ldrb	r1, [r4, #0]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f7fa fa2c 	bl	8000220 <memchr>
 8005dc8:	b138      	cbz	r0, 8005dda <_vfiprintf_r+0x17a>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	eba0 000a 	sub.w	r0, r0, sl
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	4082      	lsls	r2, r0
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dde:	4829      	ldr	r0, [pc, #164]	; (8005e84 <_vfiprintf_r+0x224>)
 8005de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de4:	2206      	movs	r2, #6
 8005de6:	f7fa fa1b 	bl	8000220 <memchr>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d03f      	beq.n	8005e6e <_vfiprintf_r+0x20e>
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <_vfiprintf_r+0x228>)
 8005df0:	bb1b      	cbnz	r3, 8005e3a <_vfiprintf_r+0x1da>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	3307      	adds	r3, #7
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	443b      	add	r3, r7
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
 8005e04:	e768      	b.n	8005cd8 <_vfiprintf_r+0x78>
 8005e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e7a6      	b.n	8005d5e <_vfiprintf_r+0xfe>
 8005e10:	2300      	movs	r3, #0
 8005e12:	3401      	adds	r4, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	4619      	mov	r1, r3
 8005e18:	f04f 0c0a 	mov.w	ip, #10
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e22:	3a30      	subs	r2, #48	; 0x30
 8005e24:	2a09      	cmp	r2, #9
 8005e26:	d903      	bls.n	8005e30 <_vfiprintf_r+0x1d0>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0c6      	beq.n	8005dba <_vfiprintf_r+0x15a>
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	e7c4      	b.n	8005dba <_vfiprintf_r+0x15a>
 8005e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e34:	4604      	mov	r4, r0
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7f0      	b.n	8005e1c <_vfiprintf_r+0x1bc>
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <_vfiprintf_r+0x22c>)
 8005e42:	a904      	add	r1, sp, #16
 8005e44:	4630      	mov	r0, r6
 8005e46:	f3af 8000 	nop.w
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	1c78      	adds	r0, r7, #1
 8005e4e:	d1d6      	bne.n	8005dfe <_vfiprintf_r+0x19e>
 8005e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x202>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x202>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5e:	f7ff fcdf 	bl	8005820 <__retarget_lock_release_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	065b      	lsls	r3, r3, #25
 8005e66:	f53f af1d 	bmi.w	8005ca4 <_vfiprintf_r+0x44>
 8005e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e6c:	e71c      	b.n	8005ca8 <_vfiprintf_r+0x48>
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <_vfiprintf_r+0x22c>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f879 	bl	8005f70 <_printf_i>
 8005e7e:	e7e4      	b.n	8005e4a <_vfiprintf_r+0x1ea>
 8005e80:	08006573 	.word	0x08006573
 8005e84:	0800657d 	.word	0x0800657d
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	08005c3d 	.word	0x08005c3d
 8005e90:	08006579 	.word	0x08006579

08005e94 <_printf_common>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	4616      	mov	r6, r2
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	688a      	ldr	r2, [r1, #8]
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bfb8      	it	lt
 8005ea8:	4613      	movlt	r3, r2
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	b10a      	cbz	r2, 8005eba <_printf_common+0x26>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	0699      	lsls	r1, r3, #26
 8005ebe:	bf42      	ittt	mi
 8005ec0:	6833      	ldrmi	r3, [r6, #0]
 8005ec2:	3302      	addmi	r3, #2
 8005ec4:	6033      	strmi	r3, [r6, #0]
 8005ec6:	6825      	ldr	r5, [r4, #0]
 8005ec8:	f015 0506 	ands.w	r5, r5, #6
 8005ecc:	d106      	bne.n	8005edc <_printf_common+0x48>
 8005ece:	f104 0a19 	add.w	sl, r4, #25
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	6832      	ldr	r2, [r6, #0]
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dc26      	bgt.n	8005f2a <_printf_common+0x96>
 8005edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee0:	1e13      	subs	r3, r2, #0
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	bf18      	it	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	0692      	lsls	r2, r2, #26
 8005eea:	d42b      	bmi.n	8005f44 <_printf_common+0xb0>
 8005eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	47c0      	blx	r8
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d01e      	beq.n	8005f38 <_printf_common+0xa4>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6922      	ldr	r2, [r4, #16]
 8005efe:	f003 0306 	and.w	r3, r3, #6
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	bf02      	ittt	eq
 8005f06:	68e5      	ldreq	r5, [r4, #12]
 8005f08:	6833      	ldreq	r3, [r6, #0]
 8005f0a:	1aed      	subeq	r5, r5, r3
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	bf0c      	ite	eq
 8005f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f14:	2500      	movne	r5, #0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	bfc4      	itt	gt
 8005f1a:	1a9b      	subgt	r3, r3, r2
 8005f1c:	18ed      	addgt	r5, r5, r3
 8005f1e:	2600      	movs	r6, #0
 8005f20:	341a      	adds	r4, #26
 8005f22:	42b5      	cmp	r5, r6
 8005f24:	d11a      	bne.n	8005f5c <_printf_common+0xc8>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e008      	b.n	8005f3c <_printf_common+0xa8>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4638      	mov	r0, r7
 8005f32:	47c0      	blx	r8
 8005f34:	3001      	adds	r0, #1
 8005f36:	d103      	bne.n	8005f40 <_printf_common+0xac>
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	3501      	adds	r5, #1
 8005f42:	e7c6      	b.n	8005ed2 <_printf_common+0x3e>
 8005f44:	18e1      	adds	r1, r4, r3
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	2030      	movs	r0, #48	; 0x30
 8005f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f4e:	4422      	add	r2, r4
 8005f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f58:	3302      	adds	r3, #2
 8005f5a:	e7c7      	b.n	8005eec <_printf_common+0x58>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0e6      	beq.n	8005f38 <_printf_common+0xa4>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7d9      	b.n	8005f22 <_printf_common+0x8e>
	...

08005f70 <_printf_i>:
 8005f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	7e0f      	ldrb	r7, [r1, #24]
 8005f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f78:	2f78      	cmp	r7, #120	; 0x78
 8005f7a:	4691      	mov	r9, r2
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	469a      	mov	sl, r3
 8005f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f86:	d807      	bhi.n	8005f98 <_printf_i+0x28>
 8005f88:	2f62      	cmp	r7, #98	; 0x62
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x32>
 8005f8c:	2f00      	cmp	r7, #0
 8005f8e:	f000 80d4 	beq.w	800613a <_printf_i+0x1ca>
 8005f92:	2f58      	cmp	r7, #88	; 0x58
 8005f94:	f000 80c0 	beq.w	8006118 <_printf_i+0x1a8>
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa0:	e03a      	b.n	8006018 <_printf_i+0xa8>
 8005fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fa6:	2b15      	cmp	r3, #21
 8005fa8:	d8f6      	bhi.n	8005f98 <_printf_i+0x28>
 8005faa:	a101      	add	r1, pc, #4	; (adr r1, 8005fb0 <_printf_i+0x40>)
 8005fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb0:	08006009 	.word	0x08006009
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	08005f99 	.word	0x08005f99
 8005fbc:	08005f99 	.word	0x08005f99
 8005fc0:	08005f99 	.word	0x08005f99
 8005fc4:	08005f99 	.word	0x08005f99
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f99 	.word	0x08005f99
 8005fd0:	08005f99 	.word	0x08005f99
 8005fd4:	08005f99 	.word	0x08005f99
 8005fd8:	08005f99 	.word	0x08005f99
 8005fdc:	08006121 	.word	0x08006121
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	080060db 	.word	0x080060db
 8005fe8:	08005f99 	.word	0x08005f99
 8005fec:	08005f99 	.word	0x08005f99
 8005ff0:	08006143 	.word	0x08006143
 8005ff4:	08005f99 	.word	0x08005f99
 8005ff8:	08006049 	.word	0x08006049
 8005ffc:	08005f99 	.word	0x08005f99
 8006000:	08005f99 	.word	0x08005f99
 8006004:	080060e3 	.word	0x080060e3
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	602a      	str	r2, [r5, #0]
 8006010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006018:	2301      	movs	r3, #1
 800601a:	e09f      	b.n	800615c <_printf_i+0x1ec>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	0607      	lsls	r7, r0, #24
 8006022:	f103 0104 	add.w	r1, r3, #4
 8006026:	6029      	str	r1, [r5, #0]
 8006028:	d501      	bpl.n	800602e <_printf_i+0xbe>
 800602a:	681e      	ldr	r6, [r3, #0]
 800602c:	e003      	b.n	8006036 <_printf_i+0xc6>
 800602e:	0646      	lsls	r6, r0, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0xba>
 8006032:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006036:	2e00      	cmp	r6, #0
 8006038:	da03      	bge.n	8006042 <_printf_i+0xd2>
 800603a:	232d      	movs	r3, #45	; 0x2d
 800603c:	4276      	negs	r6, r6
 800603e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006042:	485a      	ldr	r0, [pc, #360]	; (80061ac <_printf_i+0x23c>)
 8006044:	230a      	movs	r3, #10
 8006046:	e012      	b.n	800606e <_printf_i+0xfe>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1d19      	adds	r1, r3, #4
 800604e:	6029      	str	r1, [r5, #0]
 8006050:	0605      	lsls	r5, r0, #24
 8006052:	d501      	bpl.n	8006058 <_printf_i+0xe8>
 8006054:	681e      	ldr	r6, [r3, #0]
 8006056:	e002      	b.n	800605e <_printf_i+0xee>
 8006058:	0641      	lsls	r1, r0, #25
 800605a:	d5fb      	bpl.n	8006054 <_printf_i+0xe4>
 800605c:	881e      	ldrh	r6, [r3, #0]
 800605e:	4853      	ldr	r0, [pc, #332]	; (80061ac <_printf_i+0x23c>)
 8006060:	2f6f      	cmp	r7, #111	; 0x6f
 8006062:	bf0c      	ite	eq
 8006064:	2308      	moveq	r3, #8
 8006066:	230a      	movne	r3, #10
 8006068:	2100      	movs	r1, #0
 800606a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800606e:	6865      	ldr	r5, [r4, #4]
 8006070:	60a5      	str	r5, [r4, #8]
 8006072:	2d00      	cmp	r5, #0
 8006074:	bfa2      	ittt	ge
 8006076:	6821      	ldrge	r1, [r4, #0]
 8006078:	f021 0104 	bicge.w	r1, r1, #4
 800607c:	6021      	strge	r1, [r4, #0]
 800607e:	b90e      	cbnz	r6, 8006084 <_printf_i+0x114>
 8006080:	2d00      	cmp	r5, #0
 8006082:	d04b      	beq.n	800611c <_printf_i+0x1ac>
 8006084:	4615      	mov	r5, r2
 8006086:	fbb6 f1f3 	udiv	r1, r6, r3
 800608a:	fb03 6711 	mls	r7, r3, r1, r6
 800608e:	5dc7      	ldrb	r7, [r0, r7]
 8006090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006094:	4637      	mov	r7, r6
 8006096:	42bb      	cmp	r3, r7
 8006098:	460e      	mov	r6, r1
 800609a:	d9f4      	bls.n	8006086 <_printf_i+0x116>
 800609c:	2b08      	cmp	r3, #8
 800609e:	d10b      	bne.n	80060b8 <_printf_i+0x148>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	07de      	lsls	r6, r3, #31
 80060a4:	d508      	bpl.n	80060b8 <_printf_i+0x148>
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6861      	ldr	r1, [r4, #4]
 80060aa:	4299      	cmp	r1, r3
 80060ac:	bfde      	ittt	le
 80060ae:	2330      	movle	r3, #48	; 0x30
 80060b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060b8:	1b52      	subs	r2, r2, r5
 80060ba:	6122      	str	r2, [r4, #16]
 80060bc:	f8cd a000 	str.w	sl, [sp]
 80060c0:	464b      	mov	r3, r9
 80060c2:	aa03      	add	r2, sp, #12
 80060c4:	4621      	mov	r1, r4
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7ff fee4 	bl	8005e94 <_printf_common>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d14a      	bne.n	8006166 <_printf_i+0x1f6>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	b004      	add	sp, #16
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	f043 0320 	orr.w	r3, r3, #32
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	4833      	ldr	r0, [pc, #204]	; (80061b0 <_printf_i+0x240>)
 80060e4:	2778      	movs	r7, #120	; 0x78
 80060e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	6829      	ldr	r1, [r5, #0]
 80060ee:	061f      	lsls	r7, r3, #24
 80060f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f4:	d402      	bmi.n	80060fc <_printf_i+0x18c>
 80060f6:	065f      	lsls	r7, r3, #25
 80060f8:	bf48      	it	mi
 80060fa:	b2b6      	uxthmi	r6, r6
 80060fc:	07df      	lsls	r7, r3, #31
 80060fe:	bf48      	it	mi
 8006100:	f043 0320 	orrmi.w	r3, r3, #32
 8006104:	6029      	str	r1, [r5, #0]
 8006106:	bf48      	it	mi
 8006108:	6023      	strmi	r3, [r4, #0]
 800610a:	b91e      	cbnz	r6, 8006114 <_printf_i+0x1a4>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f023 0320 	bic.w	r3, r3, #32
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	2310      	movs	r3, #16
 8006116:	e7a7      	b.n	8006068 <_printf_i+0xf8>
 8006118:	4824      	ldr	r0, [pc, #144]	; (80061ac <_printf_i+0x23c>)
 800611a:	e7e4      	b.n	80060e6 <_printf_i+0x176>
 800611c:	4615      	mov	r5, r2
 800611e:	e7bd      	b.n	800609c <_printf_i+0x12c>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	6826      	ldr	r6, [r4, #0]
 8006124:	6961      	ldr	r1, [r4, #20]
 8006126:	1d18      	adds	r0, r3, #4
 8006128:	6028      	str	r0, [r5, #0]
 800612a:	0635      	lsls	r5, r6, #24
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	d501      	bpl.n	8006134 <_printf_i+0x1c4>
 8006130:	6019      	str	r1, [r3, #0]
 8006132:	e002      	b.n	800613a <_printf_i+0x1ca>
 8006134:	0670      	lsls	r0, r6, #25
 8006136:	d5fb      	bpl.n	8006130 <_printf_i+0x1c0>
 8006138:	8019      	strh	r1, [r3, #0]
 800613a:	2300      	movs	r3, #0
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	4615      	mov	r5, r2
 8006140:	e7bc      	b.n	80060bc <_printf_i+0x14c>
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	1d1a      	adds	r2, r3, #4
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	2100      	movs	r1, #0
 800614e:	4628      	mov	r0, r5
 8006150:	f7fa f866 	bl	8000220 <memchr>
 8006154:	b108      	cbz	r0, 800615a <_printf_i+0x1ea>
 8006156:	1b40      	subs	r0, r0, r5
 8006158:	6060      	str	r0, [r4, #4]
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	6123      	str	r3, [r4, #16]
 800615e:	2300      	movs	r3, #0
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006164:	e7aa      	b.n	80060bc <_printf_i+0x14c>
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	462a      	mov	r2, r5
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	47d0      	blx	sl
 8006170:	3001      	adds	r0, #1
 8006172:	d0ad      	beq.n	80060d0 <_printf_i+0x160>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	079b      	lsls	r3, r3, #30
 8006178:	d413      	bmi.n	80061a2 <_printf_i+0x232>
 800617a:	68e0      	ldr	r0, [r4, #12]
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	4298      	cmp	r0, r3
 8006180:	bfb8      	it	lt
 8006182:	4618      	movlt	r0, r3
 8006184:	e7a6      	b.n	80060d4 <_printf_i+0x164>
 8006186:	2301      	movs	r3, #1
 8006188:	4632      	mov	r2, r6
 800618a:	4649      	mov	r1, r9
 800618c:	4640      	mov	r0, r8
 800618e:	47d0      	blx	sl
 8006190:	3001      	adds	r0, #1
 8006192:	d09d      	beq.n	80060d0 <_printf_i+0x160>
 8006194:	3501      	adds	r5, #1
 8006196:	68e3      	ldr	r3, [r4, #12]
 8006198:	9903      	ldr	r1, [sp, #12]
 800619a:	1a5b      	subs	r3, r3, r1
 800619c:	42ab      	cmp	r3, r5
 800619e:	dcf2      	bgt.n	8006186 <_printf_i+0x216>
 80061a0:	e7eb      	b.n	800617a <_printf_i+0x20a>
 80061a2:	2500      	movs	r5, #0
 80061a4:	f104 0619 	add.w	r6, r4, #25
 80061a8:	e7f5      	b.n	8006196 <_printf_i+0x226>
 80061aa:	bf00      	nop
 80061ac:	08006584 	.word	0x08006584
 80061b0:	08006595 	.word	0x08006595

080061b4 <__swbuf_r>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	460e      	mov	r6, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	4605      	mov	r5, r0
 80061bc:	b118      	cbz	r0, 80061c6 <__swbuf_r+0x12>
 80061be:	6a03      	ldr	r3, [r0, #32]
 80061c0:	b90b      	cbnz	r3, 80061c6 <__swbuf_r+0x12>
 80061c2:	f7ff fa39 	bl	8005638 <__sinit>
 80061c6:	69a3      	ldr	r3, [r4, #24]
 80061c8:	60a3      	str	r3, [r4, #8]
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	071a      	lsls	r2, r3, #28
 80061ce:	d525      	bpl.n	800621c <__swbuf_r+0x68>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	b31b      	cbz	r3, 800621c <__swbuf_r+0x68>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	6922      	ldr	r2, [r4, #16]
 80061d8:	1a98      	subs	r0, r3, r2
 80061da:	6963      	ldr	r3, [r4, #20]
 80061dc:	b2f6      	uxtb	r6, r6
 80061de:	4283      	cmp	r3, r0
 80061e0:	4637      	mov	r7, r6
 80061e2:	dc04      	bgt.n	80061ee <__swbuf_r+0x3a>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f7ff fcc0 	bl	8005b6c <_fflush_r>
 80061ec:	b9e0      	cbnz	r0, 8006228 <__swbuf_r+0x74>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	60a3      	str	r3, [r4, #8]
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	701e      	strb	r6, [r3, #0]
 80061fc:	6962      	ldr	r2, [r4, #20]
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	429a      	cmp	r2, r3
 8006202:	d004      	beq.n	800620e <__swbuf_r+0x5a>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d506      	bpl.n	8006218 <__swbuf_r+0x64>
 800620a:	2e0a      	cmp	r6, #10
 800620c:	d104      	bne.n	8006218 <__swbuf_r+0x64>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f7ff fcab 	bl	8005b6c <_fflush_r>
 8006216:	b938      	cbnz	r0, 8006228 <__swbuf_r+0x74>
 8006218:	4638      	mov	r0, r7
 800621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621c:	4621      	mov	r1, r4
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f806 	bl	8006230 <__swsetup_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	d0d5      	beq.n	80061d4 <__swbuf_r+0x20>
 8006228:	f04f 37ff 	mov.w	r7, #4294967295
 800622c:	e7f4      	b.n	8006218 <__swbuf_r+0x64>
	...

08006230 <__swsetup_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <__swsetup_r+0xac>)
 8006234:	4605      	mov	r5, r0
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	460c      	mov	r4, r1
 800623a:	b118      	cbz	r0, 8006244 <__swsetup_r+0x14>
 800623c:	6a03      	ldr	r3, [r0, #32]
 800623e:	b90b      	cbnz	r3, 8006244 <__swsetup_r+0x14>
 8006240:	f7ff f9fa 	bl	8005638 <__sinit>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800624a:	0718      	lsls	r0, r3, #28
 800624c:	d422      	bmi.n	8006294 <__swsetup_r+0x64>
 800624e:	06d9      	lsls	r1, r3, #27
 8006250:	d407      	bmi.n	8006262 <__swsetup_r+0x32>
 8006252:	2309      	movs	r3, #9
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	e034      	b.n	80062cc <__swsetup_r+0x9c>
 8006262:	0758      	lsls	r0, r3, #29
 8006264:	d512      	bpl.n	800628c <__swsetup_r+0x5c>
 8006266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006268:	b141      	cbz	r1, 800627c <__swsetup_r+0x4c>
 800626a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800626e:	4299      	cmp	r1, r3
 8006270:	d002      	beq.n	8006278 <__swsetup_r+0x48>
 8006272:	4628      	mov	r0, r5
 8006274:	f7ff faf4 	bl	8005860 <_free_r>
 8006278:	2300      	movs	r3, #0
 800627a:	6363      	str	r3, [r4, #52]	; 0x34
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	2300      	movs	r3, #0
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f043 0308 	orr.w	r3, r3, #8
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	b94b      	cbnz	r3, 80062ac <__swsetup_r+0x7c>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800629e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a2:	d003      	beq.n	80062ac <__swsetup_r+0x7c>
 80062a4:	4621      	mov	r1, r4
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f884 	bl	80063b4 <__smakebuf_r>
 80062ac:	89a0      	ldrh	r0, [r4, #12]
 80062ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062b2:	f010 0301 	ands.w	r3, r0, #1
 80062b6:	d00a      	beq.n	80062ce <__swsetup_r+0x9e>
 80062b8:	2300      	movs	r3, #0
 80062ba:	60a3      	str	r3, [r4, #8]
 80062bc:	6963      	ldr	r3, [r4, #20]
 80062be:	425b      	negs	r3, r3
 80062c0:	61a3      	str	r3, [r4, #24]
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	b943      	cbnz	r3, 80062d8 <__swsetup_r+0xa8>
 80062c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062ca:	d1c4      	bne.n	8006256 <__swsetup_r+0x26>
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	0781      	lsls	r1, r0, #30
 80062d0:	bf58      	it	pl
 80062d2:	6963      	ldrpl	r3, [r4, #20]
 80062d4:	60a3      	str	r3, [r4, #8]
 80062d6:	e7f4      	b.n	80062c2 <__swsetup_r+0x92>
 80062d8:	2000      	movs	r0, #0
 80062da:	e7f7      	b.n	80062cc <__swsetup_r+0x9c>
 80062dc:	20000064 	.word	0x20000064

080062e0 <_raise_r>:
 80062e0:	291f      	cmp	r1, #31
 80062e2:	b538      	push	{r3, r4, r5, lr}
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	d904      	bls.n	80062f4 <_raise_r+0x14>
 80062ea:	2316      	movs	r3, #22
 80062ec:	6003      	str	r3, [r0, #0]
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062f6:	b112      	cbz	r2, 80062fe <_raise_r+0x1e>
 80062f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062fc:	b94b      	cbnz	r3, 8006312 <_raise_r+0x32>
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 f830 	bl	8006364 <_getpid_r>
 8006304:	462a      	mov	r2, r5
 8006306:	4601      	mov	r1, r0
 8006308:	4620      	mov	r0, r4
 800630a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630e:	f000 b817 	b.w	8006340 <_kill_r>
 8006312:	2b01      	cmp	r3, #1
 8006314:	d00a      	beq.n	800632c <_raise_r+0x4c>
 8006316:	1c59      	adds	r1, r3, #1
 8006318:	d103      	bne.n	8006322 <_raise_r+0x42>
 800631a:	2316      	movs	r3, #22
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	2001      	movs	r0, #1
 8006320:	e7e7      	b.n	80062f2 <_raise_r+0x12>
 8006322:	2400      	movs	r4, #0
 8006324:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006328:	4628      	mov	r0, r5
 800632a:	4798      	blx	r3
 800632c:	2000      	movs	r0, #0
 800632e:	e7e0      	b.n	80062f2 <_raise_r+0x12>

08006330 <raise>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <raise+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f7ff bfd3 	b.w	80062e0 <_raise_r>
 800633a:	bf00      	nop
 800633c:	20000064 	.word	0x20000064

08006340 <_kill_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	; (8006360 <_kill_r+0x20>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	f7fa fd51 	bl	8000df4 <_kill>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d102      	bne.n	800635c <_kill_r+0x1c>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	b103      	cbz	r3, 800635c <_kill_r+0x1c>
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	20000380 	.word	0x20000380

08006364 <_getpid_r>:
 8006364:	f7fa bd3e 	b.w	8000de4 <_getpid>

08006368 <__swhatbuf_r>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	460c      	mov	r4, r1
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2900      	cmp	r1, #0
 8006372:	b096      	sub	sp, #88	; 0x58
 8006374:	4615      	mov	r5, r2
 8006376:	461e      	mov	r6, r3
 8006378:	da0d      	bge.n	8006396 <__swhatbuf_r+0x2e>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	bf0c      	ite	eq
 8006386:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800638a:	2340      	movne	r3, #64	; 0x40
 800638c:	2000      	movs	r0, #0
 800638e:	6031      	str	r1, [r6, #0]
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	b016      	add	sp, #88	; 0x58
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	466a      	mov	r2, sp
 8006398:	f000 f848 	bl	800642c <_fstat_r>
 800639c:	2800      	cmp	r0, #0
 800639e:	dbec      	blt.n	800637a <__swhatbuf_r+0x12>
 80063a0:	9901      	ldr	r1, [sp, #4]
 80063a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063aa:	4259      	negs	r1, r3
 80063ac:	4159      	adcs	r1, r3
 80063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b2:	e7eb      	b.n	800638c <__swhatbuf_r+0x24>

080063b4 <__smakebuf_r>:
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063b8:	079d      	lsls	r5, r3, #30
 80063ba:	4606      	mov	r6, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	d507      	bpl.n	80063d0 <__smakebuf_r+0x1c>
 80063c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	2301      	movs	r3, #1
 80063ca:	6163      	str	r3, [r4, #20]
 80063cc:	b002      	add	sp, #8
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	ab01      	add	r3, sp, #4
 80063d2:	466a      	mov	r2, sp
 80063d4:	f7ff ffc8 	bl	8006368 <__swhatbuf_r>
 80063d8:	9900      	ldr	r1, [sp, #0]
 80063da:	4605      	mov	r5, r0
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff fab3 	bl	8005948 <_malloc_r>
 80063e2:	b948      	cbnz	r0, 80063f8 <__smakebuf_r+0x44>
 80063e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e8:	059a      	lsls	r2, r3, #22
 80063ea:	d4ef      	bmi.n	80063cc <__smakebuf_r+0x18>
 80063ec:	f023 0303 	bic.w	r3, r3, #3
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	e7e3      	b.n	80063c0 <__smakebuf_r+0xc>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	6020      	str	r0, [r4, #0]
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	6163      	str	r3, [r4, #20]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	6120      	str	r0, [r4, #16]
 800640a:	b15b      	cbz	r3, 8006424 <__smakebuf_r+0x70>
 800640c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f81d 	bl	8006450 <_isatty_r>
 8006416:	b128      	cbz	r0, 8006424 <__smakebuf_r+0x70>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	431d      	orrs	r5, r3
 8006428:	81a5      	strh	r5, [r4, #12]
 800642a:	e7cf      	b.n	80063cc <__smakebuf_r+0x18>

0800642c <_fstat_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_fstat_r+0x20>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fa fd3a 	bl	8000eb2 <_fstat>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_fstat_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_fstat_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	20000380 	.word	0x20000380

08006450 <_isatty_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_isatty_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fd39 	bl	8000ed2 <_isatty>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_isatty_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_isatty_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000380 	.word	0x20000380

08006470 <_init>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr

0800647c <_fini>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr
